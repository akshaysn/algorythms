billionaire prince,
pregnant mistress
Sandra Marton
TORONTO • NEW YORK • LONDON
AMSTERDAM • PARIS • SYDNEY • HAMBURG
STOCKHOLM • ATHENS • TOKYO • MILAN • MADRID
PRAGUE • WARSAW • BUDAPEST • AUCKLAND
billionaire prince,
pregnant mistress
Sandra Marton
CHAPTER ONE
PRINCEALEXANDROS KAREDES, second in line to the throne of the
Kingdom of Aristo, did not like to be kept waiting.
Indeed, he never was.
Whowould be so foolish as to let a man like him cool his heels?
His own father, Alexandros thought with a sigh of resignation
as he strode past the marble fireplace outside the throne room for
what had to be the tenth time in as many minutes. The hands on
the French ormolu clock that graced the mantel stood upright at
six.Alexandros had been told the kingwould see him at five-thirty
butAegeuswas not known for promptness, even with his children.
“An unfortunate habit,” Queen Tia called it, but Alex was not
as kind. He knew his father well; he was certain Aegeus’s chronic
lateness was yet another subtle way of reminding everyone,
family included, that, though he was getting on in years, he was
still king.
It was undoubtedly the same reason he’d asked Alex to meet
him here, in such formal surroundings, rather than in the privacy
of the royal apartments.
That was just the way it was. There was no point in questioning
it. Aegeus was a more than competent ruler. He led the people
of Aristo well but he had always been distant in his dealings with
his wife, sons and daughters.
Alex had no objection. At six or seven, a display of affection,
a lessening of formalities might have meant something, but he
8 BILLIONAIRE PRINCE, PREGNANT MISTRESS
was thirty-one now, he had created his own eminently successful
life by bringing ever-increasing international recognition and
resources to the kingdom.
He had no need for signs of affection from his father. Affection
was for puppies and kittens, not grown men.
Alexandros glanced at the clock again.
Even though he understood the reason for it, being kept
waiting was irritating. And inconvenient. The meeting with his
father would not take long. He knew that from past experience.
He’d just returned from a business trip to the Far East. Aegeus
would simplywant to knowif things had gone well, if newbanks
and corporations would be joining the impressive list of those
already on Aristo, but he would not wish to hear the details.
Results were all that mattered, was Aegeus’s motto. How one
got to those results was immaterial.
That was okay with Alex. He didn’t need pats on the back any
more than he needed signs of affection. Itwas only that if the king
kept him waiting much longer, he’d be late getting into town.
Not that it mattered.
His new Ferrari would easily conquer the narrow roads that
wound along the cliffs looming above the Mediterranean. And
even if he arrived at The Grand Hotel in Ellos past the time he’d
told his date he’d pick her up, she would not complain.
A little smile lifted the corners of his lips.
Why be unduly modest? He did well with all the things he
most enjoyed. Beautiful women, fast cars, baccarat, the vast
business empire he’d created here and in New York.
His smile faded.
Actually, he had not done as well with women lately.
Not that they weren’t his for the taking. The woman waiting
for him tonight was what the world called a supermodel. Simone
had been doing a Vogue cover shoot outside the casino just as
Alex had arrived to discuss the casino’s expansion with its
manager, but that had not kept him from pausing to admire the
leggy blonde posing on the wide marble steps, dressed in a silk
gown that clung like a second skin.
SANDRA MARTON 9
Their eyes had met. Alex had grinned and without hesitation
she’d come down the steps, hips swaying thanks to heels so high
they seemed to be made for sin, oblivious to the frenzied ‘Hey!’
of the photographer.
“Hello,” she’d cooed when she had reached him, smiling the
smile that was worth ten thousand dollars an hour to an advertiser.
“I’m free this evening, Your Highness, and I certainly hope
that you are, too.”
He’d said he was leaving for Tokyo but he’d be back in three
days. “Call me,” she’d purred, and he had, first thing this
morning. What man wouldn’t? She was stunning. Sexy as hell.
He knew she’d be in his bed at the apartment he kept in town
before the night ended…
So what?
A crazy thought. But there it was. A gorgeous woman, another
hot liaison and all he could think was, So what? He’d have the
model and, come morning, she’d be looking for a way to turn a
night into an affair.
He’d be looking for a polite way to make it clear he wasn’t
interested.
Lately, ending an affair before it really had time to start had
become a pattern. He liked sex. Liked women. Their feel, their
scent, their company. It was just that he couldn’t seem to concentrate
on any one woman lately. For weeks now, he’d drifted
from one to another.
He knewdamned well there were men who’d find that exciting.
He didn’t.
Not that he believed in long-term affairs. A month. Two.
Three, that was about it and then he’d do the right thing, send an
incredibly expensive gift and move on.
Alex frowned.
The past couple of months, the only part of that familiar plan
he seemed to get right was the part about moving on.
His brothers had noticed. They’d taken to teasing him about
what they called his wanderlust. With the emphasis on ‘lust,’
Sebastian said, while Andreas grinned. Even his sisters got in on
10 BILLIONAIRE PRINCE, PREGNANT MISTRESS
the act, Lissa long-distance from Paris, Kitty sighing dramatically
and saying, Poor Alex. He just can’t find a woman to love.
Well, no. He wasn’t about to explain the difference between
love and lust to either of them but, of course, love had nothing
to do with it. Why would it? Love was one of those things people
talked about that didn’t really exist.
Myths. Myths as creative as any of the tall tales his long-ago
Greek and Roman ancestors had believed.
What people called ‘love’ was hormonal nonsense—though
he couldn’t call what had drawn his parents together hormonal.
They had come together because it was necessary. Carrying on
a name, a bloodline that had existed for centuries was in the
destiny of royals.
It would surely be the same for Sebastian, heir to the throne,
when the time came. Sebastianwould get to choose his ownwife—
thiswas the twenty-first century, after all—but hewould make that
choice from a carefully vetted list of acceptable young women.
Alex, second in line, would be under somewhat less pressure
but he knew the responsibility of marriage to an appropriate
bride, then children to bear his name, was in his future. It was
all part of his duty to the house of Karedes.
He would demand only that his future wife be attractive.
Beyond that, he had no expectations. Companionship, passion—
those things he would find in a mistress. He would be discreet;
he would never deliberately do anything to insult the woman he
married but a royal wife would understand that her role was to
bear him children.
Neither of them would be foolish enough to look for love.
Discretion in their extra-marital affairs would be enough.
Alex stopped pacing, jammed his hands into his trouser
pockets and stared at the coat of arms on the wall over the
enormous fireplace.
There had been a woman once, years ago. A girl, really. He’d
thought—never mind what he’d thought. What mattered was
what she had thought, that she could use her kisses, her touch,
her soft whispers to bewitch him. He’d been a boy then, led
SANDRA MARTON 11
around by a part of his anatomy that had nothing to do with his
brain, but he’d learned the truth about her in time and had been
wiser for it.
Since then, he had not let a woman lure him into complacency.
Into forgetting that a man always had to look beyond a beautiful
face to see a woman’s true agenda…
Until that night two months ago.
A night when a stranger had stepped into his arms, her face
radiant with seeming innocence. She’d lifted her mouth to his,
parted her lips to the whisper of his breath, the thrust of his
tongue and the world had blurred—until the next morning, when
he’d learned it had all been a lie.
“Prince Alexandros.”
Not just a lie. Alex’s jaw tightened. A scam. A fraud. A
swindle of the first magnitude, and he had fallen for it.
“Sir? The king and queen ask that you join them.”
But she hadn’t gotten away with it. Instead, he’d pretended
he knew nothing of her deception. She had played a part; in the
harsh light of day, it had been his turn to play one, too.
He’d taken her back to bed. Had sex with her again. And that
time, when it was over and she lay sated beneath him, he’d
watched her eyes fill with shock as he told her he knew who she
was, what she was, and promised her that all that would come
of her despicable game was defeat.
Then he’d sent her packing.
The incident had meant so little to him that he could not even
remember her name. Despite her wiles, he’d been the victor.
He’d had hours of sex that had seemed incredible, though he
knew now it had only been, well, sex. And the moment of sweet
revenge that followed had made everything right.
“Your Highness? Their majesties will see you now.”
Or had it?
It wasn’t just women he’d had a lot of these past weeks; it was
everything. He’d put endless miles on the royal private jets with
business trips from his offices in New York and Aristo to
Bermuda. To the Bahamas. To the Virgin Islands, to Florida, to
12 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Mexico and, most recently, Japan. Successful trips, all of them,
but he’d set one hell of a pace. Meetings by day; by night, the
baccarat tables, high-stakes poker…
And sex.
Was it possible he’d spent the last weeks going from country
to country, bed to bed, trying to wipe away the ugly memories
of a night when he’d come as close as a man could to letting a
woman use him?
“Sir. The king and queen are waiting for you.”
Alex blinked. Galen, his father’s major-domo, stood at stiff
attention before him. From the expression on his face, he’d been
there a while.
“Thank you, Galen. Efcharisto.”
“Are you well, sir?”
“Yes, yes, I’m fine. A little distracted.” Alex forced a grin.
“There’s a lady waiting for me in town.You know how that is.”
Galen permitted himself a small smile. “I am sure the lady is
happy to wait, sir,” he said, and stepped aside with a deep bow
as Alex walked past him into the throne room.
His parents were not alone.
A handful of aides hovered around his father, who was seated
at an antique desk liberally strewn with sheets of paper. His
mother stood on the throne platform, encircled by several of her
ladies-in-waiting who held lengths of silk brocade against her
while a seamstress sat on the floor, pinning and tucking and
doing whatever in heaven’s name women did with all those yards
and yards of fabric.
Alex’s lips twitched.
Despite its elegance, the frescoes, the ceiling painted by a sixteenth-
century master and a wall hung with exquisite Byzantine
icons, right now the room looked more like someone’s slightly
messy sitting room than a place in which the kingdom’s most
formal ceremonies were held.
His father looked up. “There you are,” he said in a tone that
suggested it was he who’d been kept waiting. “Well, what do
you think?”
SANDRA MARTON 13
Alex raised his eyebrows. “About what?”
“About these plans, of course.” Aegeus slapped a hand on the
papers spread over his desk. “Do wewant a theme, or do we not?”
No, Alex thought, this was not someone’s sitting room, this
was more like the Mad Hatter’s tea party.
“A theme for what?” he said carefully.
Aegeus shot to his feet, scattering the aides crowded around him.
“For your mother’s sixtieth birthday celebration, of course!
If you hadn’t spent the last month doing God knows what, you’d
know what was going on here!”
“Now, Aegeus.” Husband and son looked at the queen, who
smiled at them both. “You know Alexandros has been busy convincing
foreigners that our kingdom is the perfect place for them
to invest in the future. And I’m sure we can assume he’s been
successful. Haven’t you, Alex?”
Alex smiled and went to his mother. She bent toward him and
he took her hand and brought it to his lips.
“Mother. I’ve missed you.”
“How was your trip?”
“It was fine.” Alex smiled. “We snared a lot of foreigners who
look forward to a happy future.”
His mother laughed. “You see, Aegeus? It’s just as I said.” Tia
waved the women away and came gracefully down the steps. “It’s
good to have you home again, Alexandros.”
“It’s good to be here.” Alex nodded at the women gathering
up the fabrics. “What’s all this?”
“I just told you what it is,” Aegeus said with impatience.
“Preparation for your mother’s birthday celebration. I thought we
should make the final selections of décor, color and fabric here
in the throne room, where the most formal part of the ceremony
will take place. Isn’t that right, gentlemen?”
The aides nodded.
“We want to be certain everything comes together properly.”
Aegeus looked at his aides, who nodded again. Alex thought
of turkeys pecking for grain at the feet of the farmer who owned
them and repressed a smile.
14 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“So, what do you think, Alexandros? What theme shall we
use? Our history as part of the ancient world? A link to the days
of the Crusades? The time of the Ottoman Empire? All those
things, as you well know, are in our bloodline.”
Who gave a damn? What mattered was the celebration of his
mother’s sixtieth birthday, not his father’s lineage.
“Any of those would be fine,” Alex said smoothly, with a
quick glance at his mother. “Something big and splashy. After
all, we don’t want it said that only the Calistans can do parties
that are showy.”
He saw his mother bite back a smile.Any mention of Calista,
which had once been part of the Adamas empire along with
Aristo, was enough to make his father’s hackles rise.
“Showy,” Aegeus said, frowning.
“Exactly.” Alex shook his head. “I’ve never understood why
there was so much coverage of the Queen of England’s birthday
celebration a couple of years ago when it was all so low-key.
Have you, Mother?”
“No,” Tia said with perfect innocence, “I’ve never understood
it, either. All those reporters and television people, theworldwide
interest in Elizabeth and the British royals…and all of it done,
as you say, Alexandros, with such quiet elegance.”
The king snorted. “What is there to understand? One either
knows the virtue of simplicity or one doesn’t.” He looked down
at the papers on his desk, studied them for a long moment, then
swept them to the floor with his hand. “I have just chosen a theme
for your birthday celebration, Tia. The coming of spring. I can
envision it now. Masses of early spring flowers. The Venetian
dinnerware in shades of palest green and yellow. And you, the
queen, dressed in a gown the same pale pink as the diamond in
the Aristan crown.”
Thank you, Tia mouthed to her son. Alex flashed her a grin.
“That sounds very nice,” she said demurely.
“Nice? It will be magnificent, especially with you resplendent
in the new necklace I’ll commission as your birthday gift.
Although we could add a brooch…”
SANDRA MARTON 15
“No brooch,” the queen said. “It would be inappropriate,
Aegeus, to wear both a brooch and a necklace.”
The king waved his hand. “Whatever. Take it up with the
craftsman.”
“The jewelry designer,” Tia commented. “That’s what she is.”
She? Alex frowned and thought back to the weekend the final
half-dozen jewelry designers, selected from all around the globe,
had been invited to Aristo to meet with his parents. Had there been
another woman in the group? He only recalled one.
But then, he thought grimly, that had been the plan, hadn’t it?
That the prince who might influence the choice of designer
should have been so bewitched he would notice only one?
Besides, what did his father mean by talking about the
necklace he would commission? The commission had been made
weeks before.
“—don’t you agree, Alexandros?”
Alex looked at his father. “Sorry, Father. I missed that.”
“I said, it doesn’t matter what this woman is called. Designer,
artisan, craftsman—craftswoman,” the king amended, with a nod
to his wife. “She simply must understand the importance of this
commission… And why are all the rest of you still hanging
about?” Aegeus clapped his hands and the seamstress, aides and
ladies-in-waiting scurried from the room. “She must understand
that, Tia. That is a given.”
The queen nodded. “I am certain that she will.”
“I hope you’re right. She seemed very young to me.”
Things were becoming more confusing. His parents were
definitely referring to a woman designer. A young designer…
Alex stiffened.
No. They couldn’t be talking about her. About Maria Santos
and, yes, he damned well did remember her name. How could
he not? A man who was marked to be the gullible victim of a
scam didn’t forget the person who’d been the scammer.
“She couldn’t have seemed anything to you, Aegeus,” Tia
said, with a little smile. “Remember? We never had the pleasure
of meeting her. She sent us a note and explained she’d been
16 BILLIONAIRE PRINCE, PREGNANT MISTRESS
taken ill that morning. But, of course, we already had seen Miss
Santos’s sketches, and—”
A fist seemed to clench Alex’s gut. He took a deep breath and
forced himself to speak calmly. “Maria Santos? But you said the
commission went to a French company.”
“It did, but they just notified us that the owner passed away
and left the firm tied up in all kinds of unpleasant litigation.” Tia
took Alex’s arm. “I know. It’s all very last minute, and Miss
Santos doesn’t even know that we’re going to ask her to implement
her design.”
“That’s why your trip to New York has such urgency,
Alexandros.”
Alex stared at his father. “What trip to New York?”
“You will see the Santoswoman and inform her of our decision.”
“What your father means,” Queen Tia said, “is that you’ll
explain what’s happened and ask Miss Santos if she will be
generous enough to take on the job at such short notice.”
Another snort from the king. “She’ll leap at the chance.”
“But she might not,” the queen said softly. “This is very last
minute. And true artists have tender egos. Miss Santos may not
like thinking of herself as second choice.”
Alex wanted to laugh. A tender ego? He’d bet Maria Santos
had an ego that could dent cast iron.
“You’re the diplomat in the family,” the king said briskly.
“All that talking and contracting with the businesses you’ve lured
to our island over the years…”
It was as close to a compliment as his father had ever offered
but it wasn’t enough to make Alex go to Maria Santos and present
her with the chance of a lifetime.
“Iwould be happy to help,”Alex said briskly, “but I have pressing
commitments here on the island. Surely someone else can—”
“Someone else cannot,” Aegeus retorted. “You have offices
and an apartment in New York. You know the city. You know its
tempo, its attitude. You’ll be better able to work with the Santos
woman and ensure the necklace is ready in time.”
So much for compliments. This was a royal command. That
SANDRA MARTON 17
the woman who’d wanted this job badly enough to damned near
sell herself to secure it would now get it by default, that he would
be the man who’d have to offer it to her, was almost too ironic
to believe.
“There were other designs submitted,” he said. “Surely one
of them would do?”
His mother’s small hand tightened on his arm. “I preferred
Miss Santos’s work from the beginning, Alex. I deferred to your
father when he selected the French firm, of course, but now…”
Alex looked at the queen as her words trailed away. He knew
it would take little for his father to tell her he had decided on a
different designer. Tia was as restrained as Aegeus was quicktempered,
as gentle as the king was stern. He’d always had the
feeling his mother’s life was not quite the life she had hoped for.
Growing up, he’d spent little time at her side. Boarding school,
tutors, the expected rigor of life as a king’s son had seen to that,
but he loved her deeply none the less. And if a birthday gift
designed by Maria Santos was what she wanted…
“Alexandros?” Tia said softly. “Do you think I’m making
a mistake?”
Alex put his arm around his mother’s shoulders and hugged her.
“What I think is that you should have precisely what you
want on your birthday.”
His mother beamed. “Thank you.”
“Thank me, you mean,” the king said briskly, and gave his
wife what passed for a loving smile. “I’m the one commissioning
your gift.”
The queen laughed. She rose on her toes and kissed her son’s
cheek, then reached for her husband’s hand.
“Thank you both,” she said. “How’s that?”
“It’s fine,” Alex replied.
And that was what he kept telling himself, that it would be
fine, during the seemingly endless flight all the way from Aristo
to New York.
CHAPTER TWO
EVERYTHING was going to be fine.
Absolutely fine, Maria told herself wearily as the Lexington
Avenue local rumbled to a stop at the Spring Street subway station.
Never mind that the man next to her smelled like a skillet of
sautéing garlic. Forget that her feet were shrieking after a day
strapped into gorgeous-but-impossible Manolo stilettos. Pretend
the rain that had become sleet hadn’t turned her sleek, three
hundred dollar Chez Panache blow-out right back into her usual
tumble of coffee-colored wild curls, or that she was obviously
coming down with the flu or something suspiciously like it.
Oh, yes, everything was going to be fine.
And if it wasn’t…if it wasn’t…
The train gave a lurch as it left the station. Garlic Man fell
into her, Maria stumbled sideways and felt one of her sky-high
heels give way.
A word sprang to her lips. It was a word ladies didn’t use, even
if they knew how to say it in Spanish as well as English. Not that
Maria felt much like a lady right now. Still, she bit back the word,
instead visualized it in big neon letters and decided that trying
to figure a way to find the lost heel on the floor of the packed
subway car was something only a madwoman would attempt.
Goodbye, Manolo Blahniks. Goodbye, Chez Panache.
Goodbye, Jewels by Maria.
No. Absolutely, no. She was not going to think like that. What
was it she’d learned in that stress reduction class? Okay, she
hadn’t taken the class, not exactly; there was no time for anything
like taking classes in her life but she’d read the course description
in The New School catalog…
Live in the now.
That was it. Reduce stress by learning to live in the now. At
the moment, that meant—damn!—that meant the train was
pulling into Canal Street.
“Excuse me. Sorry. Coming through!”
She pushed her way through the rush-hour crowd, reached the
doors just as they began to shut and hurled herself onto the
platform. The doors closed; the train started. People surged
toward the stairs, carrying a hobbling Maria in their midst.
Climbing the steps to the street with one shoe now four inches
shorter than the other was an interesting experience. Why did
they make shoes with heels like these? Better still, why had she
bought them? Because men thought they looked good? Well, they
did, but that wasn’t the reason. There was no man in her life; she
couldn’t imagine there would be, not for a long time after that
incident two months ago on Aristo.
The prince. The prince of darkness, was how she’d taken to
thinking of him, and she felt the anger rise inside her again.
Damn it, why was she remembering him, anyway? Why waste
time on him or that night? It had all been a nightmare. She hated
herself for it, would probably always hate herself for it, thought
not half as much as she hated him and…
And, there was no point in this.
Aristo, the commission she’dwanted so much and lost because
of him, were behind her. She had to concentrate on the present.
On how to convince shops like L’Orangerie to buy her designs.
That, she thought grimly, that was why she’d worn these
shoes.Why she’d spent as much on a stupid blow-out as she could
have spent to buy gold wire for the new earrings she’d been
sketching.Why she’d all but begged for today’s meeting with the
buyer from L’Orangerie. And where had it gotten her?
Nowhere, Maria thought as she reached the sidewalk. Nowhere
SANDRA MARTON 19
20 BILLIONAIRE PRINCE, PREGNANT MISTRESS
except out here, limping home like a derelict in sleet that was
rapidly turning to snow.
The weather, coupled with the fact that it was Friday, had sent
people fleeing their offices earlier than usual. Still, the street was
crowded. This was Manhattan, after all. The good news was that
because this was Manhattan, nobody so much as looked at her.
Still, she felt ridiculous, hobbling like this.
Yes, Maria, but the better news is that your heel could have
come off when you were on Fifth Avenue, heading for that
meeting with the man from L’Orangerie.
What an impression she’d have made then.
Not that it would have mattered.
L’Orangerie’s head buyer had been polite enough to keep the
lunch appointment and honest enough to begin it by telling her
he wasn’t going to buy her designs.
“I like them, Ms. Santos,” he’d said, “I like them very much—
but your name will mean nothing to our clients. Perhaps after
you’ve had a bit more exposure…?”
More exposure? Maria gave an inelegant snort as she turned
the corner. How much more exposure did she need? After
winning the Caligari prize, she’d sold to Tiffany’s. To Harry
Winston. To Barney’s.
She’d said all that to her luncheon companion. And he had
said yes, he knew she had, but her status in those places was insignificant
compared to designers like Paloma Picasso and Elsa
Peretti, n’est-ce pas?
Not, she’d wanted to say. Not n’est-ce pas.
Maybe she didn’t have a lot of pieces in the display cases.
Maybe the stores didn’t buy whole page ads for her in The New
York Times and the high fashion magazines. Okay, maybe they
didn’t advertise her name at all.
But she’d sold to the big players. That mattered. And the
pieces she’d designed were certainly more significant than that
phony French accent laid over the unmistakable underpinnings
of his Brooklyn upbringing.
She almost told him so.
SANDRA MARTON 21
Fortunately, sanity had made her put a forkful of salad instead
of her foot in her mouth.
She couldn’t afford to insult a jewelry buyer of such influence.
The world to which she wanted entry was small.
Gossipy. Insulting one of its door-keepers came under the
heading of ShootingYourself in the Head Just to See if the Gun
Would Fire.
Besides, he was right.
She’d been incredibly lucky to sell a few pieces to those
stores. Who knew if she’d ever sell them others? Who knew how
she’d sell them others? Not landing the Aristan commission had
been an enormous setback.
When you could add a discreet line to your business card that
said ‘By commission to Their Majesties, King Aegeus and Queen
Tia of Aristo,’ you had the world by the tail.
She’d lost the chance to have that happen.
Correction. A man had taken that chance from her. A man who
had seduced her and then tossed her out of his bed as if she’d
been a twenty-dollar whore.
“Stop that,” she muttered to herself. Why think of him now?
Why waste time looking back? There was no point.
Maria made a left on Broome Street, hobbled to the next
corner, turned down that street and, finally, there it was. Her
building. Well, not hers. The building in which she lived. And
worked. That was the great thing about renting a loft. There was
plenty of space within its high walls, room for sleeping and
eating, but mostly room for working.
If she could keep working.
The fact of the matter was, she was in debt up to her ears.
The loft cost thousands a month to rent. The gold and silver,
the precious and semi-precious stones with which she worked,
cost thousands, too. She had only one employee, Joaquin, but she
had to meet his salary every week. And designing something that
would be a fit gift for the Queen of Aristo’s sixtieth birthday had
taken hours and hours of time.
So she’d borrowed the small fortune she’d needed to pay her
22 BILLIONAIRE PRINCE, PREGNANT MISTRESS
rent, her bills, to set aside other projects and devote endless
hours to a design for the competition.
Useless, all of it. Useless.
She had been one of the three finalists. They’d all been invited
to Aristo, where the winner would be announced at a ceremony.
And she’d lost any possibility of being that winner in one night.
One foolish night.
A handful of hours had ruined her hopes and dreams, had left
her humiliated beyond measure and the truth was, it was her fault,
all of it. Not the fault of the man who’d seduced her.
Alexandros, the Prince of Aristo, had only proved what she
already knew. The hell with soft lights and sweet talk. All a man
wanted from a woman was sex. That she, of all women, should
have forgotten that cold truth and given in to a moment’s
weakness, was unforgivable.
Once you’d warmed a man’s bed, he had no further use for
you. If something unexpected happened, like, in this case, it
turning out that he was an Aristan prince and you were a finalist
in the competition to design his mother’s birthday gift, he’d lay
the blame for the seduction on you, even when he was the one
who’d done the seducing.
Her father had put the blame on her mother.
The mighty prince had put the blame on her.
“Damn this useless shoe,” Maria said furiously. To hell with
the snow and the icy pavement. She bent down, ripped off both
the broken shoe and its mate, and strode the last few wet yards
to her front door.
It swung open just as she reached it. Joaquin stepped onto the
street, smiled when he saw her but his smile changed to bewilderment
as his startled gaze dropped to her nylon-clad feet.
“Maria? ¿Cuál es la materia? ¿Por qué está usted descalzo
en este tiempo?”
Maria forced a smile. “Nothing’s wrong. I broke my heel,
that’s all.” She stepped past him into the vestibule. “I thought
you’d be gone by now.”
The door swung shut behind her. She started up the stairs to
SANDRA MARTON 23
the loft, Joaquin at her heels. There was a freight elevator, but,
as usual, it wasn’t working.
“I am still here, as you can see. I waited in hopes you would
return to tell me good news.”
Maria nodded but said nothing. When they reached the third
floor, she stabbed her key into the lock, walked briskly across
the age-dulled hardwood floor, dropped her shoes and bag on a
table near one of the loft’s big windows and turned toward her
old friend and co-worker.
“That was good of you.”
Joaquin’s warm brown eyes searched her face. “It did not go
well?”
Maria sighed as she slipped her coat from her shoulders. She
could lie or at least make the meeting with the buyer sound more
hopeful, but there was no point. Joaquin knew her too well. He’d
been working for her for five years. More than that, they’d grown
up in neighboring apartments in a crumbling building in the
Bronx, which was not a place most people thought of when they
spoke of New York.
Joaquin and his family had come from Puerto Rico to the
mainland when he was five and she was six. He was the brother
she’d never had.
So, no. Trying to fool him was useless.
“Maria?” he said softly, and she sighed.
“We didn’t get the contract.”
His expression softened. “Ah. I am so sorry. What happened?
I thought this Frenchman had good taste.”
“He’s not even a Frenchman,” Maria said with a little laugh.
“As for taste, well, he says he likes my work. But—”
“But?”
“But, I should get in touch with him when Jewels by Maria
is better known.”
“When it is,” Joaquin said stoutly, “you won’t need him.”
Maria grinned. “It’s just a good thing you’re married or I’d
nab you for myself.”
Joaquin grinned, too. It was an old joke and they both knew
24 BILLIONAIRE PRINCE, PREGNANT MISTRESS
it had no meaning. So did Joaquin’s wife, who was Maria’s
best friend.
“I’ll be sure and tell Sela you said that.”
“Tell her, too, that I’m looking forward to dinner on Sunday.”
“I will.” Joaquin tucked his hands in his overcoat pockets. “I
left the new wax castings on the workbench.”
“Thank you.”
“FedEx delivered the opals you ordered. I put them in the safe.”
“Excellent.”
Joaquin hesitated. “There is also a letter—a registered letter—
from the bank.”
“Of course there is,” Maria said sharply. She sighed and put
her hand lightly on Joaquin’s arm in apology. “Sorry.” She
smiled. “No need to kill the messenger, right?”
“You might change your mind when I tell you that your
mother phoned.”
Joaquin said it lightly but they both knew a call from Luz
Santos was rarely pleasant. Maria’s mother’s life had not gone
well; she held her daughter responsible. Having Maria had
changed her life. It had ended her dreams. Her plans. Not that she
had regrets. Oh, no. No regrets. She had sacrificed everything for
Maria but that was what mothers were supposed to do.
If only Maria would make the sacrifice worthwhile. If only
she would stop playing with trinkets and get a real job…
“My mother,” Maria said, and sighed again. “Did she say
what she wanted?”
“Her back is acting up. She has indigestion. Her doctor is of
no use to her.” Joaquin cleared his throat. “Mrs. Ferrara’s
daughter was just promoted.”
Maria nodded. “Of course.”
“So was your cousin Angela.”
“Again,” Maria said, deadpan.
“Again,” Joaquin agreed.
Suddenly, it seemed too much. The day. The disappointment.
The overdue bank loan. The flu symptoms she couldn’t shake,
and now a call from Mama… A little moan escaped her lips.
SANDRA MARTON 25
Joaquin put his arms around her and she gave in and leaned her
head against his shoulder.
“Maria, I have a fine idea. Come with me. You know Sela will
be thrilled to see you. She is making Chile Colorado for supper.
When was the last time you had something so delicious, hmm?”
She smiled, stood straight and knotted the woolen scarf at his
neck.
“Joaquin,” she said gently, “go home.”
“If there was a way Sela and I could help you—”
“I know.”
“If only you had gotten that commission. I still cannot understand
the reason you didn’t win.”
She understood it, but she’d sooner have died than divulge it.
“You’ll see, Joaquin. Everything will work out.”
“De su boca al oído del Dios.”
From her mouth to God’s ear. It made her smile again. She
clasped his face in her hands and kissed him lightly on the mouth.
“Go home, mi amigo.”
“Sela will be angry I left you alone at a time like this.”
“Tell Sela I love her but I am your boss,” Maria said with mock
severity, “and I sent you home.”
Joaquin grinned. “Yes, boss,” he said, and pressed a kiss to
her forehead.
She watched as he made his way to the door. It swung shut
after him and she wrapped her arms around herself and shuddered.
It was very cold in the loft. The high ceiling seemed to
steal the landlord’s miserly allotment of heat from the radiators
and the windows, though wonderfully big, were as old as the
building. On a day like this, the wind was relentless and sent
chilly air straight into the cavernous room.
A draft was blowing right on her. And a film of frost was just
beginning to form on the glass. Maria rubbed at it with her fist…
What was that car doing here?
It was parked just across the street. A big car, long and black
and elegant. She knew little about automobiles but in this stillungentrified
stretch of Lower Manhattan a Rolls or a Mercedes
26 BILLIONAIRE PRINCE, PREGNANT MISTRESS
or a Bentley, whatever the vehicle was, stood out like the proverbial
sore thumb.
Her lips turned down.
It was probably a realtor, trying to get a feel for things. They’d
been showing up as regularly as rats in the alley, a sure sign that
the area was about to become too expensive for people like her.
One realtor had even turned up at her door a couple of weeks ago,
oozing charm. She’d only managed to get rid of him by assuring
him she didn’t own her loft—though she hadn’t been able to keep
from telling him that if she did, there wasn’t a way in the world
she’d sell it to him.
In a gesture of defiance and frustration, she glared at the car
and stuck out her tongue. Then she drew back into the darkness,
laughing nervously at herself. What a crazy thing to do but on a
day that had gone as badly as this, it was better than nothing.
Alex, sitting in the back of the Bentley limo, blinked in surprise.
Had the Santos woman just stuck her tongue out at him?
No. Why would she do that? She couldn’t even see him. It was
dark. The windows of the car were tinted. She had no way of
knowing if there was someone in the car or not.
A distortion, then, caused by the cold and the heavily
falling snow.
Not that it had been falling heavily enough to have kept him
from seeing that cozy lovers’ greeting between her and the man
who’d just left. And not that he gave a damn. Five minutes to
explain why he was here, that the commission was hers, and that
would be the end of it.
This was for his mother. He could ignore his anger. His
disgust. He could do this.
He just wished he hadn’t had to view such a charming little
scene. It was enough to make his belly knot. A snowy evening.
A lover, so eager for his woman that he met her downstairs.
Greeted her with tenderness. Went back upstairs with her. Talked
to her. Kissed her…
And walked away.
SANDRA MARTON 27
Alex frowned.
What sort of lover was this man? Why had he chosen the cold
night instead of a woman’s heat? As for tenderness… Did he not
know that tenderness was not what Maria Santos wanted? She
was hot. Wild. Eager in bed.
Even now, he could remember how she had been that night.
Her scent. Lilies of the valley, he had thought, as delicate and
fragrant as those that grew wild in the hills near his home on the
cliffs. Her skin, warm and soft under his questing hands. Her hair,
brushing like silk against his throat.
Her nipples, sweet on his tongue.
Her mouth hot, so hot against his.
Her little cries. Her moans. That one incredible moment as
he’d entered her when he’d thought—when he’d imagined—
that she had never before known a man’s possession.
And, damn it, what in hell was he doing? His body had grown
hard, just remembering. Alex let down the window and drew a
long breath of cold, snow-laden air into his lungs.
The thing to remember was not how she had been in his bed
but the reason she had been there. It had not been an accident;
that she’d stood in seeming uncertainty just in front of the
building in which he had his offices in Ellos, guidebook in hand,
had been, he knew, deliberate.
He had not suspected it then.
But he’d noticed her right away. What man wouldn’t?
Slender, very pretty, her dark mane of hair pulled away from
her face by a simple gold clasp and left to tumble down her
back, her figure limned by the fading light of the day, she’d been
a delightful sight.
He’d paused as he came out the door. She had a pair of small
reading glasses perched on the end of her nose; somehow, that
had added to her charm.
American, he’d thought, a tourist. And, without question, lost.
He’d been in no particular hurry to go anywhere. Okay, why
not? he’d said to himself, and smiled as he’d approached her.
“Excuse me,” he’d said pleasantly, “but do you need some help?”
28 BILLIONAIRE PRINCE, PREGNANT MISTRESS
She’d looked up from the slim guidebook, her eyes a little blurry
because of the glasses. Her hesitation had been artful, just enough
to make her seem not just cautious but almost old-fashioned.
“Well—well—thank you. Yes, actually, I do. If you could tell
me… I’m looking for the Argus. It’s a restaurant. Well, a café.
The guidebook says it’s supposed to be right here. The hotel desk
clerk said so, too. But—”
“But it isn’t,” Alex had said, smiling again. “And, I’m afraid,
it hasn’t been, not for at least a year.”
Her face had fallen. Disappointment had only made her lovelier.
“Oh. Oh, I see. Well—thank you again.”
“You’re most welcome.”
She’d taken off her glasses and gone on looking up at him,
her eyes—hazel, he’d noted, neither brown nor green nor gold
but a veritable swirl of colors—as wide and innocent as a fawn’s.
Innocent as a fox approaching a hen house, he thought now,
his mouth thinning to a tight line.
Maria Santos had known exactly what she was doing, right up
to howshe’d reacted when he’d suggested another restaurant nearby.
“Is it…?” She’d hesitated. “I mean, is this other restaurant—?”
“As good as the Argus?” Truth was, he had no idea. He’d never
been to the Argus. From what little he recalled, it had been a tiny
café, just a place to get a quick bite.
“As inexpensive.” Color had swept into her cheeks. “The
guidebook says—”
“You don’t have to worry about that,” he’d said, because
she wouldn’t.
The restaurant he’d recommended was incredibly expensive—
but he would take her to it. He would dine with her and
pay the bill. Just to talk, he’d told himself. Just to be a good ambassador
for his country, even though—to his surprise—this
beautiful stranger did not seem to recognize his face when the
simple truth, much to his chagrin, was that spotting him was as
much a tourist attraction as the beaches, the yachts and the casino.
The hell she hadn’t recognized him.
She’d known who he was. She’d set the entire thing up.
SANDRA MARTON 29
But he had not known it, then.
She’d protested prettily that she couldn’t possibly let him pay
for her meal but she’d let him think he’d overcome her protests.
And, after dinner, when they’d walked along the sea wall, when
he’d kissed her while they stood surrounded by the tall pines that
grew on a little promontory and their kisses had gone from soft
and exploratory to hot and deep, when his hands had gone under
her silk skirt and she’d moaned into his mouth, when he’d put his
arm tightly around herwaist, still kissing her, and led her through
the now-quiet streets to his flat, to his bed, when she’d clung to
him and whispered she’d never done anything like this before…
When she’d come apart in his arms, her cries so sweet, so
wild, so real…
Alex cursed.
“Sir?” his driver said, but Alex ignored him, swung open the
door of the Bentley himself and stepped into the night.
Lies, all of it, lies that had come undone in the early morning
when he’d reached for her again and found her side of the bed
empty. He’d assumed she was in the bathroom.
She wasn’t.
He’d heard her voice, soft as the breeze from the sea. Was she
on the phone? Without knowing why he did it, he’d carefully
lifted the one on his night table and brought it to his ear.
Yes, he’d heard her say with a breathy little laugh, yes,
Joaquin, I think I really do have a good chance of being named
the winner. I know the competition is tough but I have every
reason to believe my chances are really excellent.
She’d looked up from the telephone when he walked into the
kitchen. Her face had gone crimson.
“You’re awake,” she’d begun to say, with an awkward smile.
He’d taken the phone from her hand. Pressed the ‘end’button.
Carried her back to bed without saying a word, taken her in
passion born of anger.
Then he’d told her to get her clothes on. To get the hell out.
And not to bother showing up at the palace, later.
“Your chances of being named to design my mother’s
30 BILLIONAIRE PRINCE, PREGNANT MISTRESS
birthday gift,” he’d said in clipped tones, “are less than those
of a snowball in hell.”
Alex strode across the street.
It had taken two months but that prediction was no longer just
a metaphor. Here was the snow. And, in just a couple of minutes,
Maria Santos would get a first-hand introduction to hell.
And he would get the satisfaction of putting her, and that
night, out of his head.
Forever.
CHAPTER THREE
MARIA sighed, peeled off her dressed-for-success suit jacket,
tossed it over the back of a chair and automatically reached for
the phone to return her mother’s call.
Her hand stilled.
What was she doing? A ten-minute litany of aches and pains,
followed by a lecture about how she needed to get a real job, were
the last things she wanted right now.
Get out of her clothes. Run a hot bath. Eat something. Then
she’d make the call.
Maria looked at her shoes, made a face and heaved them into
the big trash can beside her work table. Gorgeous but impractical.
She should have known better than to have bought them.
Gorgeous but impractical was not for her. It never had been.
And she hadn’t bought the shoes for today, she’d bought them
for the weekend she’d gone to Aristo. She’d wanted to look sophisticated,
but the shoes hadn’t done her much good then, either.
Even if she’d looked sophisticated, she’d behaved like a—likea—
No. She wasn’t going there. Not tonight. Rejected by a phony
Frenchman today, rejected by an arrogantAristan two months ago.
That was more than enough.
She stepped out of her skirt and padded, barefoot, to the end
of the loft that served as a sleeping area. She tossed the skirt on
the futon, peeled off her bra and pantyhose, yanked the clasp
from her hair, bent forward and ran her hands briskly through
32 BILLIONAIRE PRINCE, PREGNANT MISTRESS
the now-wildly curling strands. Then she tossed her head back,
grabbed a pair of old, scruffy sweats, and put them on.
Time for supper, though the thought of eating made her feel
vaguely queasy.
Nothing new in that. On top of everything else, she’d felt
vaguely ill for the past week or so. No big surprise, considering
that half the city was down with the flu. She probably had it, too,
but she couldn’t afford to give in to it right now, not with half a
dozen pieces to complete by the end of the month.
Her buyers expected her to be prompt. And she needed the
money they’d owe her on delivery.
So, no, she wouldn’t even admit to the possibility that she
might be sick. Absolutely not. She was under stress, she was
working hard. The fatigue, the heaviness in her limbs, the faint
sense of nausea that came and went…
Stress, was what it was.
Something to eat, something bland, would make her feel
better. Nerves had made her bypass breakfast; lunch had been a
joke. Definitely, she had to put something in her stomach.
Soup? Scrambled eggs? Grilled cheese? Better still, she could
order in from Lo Ming’s, down on the corner. Egg drop soup.
Steamed dumplings. Forget the calories. Forget the cost. An
order of Chinese comfort food, then she’d turn on the TV, curl
up on the sofa, get lost in something mindless while—
The doorbell rang.
Now what? It was late. Who would come here at this hour?
Of course. Joaquin. He knew what a setback today had been.
He’d probably gone half a block, phoned Sela on his cell phone
and she’d ordered him to go back and insist Maria come for supper.
The bell rang again. Maria pinned a smile to her lips, went to
the heavy door, undid the lock and pulled it open.
“Joaquin,” she said, “honestly, you have to learn to take ‘no’
for an ans…”
Alexandros Karedes, snow dusting the shoulders of his leather
jacket and glittering like jewels in his dark hair, stood at the door.
Maria felt the blood drain from her head.
SANDRA MARTON 33
“Good evening, Ms. Santos.”
His voice was as she remembered it. Deep. Husky. Perfect
English, but with the faintest hint of a Greek accent. And cold, as
cold as it had been that awful morning shewould never forget, when
he’d accused her of horrible things, called her terrible names…
“Aren’t you going to ask me in?”
She fought for composure. Last time they’d faced each other,
they’d been on his turf. Now they were on hers. She was in
command here, and that meant everything.
“There’s a sign on the door downstairs,” she said, her tone
every bit as frigid as his. “It says, ‘No soliciting or vagrants.’”
His lips drew back in a wolfish grin. “Very amusing.”
“What do you want, Prince Alexandros?”
Atight smile eased across his mouth and it killed her that even
now, knowing he was a vicious, arrogant man, she couldn’t help
but notice what a handsome mouth it was. Chiseled. Generous.
Beautiful, like the rest of him, which made him living proof that
beauty could, indeed, be only skin deep.
“Such formality, Maria. You were hardly so proper the last
time we were together.”
She knew his choice of words was deliberate. She felt her face
heat; she couldn’t help that but she damned well didn’t have to
let him lure her into a verbal sparring match.
“I’ll ask you once more,Your Highness. What do you want?”
“Ask me in and I’ll tell you.”
“I have no intention of asking you in. Tell me why you’re here
or don’t. It’s your choice, just as it will be my choice to shut the
door in your face.”
He laughed. It infuriated her but she could hardly blame him.
He was tall—six two, six three—and though he stood with one
shoulder leaning against the door frame, hands tucked casually
into the pockets of the jacket, his pose was deceptive. He was
strong, with the leanly muscled body of a well-trained athlete.
She remembered his body with painful clarity. The feel of him
under her hands. The power of him moving over her. The taste
of him on her tongue.
34 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Suddenly, he straightened, his laughter gone. “I have not come
this distance to stand in your doorway,” he said coldly, “and I am
not going to leave until I am ready to do so. I suggest you stand
aside and stop behaving like a petulant child.”
A petulant child? Was that what he thought? This man who
had spent hours making love to her and had then accused her of—
of trading her body for profit?
Except, it had not been love, it had been sex. And the sooner
she got rid of him, the better.
She let go of the door knob and stepped aside. “You have
five minutes.”
He strolled past her, bringing cold air and the scent of the night
with him. She swung toward him, arms folded. He reached past
her, pushed the door closed, then folded his arms, too. She
wanted to open the door again but she’d be damned if she was
going to get into a who’s-in-charge-here argument with him.
She was in charge, and he would surely see a tussle over the
ground rules as a sign of weakness.
Instead, she looked past him at the big clock above her
work table.
“Ten seconds gone,” she said briskly. “You’re wasting time,
Your Highness.”
“What I have to say will take longer than five minutes.”
“Then you’ll just have to learn to economize. More than five
minutes, I’ll call the police.”
Instantly, his hand was wrapped around her wrist. He tugged
her toward him, his dark chocolate eyes almost black with anger.
“You do that.And I’ll tell every tabloid shark I can contact about
howMaria Santos tried to buy a five-hundred-thousand-dollar commission
by seducing a prince.” He smiled thinly. “They’ll lap it up.”
She blanched, but she kept her chin up and her eyes on his.
“Don’t try to scare me with lies! You can’t afford that kind
of gossip.”
“I’ve learned to endure that kind of gossip, Ms. Santos. It’s
part of my life. Besides, I’m the righteous prince who discovered
what you wanted and tossed you out on your backside.” Another
SANDRA MARTON 35
of those cold smiles twisted his lips. “They’ll eat you alive. How
do you think that will go over with the handful of reputable
clients you’ve somehow managed to snare?”
Maria yanked her hand free. “!Usted es un cochon!” she
hissed. “!Un cochon malnacido!”
“I think not. If I truly were an ill-bred pig, I would have told
you exactly what I thought of you eight weeks ago instead of just
throwing you out of my apartment.”
Color rushed to her cheeks. She hadn’t figured he understood
Spanish but, then, she’d been wrong in every judgment she’d
made about this man from the start.
“You did tell me,” she snapped, “and now it’s my pleasure to
return the favor.You’re down to four minutes before I call the cops.
Dealing with the media will beworth it, if I can just get rid of you.”
“What’s the problem, Maria? Expecting your lover to return?”
“What?”
“Your lover. What did you call him that morning? Joaquin?”
Joaquin. The idea was so ludicrous she almost laughed, but
laughter would take more energy than she could spare. Besides,
she didn’t have to explain anything.
“Joaquin is none of your business.”
“You’re right, of course.” Alex strolled across the room to the
front windowand peered out at his limo,waiting at the curb across
the street. “But I had a front-row seat for your little welcome
home this evening.You can’t blame me for being curious.”
Maria rushed to the window. A front-row seat? Impossible.
The Prince of Arrogance would surely not have stood in the cold
and the snow, watching her window…
The big car. It was his. Furious, she swung toward her unwelcome
guest.
“You were sitting out there, spying on me?”
“You might want to consider curtains,” he said with lazy
self-assurance.
“You—you…” She pointed a finger at the door. “Get out
of my home!”
Alex didn’t move. Instead, he tucked his hands in the slash
36 BILLIONAIRE PRINCE, PREGNANT MISTRESS
pockets of his jacket and gave her a long look, starting at her feet
and working slowly up to her face. She certainly wasn’t dressed
like a woman waiting for her lover to come back. Not in a pair
of baggy sweats that had seen better days. There was a hole in
one knee, what looked like a burn in the shirt just below her collarbone.
Her feet were bare, her hair a wild mass of curls.
His belly knotted.
Her hair had been like that the last time he’d seen her, a tumble
of long, glorious curls falling around her heart-shaped face. She’d
been wearing his robe; she’d been lost in it and somehowthat had
made her look even sexier, maybe because he’d known, intimately,
what was beneath that robe. The delicate, golden-hued
skin. The small, uptilted breasts. The slim curve of her waist, the
surprisingly feminine richness of her hips.
Her face had been sexy, too. Glowing eyes. Dewy skin. No
make-up, not even lipstick, though her mouth had been rosy and
softly swollen from his kisses.
She had looked—what did the French call it? Déshabillé. As
if she had just come from bed.
Which she had. His bed. His bed and his possession, and that
memory was enough to do more than make his belly knot. It sent
a bolt of pure lust straight to his loins.
He still wanted her.
It had taken the sight of her in a scruffy sweatshirt and
baggy sweatpants before he’d permitted himself to admit it.
What man wanted to acknowledge he still desired a woman
who’d tried to use him?
One who was a fool, he told himself. And then he thought,
no. Hell, no. That wasn’t it at all. Maria Santos owed him and
that was her fault, not his. She had lured him into bed. Seduced
him, though he’d thought he was the one doing the seducing.
She’d plotted everything, from that supposedly accidental
meeting on the street to the moment he’d first kissed her. The
only thing surprising about that night was that she’d been able
to keep from smirking triumphantly when he’d asked her to
come home with him.
SANDRA MARTON 37
She’d made a fool of him, and she still owed him for that.
Owed him big time, as the Americans said. And until that
debt was paid, the memory of his humiliation would continue
to haunt him.
He had no doubt what it would take to expunge that memory.
Her, in his bed again. Moving beneath him. Coming on a
long, explosive cry as he watched her with clinical detachment.
There’d be no phony little cries. No subterfuge. He would make
her want him, make her react to him.
And then he’d send her packing for the second, and last, time.
“Your five minutes are up, Prince Alexandros.”
Alex looked at her. Her expression, her body language, were
defiant. She thought she was in charge.
That made him smile.
“You find this amusing?”
“Indeed.”
Her eyes narrowed. “I’m going to count to ten. It’s your last
chance. If you’re not out the door by then—”
“Safir et Fils is on the verge of collapse.”
She blinked. “Who?”
“Safir et Fils,” he repeated impatiently. “The French firm that
was awarded the commission.” She was staring at him blankly.
“Come on, Ms. Santos,” he said silkily. “Don’t try and tell me
the name of the company that won a commission you were
willing to prostitute yourself to get has slipped your—”
Her hand flew through the air but he was quicker than she was.
He caught her wrist, dragged her forward and hauled her to her toes.
“Do not,” he said with quiet menace, “ever raise your hand
to me again!”
“Let go of me!”
“Did you hear what I said?—”
“What a bastard you are!”
Her voice shook; tears glittered in her eyes and she was
breathing hard. So what? He was unimpressed.
“Playing the righteous innocent will get you nowhere, agapi
mou. You made a fool of me once but I promise you, it will never
38 BILLIONAIRE PRINCE, PREGNANT MISTRESS
happen again. And do not call me names. I am a prince. I urge
you to remember that.”
He almost winced. He sounded like an ass but how could he
think while hot rage pumped through his blood? She was an excellent
actress; he knew that. And this was another stellar performance.
The damp eyes. The trembling voice. The patches of
crimson on her face.
Her face. Beautiful, even now.
“Did you think you could get away with what you did, Maria?
Letting me think you’d been carried away by passion when what
carried you away was the greedy hope that sleeping with me
would give you an advantage in the design competition?”
He paused. Maria stared at him.
Was he waiting for her to answer? What was the point? If she
said he was wrong, he wouldn’t believe her. He hadn’t, that
awful morning.
“Liar,” he’d said, in a voice cold as death, and then he’d hurled
words at her in Greek that she hadn’t understood, though their
meaning had been painfully clear.
Trying to make him listen now would not only be pointless,
it would be demeaning.
The truth was, she hadn’t even known who he was that night.
Aprince? The son of Queen Tia and KingAegeus?As far as she’d
known, he was just a man.A gorgeous, incredibly sexy, fascinating
stranger whose smile, whose touch had made her breathless.
When he’d kissed her and the kisses hadn’t been enough,
when he’d touched her and those touches weren’t enough, she’d
forgotten everything—that they were in a public place, that she
was a moral woman, that she had never been with a man before.
And when he’d whispered, Come with me, she had gone with
him. How could she have done anything else?
Her world had been reduced to him. To his mouth. His hands.
His hard, flagrantly aroused masculinity. She still couldn’t
believe she’d let such a thing happen. You didn’t sleep with a
stranger. She didn’t, anyway.
“What’s the matter, sweetheart? Is that busy little brain of
SANDRA MARTON 39
yours trying to come up with an answer that will satisfy me?”
His voice roughened. “Don’t waste your time. There’s only one
thing that will satisfy me, and you know what that is.”
What he meant was in his eyes.
She saw it and stumbled back. He could see the beat of her
pulse in the hollow of her throat. Good, he thought coldly. This
time, at least, he had the advantage. Command had slipped from
her hands to his and she hadn’t even heard the worst of what he’d
come to tell her.
“Get out.”
She spoke in a papery whisper that he ignored. Instead, he
turned his back and walked to her work table. Sketches were
tacked to an enormous corkboard on the wall above it.
Something that looked as if it had been molded from wax stood
on a shelf.
“Didn’t you hear me? I said—”
“Didn’t you hear me?” He swung toward her, arms folded, feet
crossed at the ankles. “Safir et Fils are going under.”
“Do you expect me to weep for them?”
“They will not be able tomake the gift formymother’s birthday.”
Her smile was pure saccharine. “Stop at Wal-Mart before
you fly home.”
“I know you find this amusing, Maria, but it’s deadly serious.
March the seventh will be an important day. My father has
declared it a national holiday.”
Again, that glittery smile. She had her composure back—but
not for long.
“There will be a ball attended by dignitaries from around
the world.”
“Yes, well if you can’t find anything you like atWal-Mart—”
“My parents have chosen you to execute the commission.”
Her jaw dropped. She was speechless. Twice in one evening.
He had the feeling it was some kind of record.
“Me?”
“You.” His mouth twisted. “You see, despite what I told you
that night, I never mentioned your little game to either the king
40 BILLIONAIRE PRINCE, PREGNANT MISTRESS
or the queen. I didn’t have to. My father had chosen the French
jewelers. He preferred their submission.”
Maria swallowed hard. She wanted to shriek with delight but
she’d be damned if she gave him that.
“How—how nice. To be second-best.”
“Please. Sarcasm doesn’t become you.” Why mention that the
queen had preferred her design all along? “We both know that
this is the chance of a lifetime for a woman like you.”
Her cheeks flushed again. “What, exactly, is that supposed to
mean?”
“Why, only that your name, your career will be made when
word gets out, Maria. What else could it possibly mean?”
She was sure that hadn’t been his meaning but why argue
about it? The fact was, he had it right. Orders would double.
They’d triple! Tiffany would give her a window display; so would
Barney’s. Vogue, Vanity Fair, Allure, Elle, Marie Claire…every
fashion magazine in the world would camp on her doorstep and
the noxious pseudo-Frenchman would be on his knees, begging
her to design for L’Orangerie.
If only the court hadn’t sent the prince to give her the news.
“They sent me,” Alex said, as if he’d read her mind, “because
they wanted to be sure you understood the full importance of this
commission.”
“You mean,” Maria countered sweetly, “because the king
thought your illustrious royal presence would impress me.” He
grinned. Her gaze on him narrowed. “Too bad your father doesn’t
know you as well as I do.”
All at once, Alex was weary of the game. Why in hell had he
ever thought he needed to settle scores? He was not a man who
enjoyed revenge; God knew there was plenty of opportunity for
it in business but he had always seen vengeance-seeking as a low
sport.And payback against awoman, even one who really needed
to be taught a lesson, suddenly held no appeal.
“What’s your answer?” he said brusquely. He pushed back his
sleeve, shot an impatient glance at his watch. “My pilot is
standing by. Weather permitting, I want to fly home tonight.”
SANDRA MARTON 41
Maria chewed on her lip. God, the man was arrogant. If
only she could tell him what he could do with his offer, but
he was right. This would jump-start her career. Nothing she
could ever do would match its importance. She had to say
‘yes’, but surely there was a way to do it so she could regain
her authority.
“Very well,” she said. “I’ll accept the commission.”
He nodded and reached into the inside breast pocket of his
leather jacket.
“Good. I have some papers here…”
“There are certain conditions to be met,” she said as she took
the documents from him.
His dark eyebrows rose. “There are, indeed. Dates of
approval. A date of completion. An agreement as to what you
may and may not discuss with the media—”
“One,” Maria said, “I work alone. If I need an assistant, that
person will be of my choosing.”
“I don’t think you understand. This agreement concerns the
demands of the—”
“Two, I’ll need some new equipment.” She smiled thinly.
“Aristo’s cost. Not mine.”
Alex’s mouth flattened. “You’re fortunate to be getting this
commission, Ms. Santos. Perhaps you’ve forgotten that.”
“Three. I do not work well with anyone watching over my
shoulder. In otherwords, I’ll be happy to showmywork, as it progresses,
to the king and queen at their request—but no one else.”
The muscle in Alex’s jaw jumped to attention. “Is that last
directed at me?”
“Four,” Maria said, raising her hand and ticking the point off
on her finger, but he had stopped listening.
Who did she think she was, this snippet of a female? He was
not of the old school; nobody had to bow to him or bend a knee
in a deep curtsy, well, except, of course, on formal occasions of
the court, but he was entitled to the respect he had been born to
as a prince, the respect he had won as a man—
“If all those conditions are agreeable, I’ll sign your document.”
42 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Alex didn’t answer. He stood watching her from dark, unreadable
eyes and felt the tension inside him growing.
He had left Aristo knowing he had to deal with Maria Santos
and keep his composure. Nothing more.
Then another thought had come to him. He would bed her
again. Right here. Tonight. It was he who would do the seducing
this time, if not with his body then with the commission she’d so
willingly sold her soul to get. He’d strip her naked, touch her
everywhere, kneel between her thighs and take her again and
again and again, until she was out of his system.
A moment ago, he’d come full circle. Told himself that plan
was crazy. It was not him. Taking a woman out of revenge was
beneath him. It was, he’d told himself, enough that she’d know
she was getting the commission only because the true winner of
the competition was out of the picture.
There’d been that instant of pleasure.
Then she’d taken that instant and crushed it.
Who did she think she was, to make demands of him? Of the
royal court? Did she think she had the right to treat him as if he
were an errand boy?
“Are you listening to me, Your Highness?”
Alex looked at her. Her eyes glittered with contempt; her very
posture confirmed it. Oh yes. She saw him as an errand boy. Not
her mark this time. The court’s errand boy.
“I take it you heard my last stipulation,” she said. “I will not
deal with you after tonight. Is that clear?”
He could feel his body humming with anger. He wanted to
haul her into his arms and shake her. Humiliate her. Conquer her.
Strip her of that ridiculous pair of sweats, bare her to his eyes,
his hands, his mouth…
He took a step forward. Something of what he felt must have
shown in his face because she paled and took a step back. That’s
right, he thought coldly. Be afraid of me, Maria. Be afraid of
what I’m going to do…
The phone rang. She grabbed it as if it were a lifeline.
“Hello?” She listened, then cleared her throat. “Yes, sí, I
SANDRA MARTON 43
know. Yes, I know that, too. I’m sorry you had to wait for my
call.” Her eyes swept to Alex; she turned her back as if that
would give her the privacy she needed. “Could we discuss this
another time?” she said in a low voice.
Alex had moved with her; his eyes, fixed on her, still held that
dangerous glitter. Didn’t he understand she needed privacy? Who
did he think she was talking to? Joaquin, probably. That almost
made her laugh. The voice whining in her ear was her mother’s.
And hearing from Luz was the last thing she needed right now.
She turned again, desperately wishing this were a cordless
phone so she could walk further away. Her mother was telling
her about her cousin Angela—snide, holier-than-thou Angela—
and her latest promotion at the insurance company. Maria had
only to ask, Luz was saying, as she did every few weeks, and
Angela would get her a job interview.
“Let me tell you my wonderful news,” she said quickly,
breaking into her mother’s endless praise for Angela. “That commission?
The one to design the birthday jewels for Queen Tia of
Aristo? Well, I’ve landed it.”
She waited, although she really didn’t know what she was
waiting for. She knew better than to think her mother would
shriek with joy and say, I’m so proud of you, mia bella, or even,
That’s wonderful news. But she didn’t really expect Luz to say,
“You?” as if such a thing were impossible.
“You lost the competition.You were not good enough to win it.”
Maria winced. “Yes. Well—well, things changed. There was
a problem with the winner and so—”
“Ah.” Her mother’s sigh spoke volumes. “Well, no matter
how you came by it, it is an opportunity. Be sure you do nothing
to ruin it.”
Maria felt like weeping, which was ridiculous. Why should
tonight be different than the past twenty-eight years?
What made it evenworsewas that Alex had not taken his eyes
from her. It was infuriating. His Royal Highness was a Royal
Boor when it came to manners. Didn’t he know enough to walk
away when someone was having a private conversation?
44 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“One of the things your cousin Angela has always done is to
make the most of her chances.”
“Yes. I know.” Maria cleared her throat. “It’s late. I’ll talk to
you tomorrow.”
Another deep sigh came over the phone. “God willing I will
be here tomorrow. And please, Maria, do not waste time telling
me the doctors saymyhealth is excellent.What do doctors know?”
There was no point in answering. That road, well-traveled
over the decades, led nowhere.
“Good night,” Maria said, “I love—”
Too late. Luz had already disconnected. Maria put down the
phone and swallowed hard. The Prince of Arrogance hadn’t
moved; he was still standing right next to her. She drew a long
breath, let it out as slowly as she could, then turned to face him.
“Wasn’t he interested in your charming declaration of affection?”
“Excuse me?”
“Your lover. Joaquin. I had the impression he ended the call
rather abruptly. Didn’t your news please him?”
“That wasn’t—” She bit her lip. Would having a lover,
however imaginary, offer her some protection? She needed protection;
every instinct told her that. “That wasn’t polite,” she said.
“Listening to my conversation.”
He smiled thinly. “And you, Ms. Santos, are the expert on etiquette,
are you not?” The smile vanished; he shoved a gold pen
at her. “Sign the contract.”
Why did that sound so ominous? “I insist you meet my conditions
before I—”
Suddenly, his hands were on her, cupping her shoulders,
lifting her to her toes.
“You’re lucky to be getting this commission,” he said coldly.
“We both know that. You’re desperate for money—please, don’t
waste my time denying it. And you need the prestige that comes
with creating a necklace for a queen.” His tone hardened. “Sign
the contract, Maria.”
SANDRA MARTON 45
Her lip trembled. She looked away from him and, for a heartbeat,
he hated himself.
Was he really reduced to this? Bullying a woman on the skids?
A woman whose lover had obviously not said a word to congratulate
her on winning this commission?
And why should he give a damn? Maria Santos was nothing
to him.
“Sign the papers,” he growled.
She picked up the pen, smoothed out the documents, laid them
on the table and scribbled her name where he indicated. He felt a
surge of heat sweep through him. But he said nothing, simply took
the papers, folded them and tucked them back in his pocket.
“As for conditions…there are others besides the ones I mentioned.
There are my conditions,” he said in a softly ominous
tone. “And you will meet them.”
His gaze dropped to her lips. She felt her pulse begin to race.
Whatever he was about to say was going to turn her world upside
down; she could sense it.
“One,” he said, still in that soft voice, “you shall have the
studio of your dreams—but on Aristo, not here.”
“Are you insane? I have no intention of—”
“I assume your passport is in order.”
“Of course, but—”
“You will leave with me, tonight.”
“You cannot do this to—”
He bent to her and kissed her. Kissed her as if she belonged
to him, his tongue in her mouth, his hands cupping her bottom,
lifting her to him, into him, into the heavy thrust of his erection.
“And,” he said thickly, when he finally raised his head, “you
will warm my bed until you finish the job.”
“No!” She shook her head as if to emphasize her refusal.
“No,” she said again, her voice high and wild, “I’ll never—”
“You will, or I’ll do what I should have done when you left
my bed the first time. I’ll tell the queen about our little adventure.
I’ll tell her you’re not worthy of designing her gift or of
working in proximity to her. And then you can stay in this loft
46 BILLIONAIRE PRINCE, PREGNANT MISTRESS
and forever live with the knowledge that you failed at the one
thing that could have changed your life.”
Maria wanted to weep but she knew damned well her tears
would have made him not just the victor but the conqueror.
Instead, she forced herself to meet his gaze without flinching.
“Is this how you get your women, Your Highness? Through
blackmail?”
His eyes flashed a warning. She tried to pull away but his
mouth swooped down to hers; his hands swept into her hair,
holding her captive to his merciless kiss until, at last, a sweet
moan whispered from her throat.
Despite her fury and her hatred, it was happening again.
The hot spiral of desire she’d felt that night all those weeks ago.
The sudden swift race of her heart. All those amazing, incredible
feelings she’d never known before were sweeping her away.
She was dizzy in his arms, dizzy from the taste of him, the
scent, the feel of his hand, now in her hair, his fingers cupping
her scalp. He gathered her even closer. The hard press of his
arousal dug into her belly.
Oh God. She wanted him, wanted him, wanted him…
Mariawound her arms aroundAlex’s neck and kissed him back.
CHAPTER FOUR
SHE was on fire.
It had been like this that night on Aristo.
Alex had kissed her, and it had been like touching a match to
tinder.
Until then, she’d always thought descriptions like that were
clichés, the stuff of novels and movies, but Alex had taken her
in his arms and taught her that a man’s touch could change everything
you knew, everything you believed, forever.
One kiss. Onewarm mingling of breath. One caress of lips and
tongues and you were transformed, became someone else.
Someone you didn’t know, didn’t understand.
Didn’t respect.
Her eyes flew open. She slammed her hands against Alex’s
broad chest. He made a sound that was almost a growl and
gathered her closer. Her struggles increased.
“Alex! Damn you, let me go.”
For a moment, herwords didn’t penetrate.Hewas lost in the taste
of Maria, the feel of her soft body against his. But her hands became
small fists, hammering at his shoulders. The message was clear.A
moment’s tease, just enough to drive him half out of his mind…
It wasn’t going to work.
He opened his eyes and let go of her.
“Pack your things.”
His voice was low and rough, his muscles taut with anger and
48 BILLIONAIRE PRINCE, PREGNANT MISTRESS
frustration. She had a way of getting to him and he didn’t like it.
It was not something he was accustomed to.
“That’s it?” Her voice shook with indignation. “You walk in
here, announce that I’m going to—to be your sex slave—”
“My mistress,” he said, mentally cursing himself. How had
she reduced him to this?
“You think that makes it better? You cannot walk in here, manhandle
me and expect—expect—”
“Is that what you call it when you turn soft and hot in a man’s
arms and all but beg him to take you?”
Her face colored. “Get out!”
“Try singing a different tune, agapimeni. The one about being
a shocked virgin is getting tiresome.”
“Is there something about ‘get out’ you don’t understand?”
“And what of the contract you just signed, Maria? Shall I take
that to court and have a judge deal with it?”
“Don’t threaten me!”
“It’s not a threat, it’s a warning. You’ve committed to creating
the queen’s birthday gift, to be completed by twenty-eight
February and subject to my approval.”
“Your approval?”
“Indeed,” he said coldly. “Perhaps you should have read the
contract more thoroughly.”
Maria wanted to laugh. Or cry. Either seemed appropriate.A
minute ago, Alex had been kissing her passionately. Now, he was
talking to her as if he were a prosecutor and she a balky witness.
Did he think he could use sex to control her? Or maybe he
thought he could bully her. Big mistake! She’d grown up on the
streets of the Bronx. What was royal arrogance compared to
Bronx attitude?
“Contracts,” she said, just as coldly, “are made to be broken.”
Alex raised an eyebrow. “Did you lift that line from some
trendy legal show?”
She flushed. Close enough. She’d taken it from an article
about how a hotshot movie star had gotten away with walking
out on a film.
SANDRA MARTON 49
“And you’re right,” he said, taking the contract from his
pocket, flipping to a page and holding it out. “Some are. This one
is not. Take a look at paragraph three.”
Why did doing as he’d suggested smack of defeat? Was it his
smug tone, or was it the instinctive knowledge that what she’d
find in that paragraph would not be good? She snatched the
contract from his hand, read the pertinent sentences…and felt a
shock of disbelief flash through every nerve in her body.
Failure of the party of the first part to complete the agreedupon
commission and/or to fulfill the additional duties required
of her in their entirety…
Her head snapped up. “What?”
“Ah,” he said, his voice a low purr, “I can see that you really
didn’t read this before you signed it.A bad decision, I’m afraid.”
“That’s insane! You cannot contract for—for a mistress…”
“Keep reading,” he said softly.
Did she have a choice? Her gaze dropped to the contract.
Such failure shall result in forfeiture of all goods and services
already provided and repayment for same.
“What goods and services?” She looked up and flashed a triumphant
smile. “You haven’t provided any.”
“Have you forgotten you’re flying to Aristo with me? Did you
think I wouldn’t provide you with a workshop and tools?” He
jerked his chin toward the contract. “There’s more.”
Finally, in the event of forfeiture, an additional penalty to be
paid by Maria Santos in the amount of…
The typed-in number had so many zeroes it made her laugh.
Alex’s eyes narrowed.
“I assure you, this is not meant for your amusement.”
No. Of course not, but what else could she do when the
penalty for walking away was easily ten times the value of everything
she owned?
“You must know I can’t afford anything even close to that!”
He shrugged. “I know only what is in the agreement you
just signed.”
He sounded as removed as if they were discussing when the
50 BILLIONAIRE PRINCE, PREGNANT MISTRESS
snow might stop. It not only killed her hysterical laughter, it
killed any hope she’d had that this was a joke.
“But—but I’d lose everything. This loft. My clients. The
people I deal with would suffer, the ones who subcontract to me.
And Joaquin, who’s been with me from the start—”
“Your lover’s welfare is not my concern.”
“Joaquin is not my lover.” Maria flung the contract at his feet.
“He works for me.”
He bent and picked it up, smoothing the pages, his expression
blank.
“It doesn’t matter one way or the other. My only concern is
this contract. Are you going to abide by it or not?
She stared at him, hating him, hating herself even more. How
could she have slept with him that night? Better still, how could
she have returned his kisses just now? Was she truly, pathetically
her mother’s daughter?
She wanted to curse him. To pummel those broad shoulders
with her fists, but what would that change? Nothing, she thought
bitterly, nothing at all.
“This is usury!”
He grinned. Such a ruggedly beautiful face, she thought
wildly, made even sexier by that quick devil’s smile.
“An impressive legal term,” he said. “But incorrect. The
penalty to which you’ve agreed has nothing to do with a loan.”
“Damn it,” she exploded, “do not play word games with me!
I know what usury means. And I know what this contract is.
Unconscionable. Immoral. Cruel and mean-spirited and—”
“And enforceable.”
“You cannot coerce a woman into—what was your phrase?
Into warming your bed!”
Suddenly, he was standing much too close. She stumbled back
but his big hands were already framing her face and lifting it to him.
“There’s not a word that even hints of coercion in that
contract,” he said softly. “You signed it of your own free will.”
“How can you do this?” she said shakily. “Don’t you have
any scruples?”
SANDRA MARTON 51
He laughed softly. “An interesting question, coming from
you.” His smile faded; his gaze dropped to her lips. “One month,
agapi mou. That’s all it will be. One month of being in my bed.
Of spending the nights with me deep inside you.” His lips
twitched, as if he’d made a joke, but his eyes were so dark they
seemed bottomless. “I can endure it, if you can.”
His words made her blush. How could he joke about the
devil’s bargain he was forcing on her?
“I hate you,” Maria snapped.
Alex grinned. “Hate me all you like, sweetheart. It’s not your
heart I’m after.”
No, she thought, no, it wasn’t. And that was fine because her
heart would never be part of this arrangement.
“Understand something, Your Highness,” she said, searching
for and finding a way to salvage one tiny bit of pride. “Being in
your bed is one thing. Participating in what happens there is not
something you can ever expect.”
His teeth flashed in a quick smile. “A challenge?”
“A statement of fact.”
“A challenge,” he said flatly. “One I am happy to accept.”
He bent his head, brushed his lips over hers. His mouth moved
against hers again and again in the lightest of kisses. She wanted
to lean into him. Wanted to close her eyes, part her lips, clasp his
head and bring it down closer to hers…
I feel nothing, she told herself.
And wished to God it were true.
What in the name of Chronos was she doing? Was she packing
everything she owned? Jeans. T-shirts. Sweaters. Sneakers and
sandals and, hell, another pair of jeans.
Alex looked at his watch, scowled and shook his wrist. Was
the damned thing working? Impossible that only five minutes had
passed since she’d first turned on her heel, marched away from
him and dragged a suitcase from a corner of the loft.
The loft. Her loft. His lip all but curled. He’d been in
Manhattan lofts before. Soaring ceilings. Enormous windows.
52 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Brick walls and polished wood floors. Furniture from
Scandinavia that made the most of all that open space.
Maria’s loft lacked only whatever machines had once been installed
here. Raw space, NewYork realtors called it, and made it
sound as if that was a good thing—which, he supposed, it was if
you intended to transform it into something habitable.
This was not habitable.
The floor was wood but the finish had long since worn away.
The walls were brick. Not warm brick, just brick. Old, dark, depressing.
The ceiling soared, all right. It soared straight up to an
intimidating tangle of pipes and electrical lines.
As for furniture…there were a couple of work tables. Some
cabinets and benches. Boxes. More boxes. And, in this end of the
room, farthest from the entry door, a screen that he assumed concealed
the bathroom, or what passed for a bathroom, and in front
of that, a bed.
Maria’s bed.
Neatly made. Simple. Almost convent-like in appearance…
A double bed.
Alex’s jaw tightened.
His own bed—his beds, considering the number of homes he
owned—his beds were always king-sized. A bachelor’s necessity,
his brothers called them. Plenty of room for a man and a
woman and hours of hot sex.
But a double bed might have advantages.
There’d be little space in which to sprawl while the lovers in
Maria’s bed took some needed rest. They would have to sleep
on their sides, spoon fashion, she with her backside tucked into
his groin, her spill of wild, sexy curls tucked beneath his chin.
He would wake during the night, feel the heat of her against him
and his sex would engorge, fill with heat, throb as he shifted his
weight, as she backed up to him, as she awoke and drowsily whispered
his name while he sought her moist entrance, while he
pistoned within her until she cried out…
Skata!
He was watching Maria pack and turning himself on.
SANDRA MARTON 53
How could she have that much power over him? He didn’t like
it, not one bit. Men were the ones who held power and if that
marked him as old-fashioned, so be it.
He had surely made the right move. Taking her to his bed as
often as he wishedwould purge her from his system.And no matter
what she said, she would not be unwilling for long. She could talk
about not wanting him all she liked but when he touched her, all
that staunch denial fled.To hell with the fact that she despised him.
He felt the same about her. What he’d told her was true enough.
Sex had nothing to do with emotion.
As for her threat not to react in his bed… A lie. A magnificent
lie. He knew a thousand ways to make her react. His mouth
at her breasts. Between her thighs. On her clitoris…
“Damn it,” he growled, and strode toward the bed on which
her suitcase stood open. “That’s enough!”
She swung toward him. “What?”
“Perhaps you have forgotten what my country is like,” he said
through his teeth. “It is not the wilderness.We have shops.”
The understatement of the year, Maria thought. Ellos had all
the shops that made Fifth Avenue paradise and dozens more.
Unfortunately, it had the prices to go with them. She wouldn’t
have the money to step through those doors until she completed
this commission. One new outfit, she’d been in debt for life.
Not that that was a possibility. The outfit she’d worn today
had pretty much melted her credit card.
“Excuse me,” she said with enough sugar in the words to
cause diabetic coma, “but I’m not done.”
“You are done,” he said grimly. “You’ve packed enough for
ten women.”
What she’d done was pack enough for one woman who had
no idea what the weather was like halfway around the world this
time of year.Yes, she could ask him, but that would be a show of
weakness. Stupid, perhaps, but that was the way she felt.
So she’d taken jeans. T-shirts. Sandals. Hiking boots.
Sweaters. She’d considered something dressy, but what for? She
would not be going out in the evenings.
54 BILLIONAIRE PRINCE, PREGNANT MISTRESS
She would be going to the prince’s bed.
She stared at him as he closed the suitcase. She hated him as
a woman; as an artist, she couldn’t help but admire him.Well, no.
Not him. NotAlexandros Karedes.What she admiredwas his long,
leanly muscled body. His wide shoulders and broad chest. Narrow
hips and long legs. The black-as-midnight hair, the dark eyes, the
face that Praxiteles might have chiseled from the finest marble.
He was even more beautiful nude.
She remembered that. The corded muscles in his arms. The
ridged abs. The powerful thrust of his penis rising from a cluster
of dark curls…
Maria swung away and went to the workshop end of the loft.
Forget that. Block it from her mind. Besides, despite all that
about the contract, he couldn’t mean to enforce such a demand.
The more she thought about it, the more assured she grew that
the sleep-with-me nonsense was just a particularly nasty way of
reminding her that she had no standing in his world.
Fine, she thought, plucking a big leather tote from a shelf and
sweeping a handful of tools into it, absolutely fine. Let him play
his stupid games. One month, that was all, a month of his
bullying tactics and then—
Unless she was wrong.
What if hewas serious? What if he really expected her to sleep
with him? Well, not ‘sleep’. She remembered that one night in
his bed. They hadn’t slept at all. He’d taken her over and over,
driven her out of her mind each time, made her do things…
No. Her breath caught.
He hadn’t ‘made’ her do anything. She’d wanted to do them,
things she’d heard of and read about but never, ever imagined
she’d want to do.
And would never do again.
Blindly, she grabbed another handful of tools and dumped
them in the tote.
What she’d told him was true. If he insisted on holding her to
their devil’s bargain, she would not participate. She would lie in
his bed but shewould not move. She’d let his hands seek out every
SANDRA MARTON 55
shadowed valley. Let him put his mouth on hers. On her breasts.
Between her thighs. She’d let him do everything he wanted but
she would not react, she would not, would not…
She gasped as Alex grabbed the tote from her, snapped the
lock, then hoisted it and her suitcase from the floor.
“We’re leaving.”
“I need the rest of those tools—or maybe you thought I work
gold and precious stones with tweezers and a crowbar?”
“Did you not hear me when I said you will have the studio of
your dreams?”
“I heard you. I still want my own things. It’s how people are,
when they’ve worked at the same job for a while. They want the
stuff they’re familiar with, whether it’s a pen or a chisel. I know
that’s difficult for you to get your head around, considering that
you’ve never had to do a day’s work in your life, so you’ll just
have to take my word for it.”
Alex narrowed his eyes. Was that really how she saw him? As
a royal dilettante? He thought back to his father’s initial reaction
when he’d first approached him about bringing new economic
life to Aristo.
“What could you possibly bring to Aristo that I have not?”
Aegeus said, with his usual imperialistic charm.
A casino, for one.A new commercial port that specialized in
handling enormous cargo ships. A colony of upscale second or
third or fourth or even fifth homes for multi-billionaires looking
for seclusion on the island’s northeast coast overlooking the Bay
of Apollonia. He had even managed to divert some of the superrich
from building in the new resort town of Jaladhar on the
island of Calista, which, together with Aristo, had made up the
Kingdom of Adamas until they’d been declared separate nations
by his grandfather, King Christos, more than three decades ago.
So, no. Oh, no. He had never worked a day in his life. He travelled
between his offices in New York and Ellos, he flew to all
the major cities of the world, met and negotiated with hardheaded
businessmen and heads of state and it was all nothing but
a wealthy man’s hobby. Or so this woman thought.
56 BILLIONAIRE PRINCE, PREGNANT MISTRESS
He glared at Maria. At the smug little smile on her lips. Part
of him wanted to grab her and shake her.
Part wanted to pull her into his arms and kiss her until she
begged for him to do more.
Thank God he wasn’t fool enough to do either. Instead, he
jerked his chin in her direction.
“Coat,” he said briskly. “And shoes. Make it quick or I’ll sling
you over my shoulder and carry you downstairs just as you are.”
He would do it, too.
Maria knew that.
So she pulled on heavy socks, a pair of bulky boots she’d
bought the winter she’d almost—almost—decided to try skiing,
stuffed her arms through the sleeves of a warm but ugly vintage
parka she’d found at the Hell’s Kitchen flea market, secured her
wild mop of hair with a scrunchy and marched to the door.
Let His Mightiness see what kind of bed-warmer he’d bought
himself, she thought grimly.
Useless. He didn’t even blink. Instead, he motioned her
toward the steps and followed her out of the building. The snow
was still coming down but the flakes were big and slow, the kind
that normally turned the city into a wonderland.
She could see nothing wonderful about it tonight.
As they stepped off the curb a uniformed driver sprang from
behind the wheel of the big limo, touched a finger to his cap and
clicked his heels.
Maria snorted.
Alex ignored her.
“Hans,” he said.
Hans clicked his heels again. Alex thought about telling him
to stop doing that but he’d already told him the same thing at least
a dozen times. Apparently, Hans was one of those people who
dreamed of the grandeur that was royalty.
Maria, clearly, was not.
Hans reached for the bags. “I’ll put them in the trunk,” Alex
said sharply. “You see to Ms. Santos.”
Another click. Maria rolled her eyes. Hans swept open the rear
SANDRA MARTON 57
passenger door, gave her a little bow as she stepped inside the
car. The door shut with the sort of solid ‘thunk’ she figured you
expected when a car cost as much as a house. A swirl of warm
air, perfumed with the scent of expensive leather, swallowed her
up as she fell back into the soft seat.
The only thing that spoiled it was Alex, who opened the other
rear door and got in beside her.
“The airport,” he said.
The car moved gracefully from the curb. Maria’s gut moved,
too, but not gracefully. What in the world was she doing? She
had to phone Joaquin to say she was leaving, and she certainly
had to say goodbye to her mother.
“Wait!”
The car stopped. Alex turned toward her. “Whatever you
forgot,” he said coldly, “can stay right where it is.”
“No. I mean, it can’t. I mean…” She took a deep breath. “I
can’t go with you.”
Alex folded his arms. “We’ve been through all this.”
“I can’t just leave. I mean…I have to let people know. I have
to say goodbye.”
“People,” he said coldly. “You mean, your ‘friend’, Joaquin.”
She thought of correcting him, but what for? He could believe
what he liked.
“And will you tell him the intimate details of our arrangement,
glyka mou?” he said with a sly smile.
Her head came up. “I will never tell anyone about that.”
He stared at her for a long minute. For some insane reason,
he wanted to take her in his arms and tell her he would not hurt
her, that he would do all he could to bring her pleasure…
To hell with that.
“What’s his address?”
“Why?”
“Hans is an excellent driver,” Alex said with a tight smile,
“but he has one flaw. He can’t find a place unless I give him
its address.”
“Oh,” she said quickly, “no, that isn’t necessary. Just—Driver?
58 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Driver, there’s a subway stop two blocks up. If you’d drop me
off there—and then I can, ah, I can meet you somewhere later…”
“The address,” Alex said quietly, but in a tone so filled with
authority that Maria knew she’d lost.
She sank back in her seat.
“One seven four oh Grandview Avenue,” she said in a small
voice. “That’s in the Bronx.”
“The Bronx?” the driver said.
“The Bronx,” Alex repeated firmly, and the big car started up
again.
Alex watched Maria’s face as the limo made its way along the
snow-laden streets.
She sat huddled in the corner, as far from him as she could
get, staring straight ahead, her face pale in the glaring headlights
of the few cars coming toward them. The snow had all but
emptied the city streets.
She was trembling.
He frowned. Was she cold? Impossible. The sole virtue of that
ugly jacket had to be its warmth. Besides, the car’s interior was
warm.
Shewas nervous, then. Or anxious.About agreeing to go with
him? Not that she’d actually agreed. He’d forced her into it.
Never mind.
Was she nervous about telling her lover she was going away
with another man? Alex’s jaw tightened.A week from now, hell,
a couple of hours from now, her loverwould be history. Once they
boarded his private plane, he’d take her to the big bedroom in the
rear of the cabin, strip her out of that foolish outfit and touch her
in ways that would make her forget any man but him.
That was how it had been that night.
Maria, blind with passion. Her skin, silken to the touch. Her
mouth drinking from his, her fingers cool against his body, her
hands trembling when he clasped them, brought them to his
chest, his belly, his erection.
Touch me this way, he’d murmured. Yes. Like that. Like that.
SANDRA MARTON 59
She’s never done this before, he’d thought in amazement.
And then he’d simply stopped thinking, lost in the heat that
consumed them.
What a lie!
She’d done everything before. He’d known it as soon as he
heard her on the telephone that morning. Until then, she’d had
him fooled. And that wasn’t easy. He’d been with a lot of women.
Too many, he sometimes thought; their faces and names and
bodies had become blurred over the years.
Not hers.
Maria’s name, her heart-shaped face and its delicate features,
her body that was softly curved and not a fashionable arrangement
of hard bones and flesh, even her voice…
He had forgotten nothing. She came to him in his dreams,
telling him she wanted him.
Turning yourself on again, you idiot? he thought angrily as
he shifted in the deep leather seat.
Well, there’d be no more of that.
He knew what this was all about, if he was honest. Ego?
Maybe a little. Anger? Okay, that, too. Payback? Absolutely.
But the real reason he wanted her was much more basic.
The hair of the dog that bit you. Driving out demons.
Whatever you wanted to call it. Have enough sex with Maria
Santos and he’d wipe her name, her face, everything about her
from his mind.
A month from now, he’d be happy to see the last of her.
Whether she was clever in bed or not, he’d never come across a
woman who could hold his interest for much longer than that.
This one would be no exception, not even if she went from waif
to temptress, fire to ice…
“It’s the building right over there.”
Her voice was low. Alex blinked and realized the car had
slowed to a crawl. He looked out the window and saw a nondescript
street, cars packed tightly along the curb, and a looming
wall of apartment buildings.
“This one, miss?” Hans asked.
60 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Sí.Yes.”
It was the first time she’d lapsed into Spanish since the phone
call—and since she’d cursed him. She sounded breathless.
Stressed. His jaw tightened. Was she nervous about visiting her
lover and telling him her plans?
If he’d been her lover, she’d have had the right to be terrified.
He could not imagine agreeing to her going off with another man
for a month. Not for a day. Not if she belonged to him.
The limo eased into the space beside a fire hydrant. The driver
turned off the engine and reached for the door handle.
“Thank you,” Maria said quickly, “but that isn’t necessary. I
can open the door my—”
“Stay in the car, Hans.” Alex’s voice was cold. “I’ll take care
of Ms. Santos.”
A blast of frigid air swept in as he opened the door. Maria’s
heart skipped a beat. Did the Prince of Arrogance think he was
going inside with her? Not in a million years.
“Thank you,” she said, forcing a polite smile, “but I can manage.”
“Don’t be silly, glyka mou. It’s late, the street is nearly
deserted. What kind of gentleman would permit a woman to be
alone under such conditions?”
His tone had gone from harsh to silken. A spider’s web was
silken, too. She didn’t want him with her, not only because then
he would know she hadn’t come to see Joaquin but because he
would know too much.
“Maria. I’m waiting.”
Hewas leaning into the car, his patrician face rigid.Anger swept
through her. Did he think he could take over every aspect of her life?
“Keepwaiting, then. I don’t require your assistance.And let me
assure you,Your Highness, if you think you are a gentleman—”
She gasped as he caught her shoulders and pulled her from
the car.
“You will not talk to me that way,” he growled. “I don’t give
a damn what you do or do not require. What matters is what I
require. For the next month, you’ll do things my way or not at
all. Is that clear?”
SANDRA MARTON 61
“Yessir,” she said, and touched her stiff fingers to her
forehead. “Of course, sir,” she added, and clicked her heels. Then
she jerked her chin up, stepped around him and marched over
the snowy sidewalk to the building’s entry.
Alex could feel his face burning.
He shot a furious glare at Hans, sitting straight as a ramrod
behind the wheel. He gave no sign that he’d seen or heard what
had just happened.
Alex took a deep breath. Then he trudged after Maria through
the snow. Her feet, in those hideous boots, moved up and down
without interference but he was wearing leather mocs—
handmade leather mocs, he thought grimly, and they were
already cold and sodden.
Great. He was about to come face to face with the man who’d
been her lover and his damned shoes would probably fall off his
feet when he…
Panagia mou!
What kind of place was this for a love nest? The entrance door
had a broken lock. The lobby smelled of mice and mildew. What
remained of a mural clung pathetically to a graffiti-scarred wall.
Therewas an elevator but Maria ignored it and headed for the stairs.
“Four flights,” she said briskly, without looking back at him.
“Are you up to that, Your Highness?”
He didn’t bother replying, he simply climbed the steps
behind her. One flight. Two. Three. At last, they reached the
fifth-floor landing.
“This is where he lives?”
Alex sounded incredulous. She hated him for that, and for
forcing himself into this part of her life.
“Answer me!” He clasped her wrist and spun her toward him.
“Your lover expects you to come to him in a dump like this?”
The door to the apartment directly ahead swung open. Alex
looked up, angry at himself, at Maria, at the unwanted intrusion.
“What the hell do you want?” he snarled at the shadowy
figure in the doorway.
The figure stepped forward into the dim light of the stairwell
62 BILLIONAIRE PRINCE, PREGNANT MISTRESS
landing. It was a woman. Small. Dark-haired. Wrapped in a
wool bathrobe.
“Maria?”
Maria took a deep breath. “Sí, Mama. It’s me.”
CHAPTER FIVE
IT’S ME, Mama, Maria said.
And then no one said anything.
For an eternity? For a few seconds? Alex couldn’t be sure.
The only certainty was that he’d made one hell of a mistaken
assumption.
And he’d mortified Maria. The proof was in the rigidity of her
posture, the angle of her head. This place, this depressing setting,
this woman making absolutely no move toward her daughter,
were not things she’d wanted him to see.
So what? he asked himself coldly. Wasn’t it his intention to
humiliate Maria Santos? This was just one more way to do it.
But even as he thought that he found himself moving closer
to her, putting his hand lightly on her shoulder in a gesture of
unspoken support.
The woman in the doorway spoke first. Her words were not
those of a loving mother, delighted to see her child. They were,
instead, accusatory.
“Do you have any idea how late it is, Maria? I was on my
way to bed.”
He saw the color rise in Maria’s face. His hand tightened on
her shoulder.
“I’m sorry, Mama. I should have phoned first—”
“And who is this with you? Why have you brought a man
to my home?”
64 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Forgive me, Mrs. Santos,”Alex said pleasantly. He gave Maria
what he hopedwas a reassuring smile, then stepped forward. “It’s
my fault, entirely. I’m afraid I was in such a hurry to get things
done that the lateness of the hour never occurred to me.”
“And you are…?”
“I am Alexandros Karedes. Prince Alexandros Karedes.”
The Santos woman’s eyebrows rose.
“Prince?”
“From the kingdom of Aristo. Perhaps you’ve heard of it,” he
said politely, knowing she would have. You could not read a
magazine or see a television program about the rich and famous
without hearing of places like Dubai, Monaco and Aristo.
“And you know my daughter?”
“Indeed. In fact, Maria and I are going to be spending the next
few weeks together.”
Maria gave him a look that should have turned him to stone.
“The prince means we’ll be working together.”
“Maria is making my mother’s birthday gift.”
Luz raised her dark eyebrows. “Maria? Is this what you meant
when I called you a little while ago?”
Alex looked at Maria. She glared even as color rose in her
cheeks. It had been her mother on the phone, not her lover. Why
did that please him? Whether she had a lover or not didn’t matter.
She would be his for the next four weeks. Who gave a damn if
she came home to Joaquin when the month ended?
“Sí, Mama, it was.”
He could almost see Luz mulling that over. Finally, she
stepped aside and motioned them forward. “Come inside. I don’t
want to bother the neighbors.”
Maria looked like a wild animal who wanted to escape a
trap, but she jerked her head in assent and moved past him into
the apartment.
The entry foyer was big; it led down two steps into a living
room that must have been elegant in its day but now was dimly lit
and depressing. Luz made no offer of coffee or tea; she took a chair
and when Maria hovered uncertainly,Alex took her elbow. He felt
SANDRA MARTON 65
her stiffen, knew she wanted to jerk free but she let him draw her
down beside him on a small, sagging, blanket-covered sofa.
“You see,” Alex said pleasantly, “my mother—”
“She is the queen?”
“Queen Tia. Yes. Her sixtieth birthday is next month, and—”
He launched into an explanation of the planned celebration.
The state dinner in the palace. The ball that would follow. The
presentation of Maria’s necklace to the queen at precisely midnight,
followed by fireworks. The fact that Mariawas accompanying him
to Aristo so she could consult personally with the queen and with
him, should questions arise about the design of the piece.
“You mean, my daughter will leave New York?”
“Yes,” Alex said politely, “but I can assure you—”
“Well, if it doesn’t worry her to leave me all alone, who am
I to complain? I am not well, Your Highness. Perhaps Maria has
mentioned it.”
“You’re fine, Mama. Your doctors say—”
“What do doctors know?” Luz crossed herself. “We can only
pray for the best. Besides, I suppose you’re determined to live
out this fantasy of yours.”
Alex could see a vein throb in Maria’s temple.
“Could we please have this discussion another time?” she
said, but Luz ignored her.
“Do you have children, Prince Alexandros?”
“I’m not married, Mrs. Santos,” Alex said politely, though
being polite was growing difficult.
“Well, when you do, you’ll understand that a mother’s sole
concern is for her child’s welfare. Maria’s cousin, Angela—”
“I’m sure the prince isn’t interested in Angela.”
“Angela is a wonderful girl. She has an excellent position with
an insurance company. She’s offered many, many times to
arrange for Maria to have an interview there. Why, only this
evening, I told Maria of Angela’s promotion. She’ll be earning
thirty thousand dollars a year!” Luz leaned toward her daughter.
“And I didn’t get the chance to tell you the rest. Angela’s
engaged. To her supervisor, can you imagine? She has done so
well for herself. It’s hard to believe you and she graduated high
school at the same time.”
The sofa was small. Maria’s thigh was against his. Alex
could feel her trembling.With anger?With despair? Not that it
mattered to him…
“We had different goals,” Maria said carefully. “Angela went
straight to work. I went to college.”
“And quit.”
“I didn’t quit, I changed schools. I went to the Fashion
Institute of Technology.” A touch of pride edged her words. “It
was not easy to get in.”
Luz made a face. “Such foolishness! Two years spent studying
what? Drawing? Making geegaws? And meanwhile, your cousin,
Angela, was—”
The hell with this, Alex thought, and he clasped Maria’s hand.
She tried to tug it away but he threaded his fingers through hers.
“Maria,” he said smoothly, “I think it’s time we told your
mother the truth.”
Her eyes went dark and wild. “Alex. Alex, please—”
“I admire your modesty, glyka mou,” he said softly, “but surely
your mother should know the details—of this commission.”
Maria let out a breath. Luz shrugged her shoulders.
“I know them already, Prince Alexandros. My daughter
entered a contest and lost. She’s won it now because the real
winner backed out.”
“You make it sound as if Maria entered a sweepstakes,
Mrs. Santos,” Alex said with a smile that barely softened the
tightly spoken words. “In fact, fifty of the world’s most
prestigious jewelry designers submitted sketches for my
father’s perusal. He and his ministers narrowed the field to
three but the final selection was the king’s.” He paused. “He
chose an excellent entry—but from the start, Maria’s design
was the queen’s choice.”
Maria’s eyes lit. “Was it?” she said softly.
Alex nodded. What was the harm in telling her the truth?
“The necklace your daughter creates will be photographed by
66 BILLIONAIRE PRINCE, PREGNANT MISTRESS
every major magazine. It will be featured on television news on
virtually every continent. And when the queen’s birthday celebration
ends, it will be displayed alongside the Crowns of Aristo
and Adamas, two of the most famous royal crowns in the world.”
Luz seemed to take it all in. Then she nodded and looked at
Maria.
“This is a fine opportunity, mia hija.”
“Sí, Mama. I know it is.”
“You must not squander it. Such good fortune may not come
your way again.”
Alex glanced at Maria. She had a stiff smile pinned to her lips.
He couldn’t blame her. Not that her feelings meant anything to
him, but couldn’t her mother work up a little enthusiasm? His
own mother had always been loving. Not the way mothers were
loving in the books he’d read when he was growing up, or even
in the ways he’d observed when he spent an occasional holiday
weekend with a friend from boarding school.
Tia had not tousled his hair or kissed his scraped knees; she
had not tucked him in at night or sat with him at breakfast in the
morning. He’d longed for those things as a kid but he’d understood.
She was the queen. His father was the king. His parents
had grave responsibilities; from his earliest years on, he’d been
groomed to respect that.
But Tia had applauded his every academic achievement and
sports trophy. Even Aegeus, who had always treated his children,
especially his sons, with cool removal, would have offered a
word of praise at news as important as this.
“This was more than good fortune,” he said coolly. Maria
looked at him in surprise. Hell, he’d surprised himself. “Your
daughter’s talent is the reason she won the commission.”
Maria’s counterfeit smile had given way to one that was soft
and sweet. He wanted to cup her face with his hand, taste that
sweetness, kiss her not as he had before but gently, tenderly…
A muscle knotted in his jaw.
“It’s time we left,” he said brusquely, and rose to his feet.
* * *
SANDRA MARTON 67
It had stopped snowing; the street was clear and a plow truck disappearing
just ahead, red lights blinking, was the reason.
Hans popped from the driver’s seat of the big limo and swept
the rear door open. Maria stepped in; Alex followed her.
“Where to, sir?”
What was that sound? Was Maria—was she crying?
“Sir? To the airport?”
Alex forced his attention to his driver, then dug his BlackBerry
from his pocket. There was one text message. It was from his
pilot and it was brief and to the point.
“Runways are open. Flight plan has been filed.”
“The airport,” he said briskly, and settled back in the seat.
The big car moved swiftly through the streets. Maria said
nothing; her face was turned to the window. If she’d been
weeping, she seemed to have stopped.
Alex cleared his throat.
“I forgot to leave my phone number for your mother. I’ll have
my secretary call her with it first thing tomorrow. Is there anyone
else you wish to notify?”
She shook her head.
“Not even—” He paused. Don’t, he told himself, but the need
to say it was the same as the need to touch an aching tooth, even
though you knewitwas a mistake. “Not even your friend, Joaquin?”
She swung toward him. “He is my friend,” she said fiercely,
“despite what you think. And I have my own cell phone, thank
you very much. I don’t need you or your secretary to do it for me.”
“You needn’t bite my head off. I just—I just wondered if,
perhaps—”
“Look, you did one decent thing tonight, Your Highness.
You—you tried to defend me to my mother. I suppose I owe you
my thanks for that. Just don’t—don’t spoil it.”
“I didn’t defend you. I spoke the truth. My mother loved your
design.” He hesitated. “Frankly, I agreed with her that it was the
best. Why should that be a secret?”
She lifted her chin and looked directly at him. They had just
pulled up to a traffic light. The red glow lit her lovely face with
68 BILLIONAIRE PRINCE, PREGNANT MISTRESS
color and yes, she had been crying. The delicate skin under her
eyes was swollen.
“If it isn’t a secret, why didn’t you tell me right away?”
Alex felt a quick stab of guilt, but why should he? Maria had
not been honest with him, and her lie of omission had been far
greater than his.
“I told you what you needed to know,” he said coldly. “There
was no reason to tell you anything more.”
She gave a little laugh. “Such diplomatic words, Alexandros.
Why, if I didn’t know better, I’d think you were a—” Her face
turned white.
“Maria?”
“Tell the driver to pull over.”
“What is it?”
“I’m going to be—”
Alex lowered the privacy screen and jerked his thumb toward
the curb. Hans steered to it and pulled up,Alex threwhis door open
and Maria shot past him. He was right on her heels; he caught her
by the shoulders as she bent over and was viciously ill.
“Go away,” she gasped. “I don’t want you to—”
Another spasm shook her. He could feel the violence of it and
his hands clasped her more tightly. When she was done, she
stood straight, her back still to him, her body racked with tremors.
“Maria,” he said softly. “Are you okay?”
She nodded. “I’m fine.”
She wasn’t. Her voice was thready and the trembling had increased.
Alex cursed and turned her toward him. She stood with
her head down.
“What happened?”
“I don’t know. Flu, I think. Everyone has it.”
God, she looked so fragile. Not silly, lost in that enormous and
ugly jacket, but terribly, heartbreakingly delicate.
He dug a handkerchief from his pocket and held it toward her.
She shook her head.
“Not your handkerchief. I’ll soil it.”
“Damn it, Maria,” he said, and put his hand under her chin,
SANDRA MARTON 69
lifted her face and dabbed her lips carefully with the snowywhite
linen.
She was still shaking.
Alex lifted her in his arms. “No,” she said, but he ignored her,
ducked his head, carried her inside the car, settled her close
against him and pressed the intercom button.
Hans answered immediately. “Sir?”
“Turn up the heat,” Alex said crisply. “And take us to the
nearest hospital.
“No,” Maria said, even more emphatically. “I don’t want to
go to a hospital.”
“You need a doctor.”
“For heaven’s sake, I was sick. Sick, that’s all. Flu. Or maybe
something I ate.”
“You look like you don’t eat enough,” Alex said, more sharply
than he’d intended but it was true. Holding her in his arms, he’d
realized she was as light as the proverbial feather.
“I am fine. I don’t need to be coddled.”
Yes, he thought, she did—but he knew that edge in her voice
by now, just as he knew the proud angle of her head.
“Okay. Great. No coddling. Hans?”
“Sir?”
“The airport.”
The intercom light blinked off. Maria stared straight ahead,
wrapped in mortification. Of all things to happen.To get sick in front
of this man. To have him insist on staying with her. To have him
wipe her face and now to be sitting within the circle of his arm…
“I am perfectly capable of sitting on my own,” she said coolly.
He let her move away. From the corner of her eye, she could
see him opening a mahogany compartment built into the side of
the car. Taking something from it. A bottle of water. A big white
linen napkin.
“Look at me,” he said as he poured the water on the napkin.
She looked. Their eyes met. What was in his? Pity? Damn it,
she didn’t want his pity. She didn’t want anything from him.
70 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Carefully, he began to wash her face. She jerked back. He
sighed, cupped the back of her head and went right on washing.
It felt wonderful.
When he was done, she gave him a jerky nod. “Thank you,”
she said stiffly and turned away but, once again, she could see
what he was doing from the corner of her eye. Putting the water
and napkin back in the compartment. Taking out another bottle,
this one filled with an amber liquid. Taking out a crystal tumbler.
Opening the bottle, pouring the liquid into the glass…
“Drink this.”
She swung toward him. Bad idea. Everything began to spin.
The interior of the car, Alex’s face. The glass he was holding
toward her.
“Damn it,” he said, reaching for her, “you’re as white as a sheet.”
“I’m—I’m okay. I’m not going to be sick again. I’m just a
little woozy…”
Alex’s arms swept around her. “Don’t,” she said, but she was
speaking into the hardwall of his chest as he lifted her into his lap.
He was warm. Strong. He smelled of snow and cold and of
the clean male scent she remembered, had never forgotten.
“Let go of me,” she said, and hated how her voice shook but
the truth was, she felt awful. Not sick to her stomach anymore,
just cold and shaky and awful.
“Stop arguing with everything I say and drink this.”
His tone was gruff but he held her with care. Well, of course.
He certainly didn’t want to risk having her throw up all over his
magnificent automobile.
The glass was at her mouth.
“What is it?”
“Poison,” he said, but when she looked up at him, he was
smiling. “It’s brandy.”
“I don’t—”
“Yes. I know. You don’t need brandy. Well, I do.” He took a
drink from the glass, then brought it to her lips again. “For once,
just do as I ask without giving me a tough time, okay?”
The brandy smelled wonderful. She thought of how it would
SANDRA MARTON 71
feel, warm and soothing, and of how his mouth had touched the
rim of the glass…
It was safer to think about doing as he’d commanded.
She did, and knew she’d been right. The brandy was warm
and comforting. So was the man who held her. The thought,
unbidden, unexpected, set her heart racing and she pushed the
glass away.
“That’s enough.And you can let go of me. I’m perfectly fine.”
He answered by gathering her closer. “It’s late,” he said brusquely.
“And I’ve had a long day. I think you have, too. So stop
fighting me, Maria. You’re cold and shaky and I’m not at all convinced
you don’t need a doctor.”
“I already said I didn’t.”
“Then do as you’re told. Finish the brandy, put your head
against my shoulder and maybe, just maybe, I’ll believe you.”
“You’re a—a martinet,” she said bitterly. “Did anyone ever
tell you that?”
It was such an old-fashioned word that it made him laugh.
“I’ve been called a lot of things by a lot of women, glyka mou,
but that is a first.” He sank back in the seat; she had no choice
but to sink back with him. “Now close your eyes and rest. We’ll
be at the airport soon.”
Rest? She’d won a competition that had been the goal of the
world’s best jewelry designers—and handed her life over to one
of theworld’s most gorgeous, sexiest men. Howcould she possibly
rest? Surely, the man holding her had his choice of women, a different
one every night if he wished, and yet he wanted her…
Her lashes drooped.
She couldn’t rest. Or sleep. Or…
Maria sighed, burrowed closer against him, and tumbled
into sleep.
Alex felt the tension leave her. He looked down, saw the dark
shadow of her lashes against the sculpted curve of her cheek.
The woman was impossible. Argumentative. Prickly.
Sharp-tongued.
72 BILLIONAIRE PRINCE, PREGNANT MISTRESS
She was also beautiful and fragile and…
And, he reminded himself, she was a manipulative liar. The
sooner he had her in his bed, the better. She would not spin lies
to him there; he would not permit it. He would make love to her
until she sobbed his name, until her need for him was real, and
that would happen as soon as he had her, alone, on his plane.
But when they reached it, he carried a still-sleeping Maria
through the big cabin, to the privacy of his bedroom. Sat her on
the edge of the bed. Took off her jacket and her boots. Took off
his jacket and soggy shoes, as well.
Her eyelids fluttered but did not lift. “Alexandros?” she
murmured.
She had called him that the night they’d made love. That was
the only name he’d given her, just ‘Alexandros’. “Alex, if you
prefer,” he’d added, but not the rest.
Not that she’d needed it, he thought grimly. She had known
his identity; she had targeted him.
“Wake up,” he said coldly as he lay her back against the
pillows. She didn’t. He looked at her again. Even in sleep, she
looked exhausted. And incredibly lovely.
He lay downnext to her. Drewthe cashmere throwfrom the foot
of the bed over them both. Maria sighed in her sleep and turned
toward him.What else could he do except gather her into his arms?
SANDRA MARTON 73
CHAPTER SIX
MARIA awoke in total confusion.
Her heart thumped with terror. Where was she?
Everything about this room was wrong. The bed. The faint
light stealing in through the window. Even the feel of the silk
bed linen under her cheek, the whisper-weight of the blanket…
The pillow beside hers. Indented, as if someone’s head had
rested on it. A faint scent. Clean. Crisp. Male.
“Ohmygod,” she whispered, and shot up against the pillows.
A bad move. Her stomach did a slow roll. She bolted from the
bed, looked around wildly, saw the bathroom and barely got
there in time.
She retched until the muscles of her diaphragm ached.
Shaken and shaking, she closed her eyes and sank down on the
cold tile floor.
Easy, she told herself, just take it easy.
Seconds later, she stood, washed her face, unscrewed the top
from a small bottle of mouthwash and rinsed her mouth until the
bottle was empty.
Boneless, on legs that seemed to be made of over-cooked
pasta, she sank down on the closed commode.
She remembered it all. Alex’s arrival. The royal commission.
The awful visit to Luz, the humiliation of being sick afterward…
Most of all, the unbelievable proposition Alex had made—and
she had accepted.
SANDRA MARTON 75
Was this a hotel room?As if in answer, the floor seemed to give
a gentle dip. Not a hotel room. Thiswas his plane. They were somewhere
over the ocean and she couldn’t even remember getting on
board. Her memory took her as far as being sick in the snow. Alex
cradling her in his arms. The warming swallows of brandy.
Maria groaned and buried her face in her hands.
Had she slept with him? No. Heat flooded her body. Definitely,
no. If Alex had made love to her— Correction. If they’d had sex,
she’d remember. Besides, except for her jacket and boots, shewas
still dressed in the ratty outfit she’d worn last night.
Somehow, the thought that she’d slept between silk sheets and
beneath what was probably a cashmere blanket dressed like this
made her want to laugh.
God, she was coming apart! Aches where she’d never had
aches. Laughter that could just as easily turn to tears. Nausea
when she least expected it. Joaquin was right. She’d been
working too hard. Stress could do terrible things.
She rose to her feet. There was a stall shower. A big terrycloth
robe hanging from a hook. Shampoo and soap and—
And Alex, just outside the bedroom door.
How was she going to face him? What was she going to say?
Could she ask him if he’d slept with her? Well, not with her. In
the same bed. Not that it mattered. He had the right. Hadn’t she
agreed to share his bed, and not just for sleep?
It was a miracle he hadn’t held her to that unspoken agreement
already, but then a woman who tossed her cookies at a
man’s feet wasn’t exactly a turn-on. Not that she wanted to turn
him on. Not that she wanted him to undress her, touch her, carry
her to his bed and do more, much more than sleep next to her…
Someone knocked at the door. The knob rattled. Maria swung
around and stared as if it were a live thing about to launch an attack.
“Ms. Santos?” A woman’s voice. “Ms. Santos?”
She took a deep breath. “Yes?”
The door opened. A pleasant-faced woman of about fifty
smiled at her.
“Good morning, Ms. Santos. I’m Thalia. The stewardess. The
prince asked me to tell you we’ll be landing in a couple of hours.
He asks that you join him for breakfast.”
Maria felt her face heat. “Thank you.”
“I’ve left your bag at the foot of the bed.”
Could her cheeks get any hotter? “Fine. Thank you again.”
Thalia smiled, stepped out of the room and shut the door
behind her. Maria flew to it and turned the lock.
How could she face anyone? She’d all but died of humiliation
just now and there were other people to deal with. The pilot.
A co-pilot. Half the kingdom of Aristo, for all she knew. So
what? the logical part of her said. Common sense assured her
that Prince Alexandros had a long tradition of having women
travel with him and share his bed.
The knowledge would come as no shock to anyone.
Yes, but it came as a shock to her. She had never been a
mistress before.
The fact was, she had never been with a man before that
night two months ago. Not that His Royal Arrogance would
believe it if she told him. Not that she would tell him. Her humiliation
was already devastating enough. Why make it worse?
Far better to let him think that she was as experienced as he obviously
believed.
Why hadn’t she thought of that sooner?
Maria stripped off her clothes and stepped into the shower.
Alex had called her a liar. She wasn’t, but she could carry
things off when she had to. Hadn’t she prepped for the interview
at FIT without letting her mother know? And then there’d
been the interview itself, when she’d sat in a waiting room like
an ugly duckling lost in a bevy of swans. And years later, after
she’d won the Caligari prize and approached a buyer at a posh
Fifth Avenue store with a small box filled with earrings of her
own design…
Oh yes, she thought as she tilted her face up to the spray, yes,
she could do this. Pretend that being his sex toy for a month
meant nothing. Not a problem.
Not at all.
* * *
76 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Where in blazes was Maria?
Alex had awakened hours ago.Awakened? His mouth twisted.
Hehad not really slept.Howcould amansleep with awoman curled
against him, her breath warm and light against his throat, her hand
on his chest? Maria had curved her body into his as if she’d belonged
there. He’d told himself it didn’t affect him and it hadn’t…
For about thirty seconds.
Then, he’d gone into a full state of arousal.
He’d imagined rolling her onto her back. Undressing her.
Caressing her. Imagined her waking slowly as she felt his hands
and mouth moving gently on her flesh.
“Alexandros?” she’d have whispered, as she had that night
they’d spent together, as she had just a little while ago, when he’d
put her to bed, and he’d have said, Yes, it’s Alexandros. Say my
name again, Maria. Touch me with your cool hands. Open your
mouth so I can taste your sweetness…
That was when he’d shot from the bed.
A cold shower. A change of clothes. Then he’d left the room
without a backward glance because he hadn’t trusted himself.
He’d waited weeks for this. He wasn’t going to take her now,
when she was exhausted and sick and only half aware of him.
He wanted her wide awake when he possessed her, wanted
her eyes on his as he took what she had only pretended to give
him that first time.
His flight crew, of course, had asked no questions, nor had Thalia
when he’d told her to inform his guest that they’d be landing soon.
“Is Ms. Santos awake?” he’d asked brusquely, when Thalia
brought him coffee.
“Yessir. I gave her your message.”
Alex looked at his watch. Fifteen minutes had gone by. What
was taking her so long? Did she think she could stay locked in
the bedroom? That she could put off what would happen next?
The hell she could.
They’d land soon, his car would be waiting. He would drive
to his apartment in Ellos and take her to his bed.
He looked at his watch again. He was weary of playing her
SANDRA MARTON 77
games. He put down his coffee cup. Blotted his lips with a linen
napkin. There was still time to assert his possession now…
The door at the rear of the cabin opened. Maria stood framed
within it; her eyes met his. He saw her take a breath and then she
started toward him. The ugly sweats and boots had been replaced
by a pale gray long-sleeved sweater that fell to her hips, black
tights and pale gray ankle boots. Her hair, still damp, tumbled
around her shoulders.
His gut tightened. By God, shewas beautiful.And composed.
He had not expected that. The fact was, he wasn’t sure what
he’d expected. Tears, maybe. Pleas that he send her home. He’d
judged wrong. The look on her facewas a study in self-assurance.
“Good morning,” he said, and rose to his feet. He gestured to
the chair opposite his. She took it, plucked the napkin from under
the heavy silverware and spread it in her lap. “How do you feel?”
“I’m fine. I’m sorry about last night—”
“That you slept curled in my arms?”
“That I got sick,” she said quickly, but the tiniest bit of color
crept into her face.
So. Perhaps she wasn’t as self-confident as she appeared.
“I’m just happy a night’s sleep helped. I tried not to disturb
you when I left the bed,” he said, pouring coffee for her. He
glanced at her, to see what effect his deliberate use of the word
‘bed’ had made. None. None at all. Her expression was impersonal
again. “You were curled so tightly in my arms that I had
to disentangle us.”
There it was again. That little rush of color. She shot him a
look, then buried it in a sip of coffee. She swallowed, looked up.
The tip of her tongue peeped out; she swiped it over her lips. To
his annoyance, he felt his body stir.
“I was sure I’d wake you when I took my arm out from around
your shoulders.”
She looked straight at him. “I thought your stewardess said
we’d be landing soon.”
“A change of subject, agapimeni?” His tone was pure silk.
78 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Did you want to discuss something other than the fact that you
slept with me last night?”
“We shared the same bed,” she said, looking him straight in the
eye. “I’m sure you know the difference between that and what
people mean when they say they slept together.” Her lips compressed.
“Besides, I didn’t know I rated a change of subject. I
thought mistresses were expected to comply with the wishes of
their masters. That is what I will be, isn’t it?Your mistress? I mean,
isn’t that what one calls a woman who warms a man’s bed?”
Damn it! He was the one who could feel his face filling with
heat. What a hell of a little speech, and had she deliberately
waited until Thalia was in earshot? His stewardess had been
with him for years; if asked, he’d have said nothing could rattle
her but hadn’t her eyebrows just taken a surprised lift?
Alex tossed his napkin on the table and got to his feet.Two could
play at this game of control—but only one would be the winner.
“We’ll be on the ground soon,” he said coldly. “And then
there’ll be plenty of time for me to make my wishes clear—and
for you to make absolutely certain you comply with them.”
The last time Maria had come to Aristo, the only time, had been
in early December, the start of the Mediterranean winter.
The plane had taxied to a jet way; she’d disembarked along
with scores of other travel-weary coach passengers and sleepwalked
through the terminal to a luggage carousel where she’d
waited for her suitcase to thump its way toward her. Then she’d
headed outside and waited in line for a taxi.
Arriving in the kingdom with a prince of the Royal House of
Karedes was very different.
Alex’s jet landed and taxied to an area far from the busy
terminal. Two men wheeled a staircase to the door. The captain
and co-pilot left the cockpit and saluted as she and Alex moved
past them; Thalia dropped a little curtsy toAlex and smiled at her.
“Enjoy your stay, miss.”
Alex slid his arm around her waist. “I’ll see to it Ms. Santos
enjoys every minute.”
SANDRA MARTON 79
Was she the only one who heard the ironic undertone in his
words? She couldn’t tell; Thalia’s face showed nothing but Maria
felt a tinge of heat wash into hers.
No, she told herself fiercely, no! She would not let him take
control again. Determinedly, she shrugged free of his encircling
arm and went down the stairs.
In December, the Aristan skies had been a brilliant blue and the
day unseasonably warm. Now, in early February, the air held a
distinct chill. Just as chillingwas the sight of the uniformed chauffeur
standing at attention beside a black limousine even more
imposing than the one that had ferried them around NewYork.
A shudder went through her, and Alex immediately took off
his leather jacket and wrapped it around her shoulders.
“I don’t need that,” she said, trying to shrug it away, but he
clasped the collar, brought the edges together and, in doing so,
drew her closer.
“But you do, agapimeni,” he said, smiling though the smile
never reached his eyes. “Besides, didn’t you just tell me the first
rule a mistress must follow is compliance?”
“Don’t count your chickens before they hatch,” Maria said
coolly. “I’m not your mistress yet.”
His eyes grew darker than midnight.
“You will be, glyka mou,” he said huskily. “And very soon.”
He brushed a strand of hair from her cheek and hooked it
behind her ear. His gaze fell to her lips. Was he going to kiss her,
despite the people watching from the top of the stairs and the
chauffeur waiting beside the car?
If he did—if he did, she would stand straight and still within
his arms and give him nothing in return.
“Did you hear what I said, Maria? An hour from now, you’ll
be in my bed.”
Her pulse rocketed. It took all her strength to respond with
what she hoped was a cool smile.
“Thank you for the warning, Your Highness. It’s always
helpful to be prepared for something unpleasant.”
To her amazement, Alex laughed.
80 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Very nicely done.” His hands swept into her hair and he tilted
her face to his. “But a sad little lie.” His smile faded. “Tell me
how unpleasant it is after I have you undressed,” he whispered.
“Say it when my mouth is at your breast, when it is between your
thighs. Tell me then, glyka mou, and I might just believe you.”
She felt her nipples peak, felt the swift rush of desire spear
low in her belly. He seemed to know what effect his words had
because he bent his head and gave her a quick, possessive kiss.
“Get in the car, agapi mou,” he said, and the look of satisfaction
on his hard, beautiful face made her wonder who she hated
the most, Alex or herself.
The car moved swiftly through the streets of Ellos.
Alex was on his cell phone, talking softly as buildings flashed
by. She recognized the small hotel she’d stayed at, the busy street
where she’d first met him. The romantic restaurant he’d taken her
to, the little park where he’d kissed her.
He’d told the truth, she thought, and drew a shaky breath. He’d
have her in his bed very soon. His apartment was only a couple
of blocks away.
But the car didn’t take the turn that would have brought
them there.
Where was he taking her, then?
She threw him a glance. He’d put the phone away; he sat with
his arms folded over his chest, looking distant and formidable,
and she decided she’d sooner die than ask. Besides, what did it
matter? Maybe he had rules for this kind of thing. Or maybe he
didn’t want her in his apartment. Maybe there was another
woman there already. Or maybe he preferred to keep his women
in a hotel.
The limo swooped up a ramp and onto a highway. A sign in
both Greek and English flashed by.
To the North Coast Beaches and the Bay of Apollonia.
Beaches? Bays? Shewas a city girl. Streets, noise, traffic were
her natural habitat. Beaches and bays sounded foreign. Isolated.
“Aren’t we going to your apartment?”
SANDRA MARTON 81
She spoke without thinking, regretted it almost immediately,
but Alex had a ready reply.
“We were, but I changed my mind. I’m taking you to a place
where your compliance will be assured.”
Her heart skipped a beat. She thought of telling him he wasn’t
funny but that would be a sign of surrender, and the last thing
this man would have from her was surrender.
Her refusal to bend to his will was all she had left, and she
was intent on keeping it.
The drive took what seemed a very long time.
They had reached the bay; the sign at the exit said so but the
proof was in the spectacular view from a road that now hugged
high, curving cliffs above sand so white it looked as if it were
made of crushed pearls. Beyond that stretched a sea of deep, brilliant
blue, so beautiful it took her breath away.
All right. She had to break her self-imposed silence.
“Is that the Bay of Apollonia?”
Alex nodded. “Named for the god, Apollo. Legend says that
Virgil wrote a poem about this place some two thousand years ago.”
“Virgil? But he was Roman.”
“Aristo and its sister island, Calista, were first part of the
Greek Empire and then were ruled by Rome. You’re familiar
with Virgil?”
Maria stiffened. “I might not have had your tutors and private
schools, Alexandros, but the New York City schools provided me
with an excellent education.”
“I didn’t mean to imply…”
“Yes. You did. You don’t know a thing about me but you have
no trouble jumping to all kinds of conclusions.”
“I might say the same of you, glyka mou.”
Maria looked at him. “You mean,” she said sweetly, “you
didn’t have tutors? You didn’t go to private schools?”
“Well, no. I mean, I did—but I have to admit, I tuned out most
of what I learned in Latin III, whichwas pretty much when we dealt
withVirgil. I guess I’m just surprised you didn’t do the same.”
82 BILLIONAIRE PRINCE, PREGNANT MISTRESS
He grinned, and it instantly transformed him from cold despot
to the gorgeous, easygoing man she’d met that night two months
ago. She didn’t want that. Didn’t want to remember that night,
how he’d made her feel when he’d made love to her.
“Anyway, yes, Virgil wrote about the Bay of Apollonia. He
called it an ambrosial sea of sapphire.”
How could she not reply to that? Maria sighed and gazed out
at the bay again.
“He was right,” she said softly, “though I’ve never seen a
sapphire that magnificent. But if I did—”
“If you did?”
“I’d use it as the center stone in a ring. I’d make the setting
of twenty-four-karat gold to suggest the brilliance of the sun, and
mount the sapphire between a pair of small, perfect diamonds to
represent the sister islands of Aristo and Calista.”
“They’re not that anymore,” Alex said, a bit grimly. “The
unified kingdom of Adamas is just a memory until, if and when
the islands are somehow reunited.”
“Is that what people hope will happen?”
“It’s what King Christos hoped would happen when he gave
dominion of one island to his daughter, Anya, and the other to
my father, Aegeus.”
“Was that when Christos had the Stefani diamond split in two?”
Alex raised an eyebrow. “You’ve done your homework.”
“Did you think I designed the necklace for your mother out
of nothing? Of course I did my homework. I know the diamond
was the biggest pink diamond ever mined on Calista, that it dates
to the time of Richard the Lionheart and that it was the center of
the crown of Adamas until it was cut in half in ninety seventyfour.”
Maria flushed. “I don’t know why I’m telling you all this
when you already know it.”
The lady was full of surprise, Alex thought, watching her in
silence for a little while. Then he cleared his throat.
“What will you do with the money from the commission?”
“What will I do with it?” Her disbelieving tone suggested he’d
lost his mind.
SANDRA MARTON 83
“Yes. Surely, it’s enough to buy the perfect sapphire, the
perfect diamonds—”
“You mean, it’s enough to put a down payment on my loft.
Buy some new equipment. Pay some overdue bills. Pay some
bills for my mother, maybe even convince her to move to a nicer
place.” She gave a rueful laugh. “That’s what I’ll do with the
commission.”
“You support your mother?”
Maria gave a little shrug. “She isn’t up to working.”
“Surely, she could—”
“She doesn’t think so. And I owe her. She sacrificed everything
for me…”
“You can’t really believe that,” he said, a touch of anger in
his words.
“What does it matter? I do what must be done, Your Highness,
the same as most people, but what would you know about that,
in your world?”
“That’s unfair.”
“Is it?” Her lips stretched in a smile. “You show up at my door.
You give me the most wonderful news imaginable.”
“And that’s bad?”
“Then you tell me the only way this—this miracle will happen
is if I agree to sleep with you.”
His eyes narrowed. “Trying to get out of our deal, Maria?” He
moved quickly, covered the distance between them and caught
her by the elbows. “All I did was turn the tables,” he said in a low
voice. “You set the trap the first time. Now it’s my turn.”
Maria could feel the sting of angry tears. She didn’t want to
cry in front of him!
“Let go of me.”
“Why? Because you don’t like the truth?”
“You wouldn’t know the truth if it bit you! There was no trap!
You seduced me.”
“I seduced you the way a chicken seduces a fox! You were
good, I have to admit. I really believed you were a shy Miss
Innocent lost on the streets of a strange city.”
84 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Bastardo!” Maria hissed.
Alex slid his hands to her wrists, clamped them hard and
dragged her toward him.
“You knew who I was. You intended to use me.” His eyes
narrowed. “Now I’m going to use you.”
He bent his head and took her mouth, his kiss hard and demanding
and she hated him, hated the touch of his hands, the feel
of his mouth. Hated, hated, hated…and then she stopped thinking
and fell into the kiss.
He felt it happen. Knew the moment she let go—and then his
arms were around her, she was in his lap, his hand was under her
sweater, his mouth was feeding on hers and it was as it had been
that night, the hot need, the drowning passion, the desire to take
and take and never let her go…
His cell phone rang.
Slowly, Alex came back to the world. The car had stopped.
He cupped Maria’s shoulders, put her from him. Her eyes opened
slowly; he saw in them everything he’d seen that night. Surprise.
Desire. Even the innocence he damned well knew wasn’t real.
Angrily, he yanked the phone from his pocket and flipped it open.
“Alexandros? Are you there?”
His father’s voice buzzed in his ear. “Ne,” he said, clearing his
throat.Aegeus talked.Alex listened.Yes, he said again, yes, all right.
But his eyes never left Maria’s face. The way she was looking
at him, the way her lips were parted. He wanted to reach for her
when the call ended. She knew it; he could see it, feel it. She was
ready for him. God, yes, she was ready.
But hewasn’t a fool. Hewould be in control this time, not she.
The Mercedes slowed. Ahead, elaborate wrought-iron
security gates swung slowly open. The car moved under a long
archway of tall cedars and came to a stop in a circular drive
before a magnificent glass and cedar mansion.
“Where are we?” Maria said warily.
“Bluebeard’s castle,” Alex said wryly. “My home, Maria.
My housekeeper expects you. Go inside. See if everything is
as you wish.”
SANDRA MARTON 85
86 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“I don’t under—”
“There’s been a change of plans. I have work to do. I’ll be
back this evening. Six o’clock. We have a dinner appointment.
Be ready. I do not like to be kept waiting.”
The commands were flung at her like stones from a slingshot.
Maria lifted her chin and glared.
“I have no interest in playing games, Your Highness, or going
on pretend dates.”
A smile spread across his lips. “In such a hurry to get to bed,
glyka mou?” Her cheeks colored and he gave the kind of laugh
she knew she would never forget. “It’s hardly a date,” he said
brusquely. “My parents want to meet the winner of the royal commission.”
He wrapped his hand around the back of her neck, drew
her to him and kissed her, hard and deep. “One final reprieve,
agapimeni, and then, rest assured, you will share my bed.”
CHAPTER SEVEN
ALEX’S driver deposited Maria’s suitcase beside her, saluted
briskly and strode back to the limousine.
Wait, Maria almost said, but what would be the point? There
was something intimidating about being delivered to the massive
front doors of a mansion where she knew no one, but getting back
into the car beside a man who’d just kissed her senseless wasn’t
much of an alternative.
She could hear the purr of the big car’s engine as it went
down the drive. She took a deep breath, raised a hand toward
the bell. The doors swung open before she could touch it and a
small woman dressed head to toe in crisp black cotton stood
looking at her.
Wonderful. This had to be the housekeeper. Did she bear
more than a passing resemblance to the one in that old movie
about Young Frankenstein? Then the woman smiled, dipped a
knee, and was instantly transformed from wicked witch to a welcoming
committee of one.
“Kalimera, Keeria. Onomázome Athenia.”
“I’m afraid I don’t speak Greek—”
“Of course. Forgive me. Good morning, madam, and
welcome. I am Athenia. The prince has told me to make sure you
are comfortable.”
Did he leave the same orders for all his mistresses?
“Thank you.”
88 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Athenia clapped her hands. A manservant appeared, inclined
his head to Maria and scooped up her suitcase.
“Really,” Maria said, with a little laugh, “no one has to bow
to me. I’m not a royal or anything like that.”
“You are the prince’s guest and the lady who is to create a
beautiful gift for our beloved queen. We are honored by your
presence, keeria.” The housekeeper stepped back. “Please, won’t
you come in?”
What would happen to Athenia’s warm welcome if she knew
that Alex’s esteemed guest had also made a devil’s bargain with
him? There was no sense in thinking about it. She was here, and
she would do what had to be done.
“Thank you,” Maria said again, and stepped into a cool, slatefloored
entryway. One quick glance assured her this house would
never be confused with Bluebeard’s castle.
“Would you like something to drink? Something to eat? I
know you have had a long journey.”
Just the mention of food and Maria’s belly did a nasty little
flip-flop.
“No,” she said quickly, “no, thank you. I’m not hungry.”
“Then,would you like me to showyou to your room?”Athenia
nodded toward a spiraling staircase that seemed suspended in the
air. “Or would you prefer to see your workshop first?”
Her room? What the housekeeper meant was the prince’s
room. Unbidden, a tremor of what surely had to be apprehension
danced along Maria’s skin.
“Uh, no,” she said, a little breathlessly. “I mean…I mean, my
workshop will be here?”
“It will. I hope you will like it. His Highness gave very
specific orders but we had so little time…”
The Prince of Arrogance’s specialty, Maria thought grimly.
Handing out orders. Giving people little time to obey, much less
question. And why would she be working here? What had he
done? Put a bench in the basement? Hung a work light over it?
She’d have everything she needed, he’d said.
“If you would please come this way…?”
SANDRA MARTON 89
Maria followed the housekeeper through a series of magnificent,
high-ceilinged rooms. Despite her irritation, the artist in her
could not help but see the house’s incredible beauty.
The lifestyles of the rich and famous, she thought wryly.
Always and forever amazing.
She knew how they lived. She was a NewYorker; her life and
those of the fantastically wealthy were completely separate but,
in Manhattan, you brushed shoulders all the time even if it was
only at the Bobbi Brown counter at Saks. And if you knew
somebody who knewsomebody who knewsomebody who could
get you into a promotional party for Vogue or Vanity Fair—and
she did—you could even get up-close-and-personal glimpses of
that kind of storied existence. An old classmate from FIT, a guy
who now designed incredible floral displays, had edged her onto
a couple of those guest lists, though attending the parties had
never snagged her a client.
Still, nothing she’d seen compared to this.
Maria tried not to stare as she followedAthenia throughAlex’s
home. The mansion was spectacular but she had to give him
grudging credit. It had not been built to impress, though it surely
did, but to celebrate thewooded setting, the sapphire bay, the white
sand beach.Walls were made of glass. Almost all the rooms had
terraces or balconies, and the water from an enormous infinity
pool seemed to spill into a sea that stretched to the horizon.
Athenia led her out a pair of glass French doors. Apparently,
her workshop was not in the house. Maybe the mighty prince
thought she could make his mother’s birthday gift in the garage,
Maria thought irritably as they made their way along a flagstone
path that wound through a dormant garden.
The housekeeper turned to her and smiled.
“Your workshop, keeria.”
Maria blinked in surprise.
Ahead, in a grove of firs, stood a perfect miniature of the main
house. Wood. Glass. Soaring rooflines, terraces, white sand and
blue water a dizzying distance below.
“This is normally a guesthouse but the prince was very
specific about your needs. We worked quickly to meet them, but
if anything is not to your liking…”
Not to her liking? Maria almost laughed as they stepped inside.
The guesthouse had three rooms. A bedroom. A marble
bathroom. And a main room, big and high-ceilinged and brightly
lit, a room that had been filled with oak worktables and benches,
with shelves that held tools she had dreamed of buying but only
in a distant, far more affluent future. A quick glance revealed
heated presses, torches, hand tools and protective gear, all of it
straight out of a jewelry maker’s dreams.
And there were cabinets.
Cabinets with drawers and cubby-holes and shelves. Cabinets
that opened to reveal all the things she could possibly need to
create Queen Tia’s necklace. Waxes. Molds. Polishes. Trays of
bright gold and platinum and silver.
And one special tray that made her heartbeat quicken.
“Shall I leave you here, miss?” Athenia said.
Maria nodded. And reached for that special tray. Lined in
black silk, its small compartments burned with the fire of the brilliant
white and pink diamonds she had so carefully described in
her proposal as the only ones suitable for the queen’s gift.
The stones glittered with life.
Carefully matched white diamonds from a mine in the
Canadian Yukon, where there was no danger of them having
been involved in the blood conflicts of the world. And two magnificent
pink diamonds, so exquisite they could only be from the
fabulous mines of Calista.
Maria lifted the pink stones from their silken compartments.
She would only use one as the centerpiece of the necklace. In
her proposal, she’d pointed out that pink diamonds, that all
diamonds, had slight differences in color.
Obviously, King Aegeus had decided to provide her with two
stones so she could choose the one she preferred. The implications
of such wealth were almost beyond comprehension.
The pinks were easily forty karats each, just as she had requested.
She had determined the size she’d need by estimating
90 BILLIONAIRE PRINCE, PREGNANT MISTRESS
that the Stefani diamond, in its original form, was said to have
weighed approximately one hundred and ninety carats, meaning
it had been even bigger than the fabled Darya-ye Noor, a pale
pink diamond that had been mined in India hundreds of years ago
and then became part of the Persian crown jewels.
Thus, the half of the Stefani pink diamond now in the Aristan
crown would weigh somewhere around eighty carats, since some
material would have been lost when the stone was split. The pink
diamond that would be the focal point in the queen’s necklace
would have to be of a size to complement the one in the crown.
These incredible pink ovals would look the same to the untrained
eye, but Maria could see a slight variation in color. The
only way to choose the proper stone for the queen’s necklace
would be to check both against the pink diamond in the crown.
The palace had provided her with photos of it but no photo could
capture the soul of a diamond, or the subtleties of its color, especially
when it was half of the legendary Stefani stone.
Carefully, she returned the pink diamonds to their tray. Her
design couldn’t be changed now, nor did she want to change it, but
diamonds, born in the extreme pressure and heat of the earth’s
forming crust millions of years ago, all had their own characteristics.
Her plans needed simple refining. Nothing anyone but she
would notice.Afiligree of gold here, a millimeter less in depth there.
First, though, she had to call Joaquin and Sela and let them know
she was all right. She hadn’t had the chance to do it last night…
Better not to think about that.
She used her cell phone, left a brief message about the commission
on their voice mail, with no mention of the very personal
contract terms that involved the prince.
“I’m very happy,” she said. And, at the moment, that was the
truth. She had the perfect workshop. The best tools. And the most
magnificent diamonds imaginable.
Maria hitched her hip onto a stool, pulled a pad and pencil
toward her and began to sketch. Yes, she thought as she lost
herself in the work she loved, she could make her design even
more pleasing to the eye. And thinking about diamonds was far
SANDRA MARTON 91
safer than thinking about the man to whom she’d all but sold
herself. The man who would claim her later tonight, who would
take her to his bed, make love to her as he had all those weeks
ago. She would hold back, hold back…but, in the end, she knew
she would sob his name, open her mouth, her body to his. She
would be lost in his arms, in his strength and beauty and passion.
She forced the treacherous thoughts from her mind, put all her
energy into her ideas for the necklace and the diamonds. They,
at least, would never hurt her.
The sun shifted in the sky. She never noticed. She sketched,
erased, sketched… And yawned. Yawned again. She was tired
all the time lately. This time, at least there was a reason. It had
to be jet lag, catching up to her.
As she had done many times over the last couple of weeks,
Maria set her work aside, folded her arms on the table, lowered
her head and rested her cheek on them.
Just a few seconds, to clear the cobwebs from her brain, she
thought. Just a few seconds…
Jet lag, Alex kept telling himself. That was why he felt so
damned irritable.
Besides, it was unreasonable for his father to have demanded
a meeting now, but that was Aegeus’s way. What the king wished,
others must do. And today, this very afternoon, what Aegeus
wished was to meet with his three sons and discuss plans for the
construction of another high-rise complex in Ellos.
There was no point to such a discussion.
For one thing, the construction was already underway. For
another, Alex was in charge of the project. He had taken over development
on Aristo more than eight years ago, with Aegeus’s
grudging blessing.
“You might as well get some use out of that MBA of yours,”
he’d said, which was as close as he’d ever come to acknowledging
that his second son was now more qualified than he to oversee
the kingdom’s booming economy.
This meetingwas just a not so subtle reminder thatAegeuswas
92 BILLIONAIRE PRINCE, PREGNANT MISTRESS
still Aegeus, Alex thought as he sat at the conference table in the
king’s palace office. As if any of them could ever forget that.
“…twenty stories, Alexandros, but why not thirty?”
Alex looked up from the doodles he’d been making on the
yellow notepad before him. Aegeus’s eyes were focused on him.
His younger brother, Andreas, seated beside him, nudged Alex’s
foot with his under the table. His older brother, Sebastian, seated
opposite, raised his eyebrows.
“Didn’t you say the architect agrees that twenty stories for the
center building would be right, Alex?” he said smoothly.
“Yes,” Andreas chimed in, “twenty stories so that the view of
the harbor would not be blocked from the condominium complex
on the heights, right, Alex?”
“That’s correct,” Alex replied. Sebastian grinned. You owe us,
big time, that grin said. Well, hell. That was how it had always
been, the three brothers bailing each other out of hot water when
their father turned a stern eye on any one of them.
Aegeus looked grim, but then he looked that way most of the
time. He looked tired, too, Alex noticed, and thinner than usual.
“Are you feeling all right, Father?” he said.
The king’s eyes narrowed. “I’m feeling fine, thank you,” he
said brusquely. “Fine enough to ask a few more questions—that
is, if you can manage to keep your attention on our discussion a
bit longer.”
Alex felt a muscle knot in his jaw. “What else do you want to
know, Father?”
“Have you settled the woman in?”
“Excuse me?”
“The woman. Mary Santos. Is she settled in?”
“Her name is Maria,” Alex said carefully. “And I thought we
were talking about the Ellos convention center.”
“We were. Now we’re talking about the person who’ll make
your mother’s gift. What is she like?”
“She is, ah, she is talented.”
Talented, indeed.
“I assumed that,” his father said impatiently. “But what is she
SANDRA MARTON 93
like? I am to meet her tonight, at dinner.Will she be able to carry
on a conversation with some intelligence, or is she one of those
leftover flower children who walks around barefoot?”
Sebastian coughed. Andreas cleared his throat. Alex shot them
both looks that promised trouble when they were alone.
“She’s a designer, Father,” he said carefully. “A New Yorker.
I’m sure you’ll find her interesting and able to hold her own at
the dinner table.”
And more than able to hold her own everywhere else. In bed,
for instance, where he should have been with her, right now.
“I assume you’ve put her in a suite at The Grand Hotel.”
“No.” Alex hesitated. “I, ah, I decided to keep her at my house
at Apollonia.”
His father stared at him. So did his brothers. Damn it, Alex
thought, and felt heat rise in his face.
“Security,” he said quickly. “She’ll be working with a fortune
in diamonds.”
“Have we security problems at The Grand?”
“No, of course not. But there are so many tourists…”
“Tourists who pay a thousand Euros a night for a room are
not tourists likely to dabble in theft,” Aegeus said, his words
heavy with sarcasm.
There was a moment’s silence. Then Sebastian and Andreas
spoke at the same time.
“You can never be too sure,” Andreas said.
“Remember that incident in—where was it, Alex? Some hotel
in Manhattan?”
His brothers had redeemed themselves. “Exactly,” Alex
said. “Security is much better at my place. The gates. The
electronics. The guards. I had my guesthouse converted into a
workshop for her.”
Aegeus nodded. “Well. Well, yes. Good thinking.”
A compliment. Something rare. Of course, it was a compliment
given in response to a lie. He’d placed Maria in his home
for reasons that didn’t have a thing to do with anything but lust.
He liked women. He liked sex. He knew what desire was,
94 BILLIONAIRE PRINCE, PREGNANT MISTRESS
how anticipation could enhance the moment when a man finally
took a woman.
But he’d never behaved like this.
Demanding Maria’s compliance. Damned near forcing her to
agree to sleep with him. It had made sense, when he’d planned
it. He would use her for his own ends as she had used him—
If that was true, why was his body in this almost constant state
of arousal? He’d spent the last hours thinking about her.
Imagining her waiting for his arrival. Imagining what he would
do when he reached home.
The images, hot and raw, flooded his mind. If he didn’t do
something soon, he was going to explode.
“Alex? Are you listening to me? I said—”
“Father.” Alex pushed back his chair and got to his feet. “I’m
sorry, but I have to leave.”
Aegeus looked at him in disbelief. “You what?”
“I said I have to—”
“We have not finished discussing the convention center.”
“We finished discussing it three months ago,”Alex said crisply.
His father glared at him. “I don’t like your tone.”
“My apologies, Father. I’m exhausted, that’s all. I’ve flown
to New York and back in, what, less than twenty-four hours.”
He forced a smile. “Perhaps we can put off this conversation
until tomorrow.”
Aegeus studied his middle son, then nodded.
“Very well.” He rose from his chair. Sebastian and Andreas
immediately did the same. “Be prompt for dinner tonight, please.
All of you. Alex, tell Ms. Santos your mother and I look forward
to meeting her.”
Alex started toward the door. The king called after him.
“Alex? My initial concern about this woman, on reading her
proposal, was that she was too young and inexperienced. Now
that you’ve spent a bit of time with her, what do you think? How
does she strike you?”
Spectacularly beautiful. And spectacularly immoral. And,
Thee mou, so desirable he ached to possess her.
SANDRA MARTON 95
“I told you,” Alex said calmly. “She’s very interesting.”
Then he got the hell out of there before his father or, worse,
his brothers could ask him any more questions.
The drive home seemed to last an eternity, even though he was
at the wheel of his Ferrari and took both the highway and then
the winding road to the house at breakneck speed.
Would she be waiting for him? He’d told her to be ready by
six; he was an hour early. She might be in the bath. Or undressing,
baring her flesh to the waning afternoon light.
Such schoolboy fantasies, and completely demolished
when Athenia told him Keeria Santos was in the guesthouse.
In the workshop.
The workshop, he thought as he strode down the path to it.
Of course. The only allegiance, the only honesty she had was
to her work.
It filled him with a rage he knew had no basis in reality.
She should have been in the house. In his bedroom. Dressing
for dinner, as he’d told her to. Or waiting for him. For his touch.
For the act thatwould avenge what she had done to him weeks ago.
“Maria,” he barked as he flung open the guesthouse door.
“Maria, I told you…”
Andhe sawher.At theworkbench. Her head on her arms.Asleep.
His anger drained away. He felt something new take its place,
something he could not name and he swallowed hard, closed the
door quietly and stoodwatching her. Then, slowly, hewalked to her.
Her head was turned to the side. Her lashes formed dark crescents
against the high arc of her cheekbones; there were purple
smudges of exhaustion under her eyes.
My fault, he thought. He had walked into her life…hell, he
had bullied his way into her life, then dragged her halfway around
the world. Not that he owed her more delicate treatment. It was
just that she looked so innocent in her sleep. Her lustrous hair,
lying tumbled over one shoulder. Her translucent skin. Her lips,
delicately curved.
He could remember their taste.
96 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Not from that last kiss he’d given her hours ago, a kiss given
in rage. He remembered her taste from that night in Ellos. How
her mouth had trembled beneath his. How her sigh of surrender
had mingled with his breath. How he had groaned at the sweetness
of her.
He didn’t think. Didn’t question. Instead, he bent down,
brushed a soft, silken curl from her cheek. Put his lips to her
temple. The pink shell of her ear. The curve of her jaw.
“Maria.” Her name was a whisper. “Maria,” he said again, and
when she sighed, he squatted beside her and pressed his lips
gently to hers.
Her lashes fluttered.
He kissed her again. Her taste was honeyed. Don’t, he
thought, don’t. But what could be wrong with one more kiss?
One more sip of nectar from her soft, rosy mouth? Just one last
brush of his lips against hers. Just one… And this time, her lips
parted to his. Clung lightly to his. Her eyes opened; her pupils
were huge and dark.
“Alexandros?” she whispered, and he was lost.
Groaning, he scooped her into his arms. Brought her down
on the soft Kilim carpet. Swept his hands into her hair, lifted her
lovely face to his, and took possession of her mouth.
“Alexandros,” she sighed.
His name. Not any other man’s. His. Only his, and now her
arms were around his neck, her mouth was moving on his as he
lay her back and came down beside her.
His hands cupped her face. Her beauty stole his breath; the
smile that trembled on her lips pierced his heart.
“Yes,” he said huskily. “That’s right, glyka mou. Saymyname.”
She did, again and again until he silenced her with a deep,
hungry kiss. A cry rose in her throat. Her arms tightened around
him. Her back arched; she rose against him and he groaned again
and slipped his hand inside her black tights.
Her flesh was warm. Soft. Fragrant with the glorious scent
of arousal.
He could feel the race of his blood.
SANDRA MARTON 97
He put his lips to her throat.
She sobbed his name. Cupped the back of his head. Urged his
mouth down, down, to the uptilted thrust of her breast. To the
pebbled nipple that pressed against the softness of her sweater.
He caught the bud lightly between his teeth. Her cry pierced the
thick silence.
“Yes,” she said, “yes, yes…”
He pushed up the sweater. Sucked a nipple into his mouth. She
was lifting herself to him, burying her fingers in his hair, urging
him closer, closer…
A knock, as strident as Olympian thunder, sounded at the
door. Alex barely heard it but Maria stiffened in his arms.
“Alex,” she hissed.
“Shh, agapi mou. Never mind.Whoever is there will go away.”
The knock came again. “Your Highness?” Athenia’s voice
was thin and apologetic. “Your mother is on the phone. She asks
if you and Keeria Santos would come by a few minutes early.”
Alex pressed his forehead to Maria’s. “Yes,” he called, “all
right. Tell the queen we’ll be there as soon as we can.” He waited
until he was sure the housekeeper was gone. Until he could move
without disgracing himself. Then he sat up. “We’ll finish this
later,” he started to say, but Maria had already rolled away from
him and risen to her feet. Her face was white except for two spots
of crimson high on her cheeks.
“Is that how you get your women, Your Highness? By taking
advantage of them when they’re asleep?”
Her voice shook with indignation. Hell, he was shaking, too,
but with thwarted desire.
“You know that isn’t how it was.”
“What I know,” she said, the words laced with accusation, “is
that I woke up and found you all over me!”
He stood and faced her, caught between equal parts of anger
and frustration.
“Liar,” he said in a low voice.
She turned her back. He grasped her shoulder and swung her
toward him.
98 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“What’s the matter, glyka mou? Don’t you like it when the
tables are turned? When you’re not in control of the situation?”
“All right,” she snapped. “You made your point. You—you got
me to—to give in to you. Are you satisfied now?”
He gave a sharp, ugly laugh. “We have a long way to go until
I’m satisfied, sweetheart.”
The crimson drained from her face. “How can you do this?”
It was, he thought, an excellent question.
Despite everything, he was not a man who would ever take
an unwilling woman to bed. That was part of the problem, when
he came down to it. Maria said she didn’t want him but each time
he took her in his arms, she turned that into a lie. Or did she?
Was she still playing him? Was she using him now, even as
he was determined to use her? And how could he tell himself that
was what he was doing when the truth was he had never wanted
a woman as he wanted her and—be honest, Karedes—and
revenge or payback, whatever name he gave his supposed motivation,
had zero to do with what he felt once she was in his arms.
He turned away from her. Ran his hand through his thick, dark
hair.
He was a man who had always prided himself on logic. On
self-discipline. And right now, hell, who was he kidding? Ever
since the night he’d first met this woman, logic and self-discipline
had gone by the wayside.
Maybe it was enough to admit that he wanted her still, and
that at the end of a month she would be out of his system.
Damned right, she would, he thought grimly, and he turned and
faced her again.
“I suggest you return to the house,” he said brusquely. “One
of the maids has unpacked your suitcase. You have—” He
glanced at his watch. “You have twenty minutes to get ready and
then we leave for the palace.”
Her chin came up. “Where has your devoted slave put my
things?”
Thee mou, she enraged him! He wanted to shake her. Or strip
her naked and show her who was in charge here.
SANDRA MARTON 99
100 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Your clothes are where they belong,” he snapped. “In my
room. We have an agreement, Ms. Santos, that says you are to
fulfill your required duties in their entirety, or have you conveniently
forgotten that?”
She gave him a withering look. “How could I forget what is
sure to be the worst agreement of my life?”
It was, Maria thought, a fine line.
But the Prince of Arrogance only laughed, and that was the
sound that followed her all the way to the house.
CHAPTER EIGHT
WHAT did you wear to dine with royalty?
Probably nothing she’d packed, Maria thought unhappily as
she followed Athenia to Alex’s bedroom.
Bedroom? Could you call a room this size a bedroom? It was
bigger than her loft. Polished wood floors. Handmade rugs. A
cathedral ceiling. Skylights. A wall of glass and, beyond it, a
terrace and the pool that seemed to hang suspended over the bay.
And a bed.
A bed centered beneath the skylights, elevated on a raised
platform, covered by a black silk comforter and a sea of black
and white pillows as if it were a stage set.
“Madam will find her things hung in the dressing room.”
Maria swung toward Athenia. “Yes. I—I— Thank you.”
“Everything has been pressed, keeria, to your liking, I hope.”
“Thank you,” she said again. They seemed the only words she
could manage.
The housekeeper smiled politely and shut the door behind her.
Maria waited a couple of seconds, then turned the lock. She
leaned back against the door, shut her eyes and inhaled deeply.
It was a handsome room. Hell, it was a magnificent room.
And that bed…
Do not look at that bed, Maria. Do not even think about it.
She would not. She would shower and dress. She had twenty
minutes. Not much time, but enough. Actually, she never took
102 BILLIONAIRE PRINCE, PREGNANT MISTRESS
longer than that to get ready for a date. Except, thiswasn’t a date.
It was business. Business to be conducted at a palace.
She’d seen the palace—from the outside, anyway—the last
time she was here.
It made Buckingham Palace look small.
“That’s it,” she whispered.“Work yourself into a panic. That’s
going to be a huge help!” Spine straight, she ignored the bed and
marched across the room. This was an important night.
Indeed, it was. At the end of it, Alex was going to make love
to her.
Maria rolled her eyes. Itwas stupid to let her thoughtswander.
Of course, tonightwas important. She had the commission; now,
she had to make sure she had the hearts and minds of her clients.
Her clients. The king of Aristo and his queen. She’d come a
long way from the phony Frenchman of L’Orangerie.
The dressing room made her laugh. Add some plumbing and
most Manhattan residents would have happily called it an apartment.
And there were her things, on a rack all by themselves, surrounded
by other racks filled with men’s clothes. Alex’s clothes.
And no, she was not going to think about that now. Dinner
was everything. It had to go well.
Her clothes, as Athenia had told her, had been pressed, hung
and organized by color. Giddy laughter rose in her throat. Jeans
and jeans and jeans, T-shirts and blouses and sweaters. Organized
and pressed, and what in hell was there hanging in front of her
she could wear to a palace?
Casual, Alex had said. Easy for him to say. And to do.
What was he going to wear? And where would he shower and
dress?
Not here, and that was all that mattered. For all she knew, he
kept a complete wardrobe in each bedroom. A mistress in each,
too. Or maybe this was the way installing a new mistress was
handled. Maybe his staff was trained to move some of the
master’s clothes, just enough to get his latest conquest through
the confusion of her first night here.
Stop it, Maria thought furiously.
SANDRA MARTON 103
She was most assuredly not Alex’s conquest, she was his—
What would be the correct word? Never mind. She would not
dwell on how or why she was in his bedroom, or the implications
of it, either—or on the fact that his entire staff surely now
understood she would be sleeping with him.
A dozen other women probably had gone this route. She
lacked their experience in the art or business of being a kept
woman but instinct told her that a woman who filled that role
would not blush at such information being public.
She’d do her best not to blush, either.
Besides, Alex would not ‘keep’ her. The money for the commission
didn’t come from him. It was for the design and execution
of the queen’s birthday gift, and she would not accept so
much as a penny for anything else.
A phone rang.
Maria looked around. There it was. A small white telephone
on the wall of the dressing room. It rang again and she plucked
it from its cradle, put it to her ear and said a careful, “Hello?”
“You’re down to twelve minutes, glyka mou.”
“Alexandros?”
“I like it when you call me that.”
His voice was husky. Why did that roughness always send a
tingle along her skin?
“Alexandros!” She looked around wildly. “Where are you?”
He laughed. “Relax, sweetheart. I can’t see you—but I
know exactly what you’re doing.You’re standing in the middle
of my bedroom, trying not to look at the bed and wondering
what on earth possessed you to bring nothing suitable to wear
this evening.”
She blinked. “Wrong,” she said airily. After all, she was in the
dressing room, not the bedroom, and she’d already wasted time
trying not to look at the bed.
“Try the emerald silk dress and the black stiletto sandals.
And before you tell me you won’t wear another woman’s castoffs,
let me assure you they aren’t. The dress and shoes were
both delivered from the Chanel boutique in Ellos a couple of
hours before we arrived.” His words took on that same sexy
softness again. “I had to guess at the size, glyka mou, so I hope
I got them right. Of course, we won’t have any such difficulties
after tonight.”
Maria felt her entire body blush as she slammed the phone
back onto its cradle. How dared he buy her clothes? Did he really
think she’d wear anything he’d paid for?
There it was. The dress. And right below it, the shoes. Both
were gorgeous. The brilliant color of the dress would be perfect
with the delicately spiked heels. Exactly what she’d have bought
for an occasion like this…if she’d been in a position to spend,
what, ten thousand bucks?
She would not wear these things.
She would wear something of her own.
Black jeans. A white silk blouse. Dressy enough for dinner at
an upscale New York restaurant…but for dinner at a palace? For
what was, basically, a business meeting that was surely going to
change her life?
“Damn you, Alexandros,” she said bitterly—and knew she
had lost Round One.
She showered quickly, and never mind that the faint, clean scent
of the hand-milled soap reminded her of Alex. The shampoo had
the same effect. So what? Soap was soap, shampoo was
shampoo. She towel-dried her hair—no time for anything else—
and hurried into the dressing room.
There were more than shoes with the dress. There was a tiny
black evening purse. And undies.A black lace bra.A black lace
thong. The sheerest thigh-high nylons she’d ever seen.
She had her own underwear.
But not like this.
To hell with it.
She put on the bits of black lace, the sheer stockings. Hair loose
or up? Maria peered into the mirror. Up. The mass of dark strands
was too damp, too wild, too curly to leave loose. Finally, she
slipped on the emerald silk dress. Stepped into the black sandals.
104 BILLIONAIRE PRINCE, PREGNANT MISTRESS
And saw herself in the mirror.
He had good taste, the Prince of Arrogance, she thought wryly.
Acareer as a personal shopper could be his in the blink of an eye.
The dress was a perfect fit, demure and businesslike even as
it made the most of her slender figure. The shoes were gorgeous.
Straps that wound around her foot. Stiletto heels as thin as the
blade for which they were named.
Could he possibly know shoes were her weakness?
No, she thought. The better probability was that they were his
weakness. Maybe later tonight, he’d want her in the stilettos and
nothing besides the black lace thong…
“Oh God,” she whispered, and felt her heart rate shoot into
the stratosphere.
Jewelry, she thought numbly, because it was safer to think
about that than about what happened to her body each time she
imagined being in this room, in that bed, with the gorgeous
Alexandros. How could you hate a man and still want him?
A question for another time, not for the one minute—the one
minute she had left!
Fortunately, she’d dumped a couple of pieces of her stuff into
her handbag. A twisted gold chain? No. A shorter one, intricately
braided? No. A slender gold rope with a hunk of polished amber
knotted at the center? Yes. Perfect. Small gold hoops in her ears.
Had she forgotten anything? She certainly had. A quick swipe
of mascara. Sheer cherry lip gloss. A dab of powder on her
suddenly shiny nose.
She took a steadying breath. Another. Ready or not, she
thought, and she unlocked the bedroom door.
He was right outside it, waiting for her.
‘Gorgeous’was the wrong word to describe him. ‘Spectacular’
came closer, but it still didn’t quite cover it.
Say something, Maria told herself, but her brain was numb.
She could only look at him as he stood leaning back against the
cypress balustrade that enclosed the open loft, arms folded,
ankles crossed, the very portrait of The Male Waiting for his
Date. He wore a grey jacket, a black open-necked shirt, black
SANDRA MARTON 105
trousers and darkest brown mocs. His hair was damp; he was
freshly shaven…
He was beautiful. The in-the-flesh subject of a woman’s
dreams, except she didn’t have dreams like those. Well, not until
after that night they’d made love. Correction. That night they’d
had sex, and look where that had led.
He said nothing. Showed nothing. Slowly, slowly enough to
make her wonder if the dress didn’t look as good as she thought,
his gaze traveled from the top of her head all the way to her toes,
then back up again.
That was when he smiled. A slow, lazy, purely masculine
curve of his lips that sent shock waves through her blood.
“Just one thing…” He reached out, took the clip from her hair
and let all the wild curls tumble to her shoulders. “Perfect,” he
said softly.
She had to stop herself from returning the compliment.
Instead, she tossed her head as if it meant nothing. Damned if
that didn’t make him grin.
“Shall we?” he said, holding out his hand.
Maria ignored the offer, brushed past him and went down
the stairs.
His car was a low-slung, snarling crimson beast.
A Maserati. A Lamborghini. A Ferrari. One of those, she was
certain, but what would a born-and-bred New Yorker know?
Subway trains, yes. Automobiles, no. The only certainty was that
he drove fast, too fast, with a macho assurance that she tried not
to let impress her.
But it did.
Was there a female alive who wouldn’t be impressed by a man
so beautiful it hurt to look at him, driving a car that rumbled like
a big, predatory animal? One hand was curved over the steering
wheel. The other rested lightly on the gear shift lever.
Such competent hands. So powerful. His hands had been all
over her the night they’d met. She could still feel them, if she
closed her eyes. His fingertips playing with her nipples. His
106 BILLIONAIRE PRINCE, PREGNANT MISTRESS
thumbs gently parting her labia. Her shocked cries that had
quickly turned to sobs of ecstasy.
She felt the instant bloom of warmth between her thighs.
“Something the matter?”
His voice startled her. She looked at him and thought it was a
good thing he didn’t have X-ray vision or he’d see straight through
her clothes, see that she was wet, that her nipples were peaked.
“Maria?”
I want you, she thought dizzily, that’s what’s the matter.
“Are you worried about dinner tonight?”
No, she thought, on a faint wave of hysteria, not dinner.
“Don’t be. This is just my family.”
Dinner. She had to remember that. Hewas talking about dinner.
“Oh,” she said, and caught her bottom lip between her teeth.
Alex felt his muscles contract. Did she have to look so beautiful?
Did she have to worry her lip that way? Damn it, this was
not good. He should never have kissed her in the guesthouse.
He’d taken two cold showers before he got dressed and he was
still hard with wanting her.
What if he pulled the car over, took her in his arms and nipped
that sweet bottom lip himself? Just lightly enough to make her
moan and sigh and beg him…
“Family?” she said, and he blinked.
“Uh, yes. Family. My older brother, Sebastian. My baby
brother, Andreas. My sister Katarina—everyone calls her Kitty.
The only one missing will be Elissa. She’s in Paris.”
“So many people?”
The tip of her tongue slicked over that softly bitten, now undoubtedly
sensitive bottom lip. By the time they reached the
palace, he’d be completely out of his mind. When had this
woman assumed such power over him? It made him angry, and
his words were more harsh than he’d intended.
“Don’t tell me you’re nervous about meeting royalty, glyka
mou. After all, you did fine with me the first time out.”
She swung toward him.
“I told you, I didn’t know who you were.”
SANDRA MARTON 107
“Right. You just happened to meet me on the street and when
I suggested we go to bed, you said, hey, I have nothing else to
do, so why not?”
It hadn’t been like that and he knew it. She’d been sweetly
innocent; he’d seduced her with words, with caresses, with a need
unlike any he’d ever experienced in all his thirty-one years. Except,
it had all been a lie. She’d set him up. She had seduced him…
Hadn’t she?
“You know what, Alex?” she said, her voice shaking. “You’re
a real bastard!”
She was right. What was between them was personal and had
nothing to do with this evening’s gathering. Tonight was about
plans for the national celebration of his mother’s birthday. Affairs
of state came before everything else, a truth that had always
been part of his life.
“Okay. Let’s start over. Ask me again about who’ll be at
dinner tonight.”
Maria stared straight ahead. Alex sighed in resignation.
“You need to knowthese things, glyka mou. Howelse to prepare
for the sight of Sebastian, who stands four feet tall and weighs three
hundred pounds? Or to know that Andreas is in The Guinness
Book ofWorld Records forWorst Footballer of theYear?”
She swung toward him, as he’d hoped she would. “What?”
Alex grinned. “Don’t panic. We still tease Andreas over the
time he missed six consecutive tries in a game—but we leave out
the fact that he was only five years old at the time. As for
Sebastian…” His grin broadened. “The truth is, except for a lack
of hair anyplace but his knuckles and back, he’s not bad-looking.
Well, he’s not as handsome as I am, of course…”
He couldn’t be.
Alexwas joking, Maria knew. Still, what he’d said about being
handsome was true. He was, without question, the most beautiful
man she’d ever seen… And what did that have to do with
anything? He was still exactly what she’d called him. No-good,
self-centered and arrogant, and if she had not called him all those
names yet, she surely would before the evening ended.
108 BILLIONAIRE PRINCE, PREGNANT MISTRESS
She sat back, folded her hands in her lap and told herself she’d
get through whatever lay ahead because she had no other choice.
The Ferrari paused before the high gates outside the palace. A
smartly uniformed soldier stepped from the guardhouse, approached,
looked in at Alex, shot straight as a ramrod and delivered
a perfect salute.
“Your Highness.”
“Stavros. It’s good to see you pretending to be a soldier again.”
Maria looked at Alex in surprise. The soldier, still saluting, went
on staring directly ahead. “Especially since we both know I can
out-run, out-shoot, out-anything you choose when we have the
chance to give it another try.”
The soldier’s lips twitched. “Your Highness is, as usual, full
of, ah, full of air. Sir.”
Alex laughed and returned the salute. “At ease, Stavros. Good
to see you back. The ankle’s okay?”
The soldier grinned. “It’s fine, sir. And your shoulder?”
“Good to go. You signed up for the next Games?”
“Absolutely, sir. And you?”
“Try and keep me away,” Alex said, smiling.
Another smart salute; the gates opened and they drove slowly
down a wide, tree-lined avenue toward the broad marble steps
that led to the front doors of the palace.
“You and that man know each other?” Maria said.
“For years. We went to nursery school together.” He smiled.
“My mother’s modernist ideas won out that time. My father
thought it was a mistake to educate me among what he tried not
to call the commoners.”
“But he didn’t—I mean, the way he addressed you—”
“What’s the problem, sweetheart? Disappointed to find out
some people don’t think of me as you do?”
He pulled up before the steps. A valet opened his door; another
did the same for Maria. Ahead, the enormous entry doors swung
open. To Maria’s surprise, she saw the world-famous King
Aegeus and Queen Tia in the doorway.
SANDRA MARTON 109
“They asked me to bring you in through the Grand Hall,”Alex
said softly as he moved around the car to stand beside her. “And
they’re greeting you themselves. We are not as formal as some
royal houses but still, this is an honor.” He offered her his arm.
“Take it,” he said softly, “and smile, or my parents will think you
hate me.And you don’t hate me, glyka mou.We both knowthat.”
“Wrong,” Maria said sweetly. “But why should I take it out
on them?”
She put her hand lightly on his arm, took a deep breath, and
let him lead her up the steps.
“…and so,” Princess Kitty said, “Alex convinced me that it was
my royal obligation to sneak into the butler’s pantry to find out
what our parents had bought us for Christmas—well, it wasn’t a
butler’s pantry anymore, of course, it was just this huge room we
store stuff in at the beach house at Kionia—has Alex told you
about Kionia? Oh, it’s this incredible stretch of land overlooking
the Strait of Poseidon that separates us from Calista, and our
house is big and old and beautiful, and it’s all very laid-back, you
know, I can go around dressed casually—”
“Sloppily, you mean,” Aegeus said, his tone harsh. “And
why are we boring our guest with talk of childish pranks done
years ago?”
The family dining room became silent. Kitty’s round, pretty
face turned crimson. “Of course. Ms. Santos, my apologies.”
“Oh, please, don’t apologize.” Without thinking, Maria
reached for the princess’s hand. “It’s lovely to hear stories like
that. My own childhood wasn’t as much fun. No brothers. No
sisters.” Suddenly, she realized that every eye was on her, and
that she was hanging onto Kitty’s hand as if it belonged to Sela
and not a princess. Flushed, she let go. “I mean—I mean, this
has been such a lovely evening…You’ve all been so—so—”
“It’s been our pleasure, Ms. Santos,” the queen said gently.
“Please, won’t you all call me Maria?”
“Maria.” Tia smiled. “I hope you intend to see some of our
island in the next few weeks.”
110 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Maria shot a glance at Alex, who was calmly drinking his
coffee. “If I have the chance.”
“I’m fascinated by the thought of such a slip of a girl designing
and making such a magnificent necklace. I understand
Alex has outfitted a workshop for you in his home on
the coast.”
“Yes.” This time, Maria didn’t dare look at Alex. “He has.”
“And is it to your liking?”
What was the sense in lying? “Very much so, Your Majesty.
In fact, it’s better equipped than my own place in New York.”
“Good. If you should need anything more—”
“Well, I do need something. A couple of things, actually…”
“Such as?”
“Some information, to start. I understand that King Christos
ordered the Stefani diamond, which had been the centerpiece of
the crown of Adamas, to be split in two.”
She could almost feel the sudden tension in the room.
“I fail to see why the history of Adamas should be under discussion,”
the king said stiffly.
Maria cleared her throat. “I don’t mean to pry, Your Majesty.
It’s only that knowing the history of the diamond will help me
in creating the necklace.”
“Nonsense. Gold and diamonds well help, not timeworn stories
about the Stefani diamond and the islands of Aristo and Calista.”
Silence. Then Maria felt Alex clasp her hand under cover of
the table and enfold it in his own.
“Maria is an artist, Father. Her creations are, in a sense, representations
of a life force—in this case, a celebration of
Mother’s birthday as well as the continuity of our people. She’s
simply trying to gain some understanding of our kingdom. Isn’t
that right, Maria?”
“Yes,” she said, staring at Alex, amazed he should instinctively
comprehend what most people did not. “Stories,
legends, history…those are some of the qualities my work is
meant to convey.”
“Well, our history isn’t very complicated,” Sebastian said
SANDRA MARTON 111
pleasantly. “The Kingdom of Adamas dates back to ancient
Rome and Greece.”
“Yes,” Maria said again. “Alex told me it did.”
“Aristo was the island from which the kingdom was ruled. It
grew wealthy on its trade routes with Greece, Turkey and Egypt,”
Andreas said. “Calista had—has—its diamond mines. Pink
diamonds. Very rare—but, of course, you know that.”
Alex squeezed her hand in reassurance.
“The Karedes family—our family—got fat and rich trading
those diamonds to Europe.” He smiled wryly. “As you can probably
imagine, the Calistans didn’t like that. My grandfather—”
“King Christos,” Maria said.
“Yes. He tried to alleviate the tension but it didn’t work, so
he announced that on his death, he’d leave Aristo to be ruled by
my father and Calista to be ruled by my father’s sister, Anya.”
“And the people accepted that?”
“What else could they do?” Sebastian said. “But Christos
always hoped for a reconciliation. Part of what he said, when he
made his decision public, was that he wished the two halves of
the Stefani diamond would someday be reunited and that when
they were, the island would also be reunited as one nation, the
nation of Adamas. We call it Christos’s Legacy.”
Kitty nodded. “But it hasn’t happened.”
“That must have been a difficult time for everyone.” Maria
looked at the king. “For you and your sister, especially, sir.”
“It’s all in the past,” Aegeus snapped. “And I fail to see a need
to go through it with a stranger.” He tossed his napkin on the
table. “You are to make a necklace for the queen, Ms. Santos,
not write our family’s history.”
“Just a minute,” Alex began, but Maria spoke first.
“My sole interest is in making the necklace as meaningful and
perfect a gift as possible, sir.” She sounded composed but Alex
recognized that distinct, don’t-screw-with-me lift of her chin. “I
regret that you don’t see it that way.”
Alex bit back a grin. His Maria had been nervous about dining
with royalty, but she sure as hell had the balls to stand up to
112 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Aegeus. His brothers were trying not to smile; his sister looked
as if she might fly from her seat, grab Maria and kiss her. The
queen gave a soft cough and covered her mouth with her napkin.
Aegeus looked as if he weren’t sure if he’d been insulted or
not. Finally he nodded, shoved back his chair and got to his feet.
The meal was over.
“Perhaps I overreacted, Ms. Santos. At any rate, a perfect gift
is my wish, too. And now, if you require nothing further—”
“Actually,” Maria said carefully, “actually, sir, I do.”
Aegeus stared at her. So did the others.You could push the king
just so far and then you had to stand back before the explosion.
“Do you, indeed?” he said coldly.
Maria looked determined but she was shaking. Enough, Alex
decided, and, despite all the eyes on her, he moved closer and
slipped his arm around her shoulders. At first, she stiffened.
Then he felt her lean into him.
“It’s—it’s a request, sir.” She took a deep breath. “I’d like to
see the Aristan crown.”
“You have seen it,” the king said coolly. “My people provided
you with photographs.”
“Photos aren’t the same as the real thing, Your Majesty.”
“Impossible. For security purposes, the crown is kept in the
royal vaults.”
“Surely, it can be taken out of the vaults, Father,” Alex said
quietly.
“There is no need.”
“Oh, but there is, sir,” Maria said quickly. “I need to be certain
the center diamond in the necklace, the big pink one, will be the
correct shade. A diamond’s true color can never be conveyed
through a photo, no matter how good the photo is.”
“You mentioned color in your proposal. That is the reason I
provided you with two large pink stones rather than one.” The
king’s lips twisted. “Surely you noticed that.”
“Of course, Your Majesty. And I very much appreciate that
thoughtful gesture.”
“Thoughtful, and expensive, Ms. Santos.”
SANDRA MARTON 113
“It was a generous thing to do, sir.” Maria drew a breath. “But
there are slight variations in the colors of the two pink diamonds.
That’s all the more reason for seeing the crown.”
“I refer you, again, to the photographs. I have been assured
that digital photos are quite accurate.”
“Not when it comes to color,” Maria said with quiet determination.
“Plus, I need to see, to touch the Aristan half of the
Stefani diamond.” She flushed. “Stones have a way of
speaking to those who work with them, sir. I know it may
sound strange—”
“Strange?” Aegeus snorted. “It would seem I was correct in
fearing this young woman might be a leftover flower child,” he
said to no one in particular, “instead of a jewelry maker.”
“Actually, Father,” Alex said coldly, “Maria is neither.” He
felt her body jerk against his. Deliberately, he drew her closer.
“She is an artist, and we are very fortunate she agreed to
create this piece.” His eyes met Aegeus’s. “I think you owe her
an apology.”
The king’s face turned red. No one spoke for what seemed an
eternity. Then the queen cleared her throat, stood and took her
husband’s arm.
“Aegeus, Alexandros. Please, let’s not spoil the wonderful
plans for my birthday celebration. I am so excited about this
necklace… Just think, Aegeus, the entire world will be watching
when you present it to me. The necklace should, indeed, be as
perfect as Ms. Santos can make it, should it not? It should glow
with the same light as the Aristan crown, especially since you’ll
be wearing the crown that night.”
Silence. A muscle knotted in Alex’s jaw. Then he nodded.
“Mother is right, Father. I’m sorry if I seemed rude, but I
spoke the truth. Maria’s talent will ensure that people everywhere
will talk of Aristo, its crown and the queen’s matching
necklace for years to come.”
The king stood as still as a statue. Then, at last, he jerked his
head in assent.
“I’ll make the arrangements. Ms. Santos, you shall have five
114 BILLIONAIRE PRINCE, PREGNANT MISTRESS
minutes with the crown and the Stefani diamond. Five minutes,
and not a second more. Is that clear?”
Maria stepped free of Alex’s encircling arm and made a
deep curtsy.
“It is, sir. And thank you. You won’t regret your decision.”
Aegeus looked at her.A shadow seemed to pass over his face.
“I hope not,” he said, and strode away.
They drove back to the mansion in silence.
The gates swung open; the Ferrari purred down the long drive.
When they reached the house, Alex turned off the engine, stepped
from the car, opened Maria’s door and thought what an amazing
woman she was.
Bright. Talented. Strong.
And lovely.
Incredibly lovely, in the moonlight.
She would be even more lovely in his bed.
Naked. Her eyes on his as he undressed. Her arms reaching
for him as he came to her and she would reach for him, he
would find a way to make her admit how much she wanted
him—and yet, at this moment, what he wanted most was to kiss
away the worried furrow between her eyes, the sad little downcurve
of her mouth.
He held out his hand. “We’re home,” he said softly.
She nodded, took his hand and stepped from the car.
“Your father will probably sendmeback to the States tomorrow.”
Alex smiled. “No danger of that,” he said as they walked to
the door. “He’s trapped. My mother, clever woman that she is,
reminded him that the world will be watching when she celebrates
her birthday.”
“Don’t try and make it sound as if I didn’t behave foolishly!”
“The word I’d use is ‘bravely.’”
“I don’t know what got into me. It’s just—”
“What got into you,” he said, turning her to him, “was all that
fiery passion you do your best to hide.”
“I don’t hide anything. I just—”
SANDRA MARTON 115
“And you do a pretty good job of it—until something comes
along and heats your blood.” He opened the door to the
sleeping house, then turned toward her again and caught a
cluster of silky curls in his fingers. “Tonight, it was the ridiculous
behavior of a king.”
“No. I mean, I only—”
“And your dedication to your art.”
“That’s—that’s nice of you to say, but I made everyone uncomfortable——”
“And me.” His voice roughened. He cupped the nape of her
neck, slipped his fingers into her hair and tilted her face to his.
“I heat your blood, agapimeni. As you heat mine.”
He bent his head and kissed her. It was a gentle kiss, the soft
whisper of his lips over hers, but it made him groan.
“Maria,” he said softly, and he felt her tremble. “Maria,” he
said again, and her arms rose, wound around his neck; she lifted
herself to him, sighed his name and when he kissed her again he
went deep. Deeper, letting the taste of her fill his senses, the feel
of her feed his soul…
And he knew, without question, that he could not, would not
hold her to the devil’s bargain they’d made.
Gently, he cupped her face and drew back. Her eyes opened
slowly; she looked up at him, her pupils dark and wide and
blurred with desire or perhaps with tears. It killed him that he
couldn’t tell the difference.
“It’s late,” he said. “Too late to discuss this tonight.” His gaze
fell to her lips. He longed to kiss her again but he wouldn’t. He
wouldn’t. He wouldn’t. “Can you find your way to your
bedroom alone?”
“But I thought— You said—”
“I know what I said.” He drew a ragged breath and then, to
hell with it, he kissed her. “I’m not a saint, Maria,” he whispered
against her mouth, “but it turns out that I’m not quite the bastard
we both thought.”
A sound that might have been a sob broke from her throat. “I
don’t understand, Alexandros. What is it you want from me?”
116 BILLIONAIRE PRINCE, PREGNANT MISTRESS
He shook his head, left her standing alone as he headed out
into the night.
He didn’t know what he wanted from her.
And that was the whole damned problem.
SANDRA MARTON 117
CHAPTER NINE
WHAT did a man do when he was obviously losing his sanity?
It had to be that because he sure as hell wasn’t into martyrdom,
Alex thought as he paced through the dark garden. Maybe
he deserved a medal. Better still, maybe he should get his head
checked by a shrink because right now, right now, instead of
burning with frustration, he could be bedding the woman he’d
brought across an ocean for expressly that purpose.
Maria had been his. His for the taking.
And he’d walked away.
“Idiot,” he said, kicking a stone out of the path.
Walked away, and for what reason? She’d been as ready for
sex as he was. She wasn’t an innocent. Nothing he’d have done
would have shocked her.
Alex glared at the house where a light still burned in his
bedroom window. He could be in the house, in that room in less
than a minute.
Forget it.
He’d made his decision. For tonight, anyway. Going back
would be an admission of weakness, never mind that he didn’t
really know what in hell he meant by that, except that he knew
it would be.
He needed sex, not Maria. That put things in perspective.
He was aroused. No problem. There were ways to deal with
it. Phone one of the numbers programmed into his cell phone.
SANDRA MARTON 119
There were half a dozen beautiful women who’d jump at the
chance to spend the night with him. Or he could drive back into
town. The bar at The Grand Hotel saw more than its share of
gorgeous women, tourists hoping for a little adventure.
Except, he didn’t want another woman, and wasn’t that a
laugh? He wanted Maria and he’d just walked away from her.
Alex kicked another stone and headed for his Ferrari.
He roared out of the gates, took the coast road at a speed that
sent him flying past the few startled drivers on the road at this
late hour. When he reached the point at which the already
narrow, winding road grew more treacherous, he floored the gas
pedal and the car careered through the turns like the thoroughbred
it was.
Maybe that would burn away the hunger thrumming
through his blood.
It didn’t.
Two hours later, he pulled through the gates of the mansion
again and skidded to a stop with Maria still in his head.
Images. Memories. Tastes and scents, all of them conspiring
against him. The softness of her skin. The honey of her mouth.
The texture of her uptilted nipples on his tongue. The scent of
her desire.
She was there, in his brain, and nothing could dislodge her.
Well, yeah. One thing could.
His body hardened like a fist.
Having her would do it. Stripping off her clothes. Baring her
body to his eyes. To his hands. His mouth. Clasping her wrists,
holding them high over her head so she had no choice but to let
him touch her everywhere until she wept with wanting him.
Then he’d sink into her. Deep, deep into her. He’d move
inside her until she screamed his name, until she came and
came and came…
A growl of anger, of desire, of something close to lunacy rose
in his throat. He crossed his hands on the steering wheel and
slammed his forehead against them. After a few minutes, he
stepped from the car and entered the house.
It was quiet. Dark. The furniture cast ominous black shadows
against the walls.
Alex’s mouth thinned as he stood in the entry foyer and stared
up at the second floor landing.
He was no knight in shining armor. He was a man who had
grown up in a world of privilege, a man who could have what he
wanted when he wanted it. Especially women. The more beautiful
they were, the more famous, the more they threw themselves
at his feet. They begged for his possession. Preened to ready
themselves for his taking, not like Maria who asked nothing of
him and had packed a suitcase full of jeans to wear in her role
as his mistress.
She looked beautiful in jeans.
And in that dress tonight, those sexy shoes, stuff he’d ordered
over the phone just figuring anything the color of emeralds would
be perfect against her dark hair and eyes…
When she’d opened that door, when he saw her… God, he’d
wanted to push her back inside the room, tumble her on the bed,
make love to her until she had no choice but to admit she’d
dreamed of this, ached for this, that she wanted him, only him…
He swung away from the staircase, marched through the silent
house to his study, poured himself a shot of brandy, slugged it
down and did what he’d been doing hours ago in the garden,
paced and paced and paced.
A sto diavolo! The hell with it! He was weary of the game. It
was time to end it.
He took the stairs two at a time, went down the hall, stopped
before the door to his bedroom, raised his fist to knock… Knock?
At his own damned door? Bad enough he’d showered and
dressed in his study, that he’d spent the last couple of hours
driving aimlessly through the night. He cursed, ripely and creatively,
grabbed the knob and turned it, ready to break the damned
door down if he had to.
It opened easily.
Maria wasn’t there. The emerald dress was crumpled on a
chair, the black stilettos were on the floor next to it.
120 BILLIONAIRE PRINCE, PREGNANT MISTRESS
The bed was untouched.
His anger vanished. Fear took its place.Wherewas she? Had she
left? Not likely. She’d have had to phone for a taxi, and a cabwould
not have been able to clear the gates without alerting Security.
What, then? Had she gone for a walk ? Alex’s mouth tightened.
She wouldn’t have done that, would she? Not at night. Not
when she didn’t know the complex layout of the gardens, the
density of the surrounding trees.
The way some of the pathways ended at vistas at the very edge
of the cliff.
No, he thought, forcing aside the ugly possibility. If she were
wandering the grounds, motion detectors would have picked her
up. Then where…?
The guesthouse!
Alex pounded down the stairs and out the door, walking fast,
running, really, his anger back and hotter than ever. Did she
think she could escape him? That he’d let her sleep there rather
than in his bed, where she belonged? Yes. There was a faint light
shining in the guesthouse window.
“Damn it, Maria,” he growled as he flung open the door, “if
you think I’m going to go on being a Boy Scout…”
The furious words died on his tongue.
She was huddled in a window seat, illuminated by the flickering
glow of candlelight. She wore jeans and an oversized
sweatshirt, her feet were tucked up under her and when she heard
his voice, she swung toward him, face pale, eyes huge and
stricken and glittering with tears.
“I’m sorry,” she said in a broken whisper. “I’m sorry for everything,
Alexandros. I should never have come here. I know
what I agreed to but I can’t do it, I can’t, I can’t.”
By then, he’d crossed the space between them and gathered
her into his arms.
“Don’t,” she said.
He ignored the plea, whispered to her in Greek the way he
might have whispered to a terrified child. He stroked her hair,
rocked her against him and she began to sob.
SANDRA MARTON 121
“I know I agreed to—to be your mistress, but I can’t do it.
Even if it means losing the commission. I can’t. I can’t. I really
thought I could but—”
“No. Of course, you can’t.” He drew her into his lap. “Shh,
glyka mou. I won’t hurt you. I could never hurt you. Please,
don’t cry.”
“I didn’t know who you were that night, Alexandros. I swear
it. I went with you because—because…I can’t explain it. I’d
never done anything like that before. I’d never even—I’d never
even—” She drew a ragged breath. “I know you won’t believe
me but—but I’d never been with a man before.”
Ah, dear Lord!
The sweet, sad little confession made him feel like a bastard—
and filled him with joy. He did believe her; the truth was, he’d
known it, deep within himself, all along. His beautiful Maria had
given him her innocence. Hell, he had taken it from her. And, of
course, she had not known who he was.
She was incapable of that kind of subterfuge.
Why hadn’t he believed her? How could he have been so
stupid? How could he have judged her by what he knew of other
women, the ones who’d tried to trap him with their lies? There
had been so many of them, starting with the Greek girl who’d
broken his heart when they’d both been kids. He’d been sure he
loved her and when she wept and trembled and told him he’d
stolen her virginity, he’d been ready to marry her—until he’d
caught her laughing with her friends at his gullibility. The Italian
debutante who said she’d die in sin if he didn’t take her as his
wife, except it turned out she’d already slept with half the young
princes in Europe. The German supermodel who’d accused him
of making her pregnant. Wiser than in the past, he’d demanded
a paternity test—and had not heard from her again.
But Maria was nothing like that. She was—she was Maria,
sweet and smart and brave, and he’d put her through hell.
“I’ll recommend someone good, someone excellent to take
my place making the necklace,” she said in a low voice . “You
can let him use my design—I owe your mother that—but—”
122 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Alex stopped the flow of words with a soft kiss.
“You owe no one anything, glyka mou. And why would I let
someone take your place?” Smiling, he thumbed a strand of
dark hair from her brow. “There is no one who could replace you,
sweetheart. Like your design, you are one of a kind.”
“But I just told you, I can’t—”
“Maria.” He framed her face with his hands. “I’m setting you
free of our agreement. You’ll stay here, create a necklace the
entire world will admire—but not because we’ve made love.” He
took a deep breath. “I want you, kardia mou. I want you so much
it hurts. But I would never take something you would not willingly
give.” His mouth twisted. “I did that to you once, and I will
never forgive myself for—”
She put her fingers lightly over his mouth.
“I gave myself to you that night, Alex. I wanted you.” She
swallowed, ran the tip of her tongue over her bottom lip. “I
want you now.”
Could a woman’s soft words make the universe tilt? “Sweetheart.
Do you know what you’re saying?”
She gave a watery little laugh. “I know exactly what I’m
saying. That’s why I can’t stay here. I want you, despite what you
think of me, and isn’t that terrible? To admit something that—
that strips me of what little pride I have left—”
He kissed her. “Hush,” he whispered.
“It’s the truth. If I had any pride, I wouldn’t have come to
Aristo with you. I wouldn’t have said I’d sleep with you.
Because—because it wasn’t only the commission, Alex, it was
being with you…”
He kissed her again. He meant the kiss to be gentle and that
was how it began but somehow her lips parted under his. The tip
of her tongue slipped into his mouth. And when she wound her
arms around his neck and dragged his face down to hers, he
reached blindly for one final bit of sanity.
“Maria,” he said against her mouth, “sweetheart, be sure. Be
very sure—”
“I’ve never been more sure of anything in my life.”
SANDRA MARTON 123
Alex groaned, swept her into his arms and carried her through
the moonlight to the bed.
This bed was not like his.
It was smaller. Simpler. It had been made from a centuriesold
olive tree and was covered in white cotton loomed in a nearby
village. It had an intrinsic, natural beauty all its own.
It was, Alex thought as he lay Maria across it, beautiful in the
same way as she, with a quiet strength and an elegance that came
from within.
“Alexandros,” she sighed, and raised her arms to him.
He went into her embrace and kissed her.
Two months ago, a lifetime ago, they had made love fiercely.
He had all but torn off her clothes in his frenzy to bury himself
inside her.
That had been sex.
Now…now, it was something more.
He kissed her again and again, until her lips were as soft as
rose petals and clung hungrily to his. He framed her face,
threaded his fingers into her hair, kissed her throat, nipped at the
tender flesh at the juncture of neck and shoulder and when she
moaned with pleasure, he could have sworn he felt his heart lift
in his chest.
Slowly, he sat her up. Drew her sweatshirt over her head and
discovered, to his delight, that she wore nothing beneath it or the
jeans that he tossed aside.
Naked, she was a moon-kissed offering to the gods.
Beautiful. Perfect. Exquisitely feminine.
Slowly, so slowly, his eyes on hers, he stroked the contours
of her body. Her breasts. Her belly. Her thighs. She sighed and
moaned and made the kinds of little sounds that told him, as much
as the sensual lift of her hips, that what hewas doing pleased her.
Still, he had to ask.
“Do you like this?” he whispered, sucking a beaded nipple
deep into the heat of his mouth. “This?” he said, kissing his way
from breast to belly. “This?” he said softly, dropping a kiss on
the soft curls at the juncture of her thighs.
124 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Alexandros,” she said, “oh God, Alexandros…”
Gently, he parted her thighs. Put his hands under her bottom.
Lifted her to him, put his mouth to the delicate cleft of her flesh,
found her with his mouth, his tongue, and her scream of joy shattered
the night.
It was almost too much for him.
He was so close to the edge. All these weeks of wanting her.
And, though it seemed crazy, all the years ofwanting her, as well.
“Alexandros,” she whispered, and he kissed her mouth, her
throat and knew that he, like Paris when he stole Helen centuries
before, had not been able to obey the rules of the civilized
world. This was what he had wanted, this woman, this lover, and
he had done whatever it took to have her.
He would have given everything for this, the honeyed taste of
her mouth. This, the sweetness of her nipples. This, the indentation
of her navel. This, the curve of her hips.
This, he thought, just this, holding her, tasting her, watching
her face as he caressed her. As he again parted the delicate petals
that protected her clitoris.
He kissed her there again. Licked her until she came again.
This time, when she cried out, she reached for him.
“Please, Alexandros,” she said, “please. Come into me.”
Quickly, he tore off his clothes. Came back to her, swore,
reached for his discarded jacket, dug into the inside pocket and
prayed he’d find a condom. He did, and he tore the little packet
open, rolled the condom on. He’d forgotten to use one the first time
he’d made love to her; he’d been too hungry, too out of control.
He was almost out of control now. That was what happened
to him, when he was with her.
He moved up her body, took her in his arms, kissed her, let
her taste the proof of their passion in his kiss. Her hands were
on him now, cool against his skin. She stroked her palms along
his shoulders, his chest, down his belly and when one hand
moved lower and almost closed around his hard length, his breath
hissed between his teeth.
“Maria,” he said in a warning whisper. “Maria, glyka mou…”
SANDRA MARTON 125
126 BILLIONAIRE PRINCE, PREGNANT MISTRESS
She caressed him anyway, her hand moving, moving up and
down over his swollen sex, and he groaned, caught her hand and
stilled it and knew he could wait no longer.
“Look at me, agapi mou.Watch me as I make you mine.”
Her lashes lifted. Her eyes met his. He clasped both her hands.
Laced their fingers together. Held their hands to the sides and
thrust into her.
She came instantly, her body arching to his, her cries of
abandon rising into the night and still he eased forward. Deeper.
Deeper until there was no way to know where he began and she
ended, until their flesh, their souls, were one.
“Maria,” he said, “Maria, kardia mou, agapi mou…”
She wept and kissed his mouth, and as the muscles of her
womb contracted rhythmically around him, Alexandros threw
back his head and emptied himself into the sweet warmth of the
woman who now belonged to him.
To me, he thought fiercely. Only to me.
CHAPTER TEN
FOR a long moment, the world stood still.
Alex’s powerful body was sprawled over Maria’s, his face
buried in her throat, their hearts still racing, skin damp with the
commingled sweat of their passion. The night breeze, drifting
across them from the still-open door, was chill. But when Alex
began to ease away, Maria tightened her arms around him.
“Don’t go,” she murmured, and felt his lips curve in a smile.
“I’m not going very far.”
He reached for the throw at the foot of the bed, wrapped it
around them, rolled to his side and gathered her close in his arms.
“Are you all right?”
It was her turn to smile. “Yes.”
“You sure?””
“Very sure. I’m fine. I’m perfect. I’m—”
“Yes,” he said, laughing softly as he kissed her, “you are.”
Tenderly, he brushed back the tangled curls on her forehead.
“Forgive me, agapi mou.”
“For what?”
“For not making love to you this way the first time.”
She shook her head, lay her hand against his cheek. “That first
time was wonderful.”
A very male smile lit his face. “Thank you. But you were a
virgin. I should have gone slower.”
“You didn’t know.”
128 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“I should have.” He turned his face into her hand and kissed
the palm. “There was such a sweetness to you, glyka mou. Such
an innocence. The way you touched me. Responded to me.” His
hand slipped down her body, cupping her breast, then the curve
of her hip. “I’ve relived those moments a hundred times,” he said
huskily. “The feel of you.Your little cries. The way you blushed
when I undressed you.” His mouth twisted. “The way I ruined it
all with my terrible accusations.”
Maria put a finger over his lips. “Didn’t some wise man once
say that the past is best left in the past?”
Alex drew her fingertip into the heat of his mouth. “Do you
forgive me?”
“Forgive you for what?” she said, with a little smile. “I don’t
know what you’re talking about, Alexandros.”
His eyes darkened. “I love how you say my name.”
“Alexandros,” she sighed, “Alexandros, Alexandros,
Alexandros…”
Just that—the sound of her voice, the feel of her against him—
and he felt himself turning hard. “Maria,” he said, “my Maria,”
and then he was inside her again, deep inside her, and the night
enfolded them in its magical embrace.
Just before sunrise, when the grass glittered with dew, they
dressed and made their way to the house.
“Someone will see us,” Maria hissed as Alex drew her inside.
“Who could possibly see us?”
“Spoken like a true potentate,” she said, laughing up at him.
“What aboutAthenia? The cook? The maids? The rest of the staff?”
Alex swung her into his arms and carried her to his room.
“The souls of discretion, I promise.”
Well, of course. They would be. Maria’s smile dimmed just
a little. No point in being foolish about this. Other women would
have slept in Alex’s bed…
“No.”
She looked up. Alex was watching her and smiling.
“No, what?”
SANDRA MARTON 129
“No other women, sweetheart. Not here.” He could see that
she was surprised. And pleased. Crazy as it seemed, so was he.
He set her on her feet, gently pushed her back against the
closed bedroom door and framed her face with his hands. “Just
you. Which means,” he said solemnly, but with a glint of
laughter in his eyes, “we’re going to have to celebrate the
occasion. Initiate my bed properly.” He bent his head, brushed
her lips with his. “Champagne. Candles. Rose petals. How
does that sound?”
Could he feel her heart racing? Could he possibly know what
was in that racing heart, the emotions that she had spent the past
two months, the past two days trying her best to deny?
“It sounds wonderful.” She moved, just a little, enough so she
was pressed against him. “But won’t it take an awfully long time
to get all those things together?”
She saw the change sweep through him. The narrowed mouth.
The tic of a muscle in his jaw. The hint of exciting male passion
that seemed to make the beautiful structure of his face even more
pronounced.
“Maria,” he said thickly, “Dear God, Maria…”
They didn’t make it to the bed. Not then. But they did the next
time, and the next, where they made love until the Aristan sun
blazed bright and hot in the perfect blue of the sky.
When he awoke, the space beside him was empty. He sat up, the
covers falling to his waist.
“Maria?” Naked, he padded to the bathroom. The door was
locked; he heard the sound of running water and then nothing.
“Maria?” he said again, and knocked.
“I’m fine,” she called, but the weak sound of her voice was
evidence of the lie. His heart turned over. She’d been sick before,
sick again, and now… “Maria? Open the door. Please.”
There was a silence. Then he heard the lock turn. The door
swung open and he saw his Maria, standing at the sink with a
toothbrush in her hand, looking at him in the mirror. She smiled,
but her face was pale and sweaty.
“Kardia mou,” Alex said urgently, stepping behind her and
encircling her with his arms, “were you ill again?”
She nodded. “A little.”
“Maria, this has happened too often.”
“It’s just flu, Alexandros,” she said, forcing another smile.
“New York’s loaded with it.”
“This is not flu. I had flu last winter. Andreas had it, too. With
flu you’re sick and then you get better. But you—you’re not
getting better.”
“I am. Much better.”
“I will take you to my doctor.”
“Don’t be silly.”
“He will examine you, glyka mou, and prescribe an antibiotic.”
“Antibiotics don’t work against viruses, and flu is a virus.”
“Such logic,” Alex said, trying to sound angry when what he
felt was fear. She was so pale, her eyes so dark… “Come here,”
he said, and turned her and drew her close. “I don’t want you to
be sick, sweetheart. Let me take care of you.”
“I’m fine. Honestly.”
“Thee mou, you’re a stubborn woman! Very well. No doctor.”
He swung her up in his arms. “At least, come back to bed and
rest for a little while.”
He carried her to the bed and lay down with her in his arms.
Kissed her tenderly. Stroked her back. And, inevitably, as he held
her, as his body heated hers, as she burrowed against him, tenderness
gave way to desire.
“Are you sure you’re okay?” he whispered as he touched her.
“Shall I stop?”
“Don’t stop,” she whispered back, “don’t ever stop.”
And he didn’t.
She was gone again, the next time he awoke.
A knot of apprehension formed in his belly but the bathroom
door stood open and the room was empty.
He showered quickly, pulled on jeans, a white T-shirt and
mocs, and went downstairs. He could hear the radio playing
130 BILLIONAIRE PRINCE, PREGNANT MISTRESS
softly in the kitchen, turned to Athenia’s favorite music station.
She smiled at him.
“Kalimera, sir.”
“Have you seen Miss Santos?”
“Oh, yes, perhaps an hour ago. She had coffee and—”
“She was all right?”
His housekeeper raised her eyebrows. “Fine, sir. She went to
the guesthouse. To her workshop, I mean.”
The workshop. Alex ran a hand through his hair. “Of course,”
he said sheepishly.
He found her there, perched on a high stool at a workbench.
She was wearing jeans and a blue chambray shirt with the
sleeves rolled up. She’d pulled her hair back in a ponytail; her
feet were bare, one on the rung of the stool, one on the floor.
She was bent over a sketchpad, intensity in every line of her
body, and humming something he couldn’t identify other than
to be sure the tune was almost painfully off-key.
He smiled, came up behind her quietly and slipped his arms
around her.
“Kalimera, kardoula mou,” he said softly, and kissed the nape
of her neck.
She sank back against him, her head against his shoulder, her
hands covering his.
“Kalimera, Alexandros,” she said, and turned her face to his
for a kiss.
“Mmm,” he said. She tasted wonderful, of coffee and of
herself. “I missed you.”
She laughed. “I’m glad to hear it.”
Alex grinned and turned her in his arms. “Then, why were you
in such a hurry to leave my bed?”
“Oh, I wasn’t in a hurry at all!” She blushed. “I mean—”
“Such a nice compliment, glyka mou. No need to explain it
away.”
Maria linked her hands behind his neck. “I woke up and
thought of a small change I want to make in your mother’s
necklace. Nothing that will alter the design,” she said hastily,
SANDRA MARTON 131
“just a modification in the way I planned to position the central
stone. I promise, she’ll still like it.”
“She’ll love it, Maria. She thinks the design, your work, all
the pictures you sent, are brilliant.”
Her face glowed with pleasure. “I’m so glad, Alexandros! This
commission means the world to me.”
His gaze fell to her lips. “What else means the world to you?”
he said huskily.
His hands slid under her shirt, cupped her breasts. Her
breath caught; he watched her eyes turn from hazel to coffeebrown
to ink-black.
“This,” she said, covering his hands with hers, “oh, this,
this, this…”
He carried her to the bed. And as he came down beside her
and kissed her, as they undressed each other, as she kissed his
mouth, his throat, his chest, his belly and, at last, touched the tip
of her tongue to the silk-over-steel power of his erection, she
knew that what she’d just told him was only partly true.
This—touching him, kissing him, sharing his passion—did
mean the world, but only because—because…
Because she loved him.
They had brunch, what Athenia referred to as a kolatsio, a
snack, on a terrace overlooking the water. Thick, sweet Greek
coffee. Olives. Feta cheese. Slices of warm, delicious bread and
a tray of sweet cheese pastries that Alex said were called
kalitsounia kritis.
They should have been called heavenly. The pastries were delicious
and decadent and surely fattening but Maria didn’t care.
She would not worry about anything this morning, not when life
was so perfect. Even the day was perfect. Bright. Sunny. Warm.
Unusual for the time of year, Alexandros said, and nothing like
the weather they’d left behind in New York.
The truth was, nothing was like what she’d left in New York.
Not this beautiful place. And not this wonderful, gorgeous, sexy,
strong, funny, caring, intelligent man.
132 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Now, Maria, Sister Sarah would have cautioned, that’s far too
many adjectives.
Yes, Maria thought, but Sister had never met Alex.
He was seated across from her, talking about his house. He
loved it; she could see that in his animated face. He was proud
of it; she could hear that in his voice. How did you come to find
such a perfect house? she’d asked, and he’d said, with a boyish
grin, that he hadn’t found it, he’d built it.
And he had.
He’d worked along with the architect. With the builder. With
the carpenters. He’d wanted a house that blended into its surroundings,
that was spare and strong and unique.
“Like these cliffs,” he said.
Like you, she thought.
He told her that he’d lived in the palace until he’d gone away
to boarding school and then university, and, though he loved its
history and elegance, it had never felt like home. So, once he had
his MBA, he’d bought a condo in Ellos and another in New
York. Then, one weekend at the family compound overlooking
the turbulent waters that separated Aristo and Calista, the Strait
of Poseidon that Kitty had mentioned at dinner, it had suddenly
hit him that what he wanted was a place of his own, overlooking
the sea.
“I’d always loved driving along these cliffs so it seemed
natural to call a friend, a realtor, inquire about property, then
bring another friend, an architect, to see what he might suggest,
and—” Alex laughed. “Look at you, kardoula mou. Your beautiful
eyes are glazing over, thanks to my endless talk about
myself.” He reached for her hands, lifted them to his lips and
kissed them. “What I really want to talk about is you.”
She smiled. “My life isn’t anywhere near as interesting. And
my eyes aren’t glazing over. I love learning things about you,
Alexandros.”
She did. Oh, she did! She’d gone from hating him to loving
him in what seemed a heartbeat but the truth was, she’d fallen in
love with him that first terrible night.
SANDRA MARTON 133
“Still, I won’t say another word until you tell me about
Maria Santos.”
“It’s a dull— Hey,” she said, laughing as Alex, in one fast
move, rose from his chair, tugged her into his arms and settled
into his chair again but this time with her in his lap.
“Okay, then,” he said, “I’ll tell you about her. Maria Santos
was born twenty-five years ago. She was the most beautiful baby
anyone had ever seen.”
Maria began to laugh. “Alex, that’s silly!”
“What?” he said, his eyes round with innocence. “You mean,
you’re not twenty-five? What are you, then? Forty-five? Fiftyfive?
My God, you can’t be sixty—”
“I was not the most beautiful baby anyone had ever seen.”
“I’ll bet you were.”
“I was premature. Tiny. Skinny. Almost bald.”
“Beautiful,” Alex said, grinning, “just as I said.”
Maria rolled her eyes. “You’re crazy, Alexandros.”
“Crazy about you,” he said softly.
Could your heart really sing? She’d never heard such thrilling
words. Her prince. Her lover. HerAlexandroswas crazy about her.
“And I want to know all about you.”
That was wonderful, too. No one had ever wanted to know all
about her, not once in her entire life. Smiling, she pressed her
lips lightly to his.
“Okay,” she said softly, “here’s the entire, unexciting tale. I
was born in the Bronx. I went to school in the Bronx. Public elementary
and middle schools, and high school at Saint Mary’s.
Then I went to college in—”
“The Bronx?” Alex said, and smiled.
“You guessed it. Lehman College. I studied—”
“Art.”
She sighed and lay her head against his shoulder. “I studied
business. Mama’s idea, and I hated it. When everybody was
studying Word and Excel, I sketched. Back then, before I discovered
I loved working with metal and stones, I thought I wanted
to design clothes. Anyway, I stuck it out for a year. Then I did
134 BILLIONAIRE PRINCE, PREGNANT MISTRESS
what I had to do. I worked up a portfolio, arranged for an interview
at FIT—the Fashion Institute of Technology. They accepted
me, I made all the arrangements for a student loan.” She took a
breath. “Then I broke the news to Mama. I told her how hard it
was to get into FIT, I showed her my portfolio, and she said—”
“She said you had amazing talent, and that you’d be the
next—who’s that New York designer? Donna Karan?”
Maria smiled, but her smile trembled. “She said I was a
foolish girl with silly dreams.”
Alex’s arms tightened around her. “Ah, sweetheart, I’m sorry.
I should have figured…I mean, the other night—”
“No, it’s okay. Maybe it’ll help you understand why—why
she acted the way she did when you met her.” She took a deep
breath. “See, my mother never finished high school. She went to
work when she was sixteen, operating a sewing machine in the
garment center. She was determined I would not do the same,
and I couldn’t make her see that I wouldn’t end up that way.”
“And your father?”
“What about him?” she said, with a nonchalance as transparent
as glass. “He owned the company where Mama worked. He
was rich. He had a house on Long Island. He had a big car.” She
cleared her throat. “He also had a wife and kids.”
“And your poor mother had no idea…” Alex said tightly.
“She had every idea.” Maria’s voice turned brittle. “He said
he’d leave his wife and marry her—but, of course, he didn’t. And
then, when she told him she was pregnant with me, he said she
was lying. When he realized it was the truth, he gave her some
money. For an abortion, he said. But she didn’t have an abortion,
she had me instead, and he said that had been her decision, a bad
decision, and then he fired her and she never saw him again.”
Alex had gone very still. Maria bit back a groan. Whatever
had possessed her to tell him all that? She could have just told
him the first part. School. College. FIT. But the rest…Why had
she unloaded that sad, dumb story on him? She never talked
about her life. Never. Joaquin knew, but they’d grown up together.
Sela knew, but she was her best friend. No one else knew that
SANDRA MARTON 135
she was a bastard and yes, that was the right word. It was an oldfashioned
word in lots of places but in Maria’s world, the world
her mother had created and in which she had raised her, the word
still carried the smear of disgrace and dishonor.
Stupid, she told herself fiercely, how incredibly stupid, to tell
such ugly things to a man who might as well have been born and
raised on another planet.
“Well,” she said brightly, “so much for Tales from the Bronx.”
She sat forward in Alex’s lap. “This has been a lovely break,
Alex, but I have to get to work and—”
“Has he never tried to see you?”
“Who?” she said, even more brightly. “Oh, my father? No.
Why would he? I didn’t need anything from him. I wouldn’t take
anything, even if he—”
“How could a man turn his back on the woman who carried
his child? On the child herself?”
“Well, I don’t know, but—”
Alex turned her face to his, cupped it with his hands and
kissed her.
“You’re a strong, brave woman, kardia mou,” he said softly.
“And I am honored to have become your lover.”
They fell into an easy pattern, like lovers who had been together
a long time.
Not that what happened in bed lost its excitement.
It couldn’t, not when the sight of Alex coming toward her sent
Maria’s pulse skittering, not when Maria’s smile was enough to
fill Alex with such hunger that there were times he had to turn
away to keep from sweeping her into his arms and making love
to her wherever they happened to be.
He didn’t always turn away.
He made love to her in the workshop. In the garden. In the
back of the limo with the privacy screen up, bringing her to
climax with his hand high under her skirt, his mouth hot on hers.
And he made love to her in bed. The demure bed in the workshop;
the big, beautiful one in his room. They made love, and talked
136 BILLIONAIRE PRINCE, PREGNANT MISTRESS
and laughed, and worked—she in her workshop, he in his study
at the house. And they discovered all the things they needed to
know about each other.
Maria no longer felt ill. The early morning nausea was a thing
of the past. There were times she still felt exhausted but flu often
left you feeling tired; everyone said so.
The only dark moments came when she remembered that her
days with Alex were slipping away. The necklace was almost
finished, the big birthday celebration loomed on the horizon. A
week passed, then another, and the final week of her stay began.
When it ended, there would be nothing to keep her here.
Unless Alex asked her to stay. And she, who had spent her
life avoiding relationships, who had never imagined repeating
her mother’s foolish involvement with a man who was all
wrong for her…
She knew she would stay, if Alexandros asked her.
But he didn’t. Why would he? How would he? He was a
prince while she—she was a girl born into illegitimacy and raised
in poverty. She could have a place in Alex’s bed but she would
never have one in his life.
So she concentrated on completing the necklace until, finally,
she had only to set one of the fabulous pink stones in its center,
but she had to see the Crown of Aristo before she could do that.
The king kept making appointments for that to happen, then
cancelling them.
On a rainy afternoon just days before the queen’s birthday
party, Maria decided this couldn’t go on. Alex had a meeting in
Ellos. After he was gone, she phoned the palace, left a polite
message with Aegeus’s personal secretary. She had to see the
crown today, she said, or the queen’s gift might not be as perfect
as the king and she both wished.
She hung up the phone and was suddenly overwhelmed by
nausea. It took her by surprise. Apparently, she wasn’t over the
flu quite yet.
She barely made it to the bathroom, where shewas horribly sick.
When the spasms finally ended, she flushed the toilet, brushed
SANDRA MARTON 137
138 BILLIONAIRE PRINCE, PREGNANT MISTRESS
her teeth, rinsed her mouth and started for the bedroom when a
shocking wave of vertigo swept over her.
Maria stumbled and fell against the door jamb. The collision
wasn’t particularly hard but the impact was painful and hurt her
breasts. They’d grown so tender lately; even making love with
Alex, there were times the touch of his mouth on her nipples
came close to being painful…
Oh God!
Tender breasts. Nausea that seemed to have no basis. And, she
thought, biting back a moan, and a period that had not come
in…in, what? Two months? Three?
“No,” she whispered, “please, please, no…”
The phone rang. She tried to ignore it but the ringing went on
and on…
“Hello?”
It was the king’s secretary. She would be permitted to see the
crown an hour from now.
“I can’t,” Maria said, trembling as she counted back, again and
again, to the last time she’d menstruated. “How about this afternoon?
Or this evening?”
“One hour, Ms. Santos,” a commanding voice barked through
the phone, “or not at all.”
It was the king himself, and she knew he meant it.
“I’ll be there, Your Majesty,” she whispered.
She—and the illegitimate royal baby she now realized lay
cradled in her womb.
CHAPTER ELEVEN
MARIA showered quickly and dried her hair while trying not to
think about anything but the meeting with the king…
Impossible, she thought as she dropped onto the edge of the bed.
How could she be pregnant? Alex had used condoms every
time they’d made love.Well, not the very first time, almost three
months ago. Things had happened so quickly that night…
After, he’d said, “You have the right to know that I have no
diseases,” and she, embarrassed by the conversation, had thought
of telling him that she couldn’t possibly have any because she’d
never been with a man until him, but it had been easier to say
that she had none, either.
“I assume you’re on the pill,” he’d added.
Well, of course, shewasn’t. But it had been the safe time of her
cycle so she’d just nodded instead of answering and left it at that.
Maria groaned and buried her face in her hands. She thought
of all the times she’d silently wondered how her mother could
have made so many devastating mistakes. Now, she knew one
answer was that making mistakes when you were swept away
by passion was pathetically easy.
Andall the signs she’d ignored! Nausea.Wooziness. Exhaustion.
Not getting her period. That should have been the most damning
evidence of all, but she’d never been completely regular…
Maybe you didn’t see what you didn’t want to see. Maybe it
was just that simple.
140 BILLIONAIRE PRINCE, PREGNANT MISTRESS
She wanted to weep. To scream. To bang her fists against
the wall. That she, of all women, should have tumbled into the
age-old trap…
She knotted her hands in her lap. Took deep, calming breaths.
Hysteriawouldn’t change anything. Besides, therewas no time for
this now. The necklace. The summons from the king. Those things
came first. She had responsibilities. To the queen. To herself.
She dressed quickly. Black trousers, a black cashmere sweater
and, over it, a pale pink jacket. Black heels. Alex had followed
his gift of the emerald silk dress with what seemed like an endless
wardrobe, ordered from the pricey designer boutiques in Ellos
and delivered to the mansion.
“I can’t let you buy me things like this,” she’d protested, and
he’d kissed her to silence.
“I love giving you gifts, agapi mou,” he’d said, and because
she’d known he meant it, because nothing had turned out as she’d
anticipated and instead of only being in Alex’s bed she was also
in his life, she’d accepted the clothes and wore them when they
went out to dinner, to the theater, to the casino.
Now, the rack of expensive outfits in the dressing room—his
dressing room—was a mocking reminder that these were not
simply gifts, they were proof she was his mistress.
And mistresses did not get pregnant. They did not have babies.
They did not forge real, lasting relationships that led to a joint
future, especially with a man like Alex. A prince of the Royal
House of Karedes…
“Stop it,” she said sharply, and blanked her mind to everything
but the meeting with King Aegeus. She had worked years for this
kind of professional honor.
Right now, that was all that mattered.
Weeks before,Alex had arranged for his limo to be at her disposal.
“Don’t trust me to drive, hmm?” she’d said, laughing.
“Not on these roads, glyka mou,” he’d said, and she’d admitted
that was for the best. A born and bred New Yorker, she’d learned
to drive but she didn’t do it often or well.
SANDRA MARTON 141
Todaywould most certainly not have been a day to test her skill.
The driver had apparently been told where to take her. He
drove through the palace gates to a rear courtyard where an
equerry greeted her and led her through a maze of corridors to a
half-opened door in a gloomy alcove.
“Ms. Santos, sir.”
The king was seated at a small table, a velvet drawstring bag
before him. A chair was drawn up opposite his. Maria blinked.
Were these the royal vaults? She’d expected something different.
Bright lights. Security cameras. Guards. Not a small, plain,
ill-lit room.
“Your Majesty,” she began, but Aegeus cut her off with an imperious
wave. Another wave dismissed the equerry. Aegeus
pointed at the other chair.
“Ms. Santos. Sit down.”
His tone was hard, a direct contrast to his looks. She was surprised
by his pallor and the throb of a vein in his forehead.
“Are you—are you all right, sir?”
Aegeus glared at her. “Are you a physician as well as my
son’s mistress? Oh, don’t look so shocked, Ms. Santos. I’m not
a fool. I am aware of everything that happens in my kingdom.”
“Then you are aware that I’m here as the designer of Queen
Tia’s birthday gift, sir, nothing else.”
She knew she’d overstepped the boundary between commoner
and king but the last thing she would let happen today was a discussion
of her relationship with Alex.
To her surprise,Aegeus laughed. “I can understand Alex’s infatuation.
A woman with beauty and intelligence and spirit…”
His smile tilted. “What man could resist such temptation?”
Maria drew a deep breath. “Your Majesty. The crown…”
Aegeus pushed the velvet bag into the center of the table but
kept his hand protectively on it.
“Normally, it is kept in a display case along with the Crown
Jewels and, of course, the original Crown of Adamas.”
“Yes, sir. To tell the truth, I’m surprised that—”
“Your surprise does not interest me, Ms. Santos. I’ve arranged
to meet you here so we could keep things as simple and private
as possible.” He raised his wrist, pointedly looked at his watch
and then at her. “Five minutes. Then your time is up.”
Maria nodded and reached for the bag. The vein in the king’s
forehead seemed to leap as he lifted his hand and sat back.
She loosened the drawstring and lifted the Crown of Aristo
from it.
Her breath caught. The crown was magnificent.
Brilliant white diamonds shone like star fire even in the dim
light. Yes, she thought happily, yes, they’d match the ones in the
necklace perfectly, but it was the fantastic center stone that
dazzled the eye. The half of the pure pink Stefani diamond King
Christos had bequeathed to his son, Aegeus, and to the kingdom
of Aristo, dominated the crown.
“Beautiful,” Maria said softly.
Aegeus nodded. “Yes,” he said brusquely, and reached for the
crown.
“Wait,” Maria said quickly, pulling it back.
He looked up. The vein in his forehead looked even darker
than before. “You forget yourself, Ms. Santos.”
“I meant…Wait. Please, Your Majesty.”
“For what? You’ve seen what you came to see.”
“Iwant a closer look at the pink diamond, sir.To check its shade
against…” Maria took a small silk bag from the leather tote she
always carried when handling gems. She opened it, and the pair
of pink diamonds, one of which would become the centerpiece of
Tia’s necklace, tumbled onto the table. “To check it against these.”
The king hardly looked at the stones. “Either will match. The
colors are the same.”
Maria shook her head. “Actually, they’re not.”
“Of course they are. And your five minutes are—”
But Maria had stopped listening. A trickle of ice water seemed
to slip down her spine. She looked at the single light bulb in its
overhead socket.
“Is there…?” She cleared her throat. “Is there a way to get
more light in this room, sir?”
“No.”
142 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Surely we could take the crown into the display room?”
“Surely we could not,” Aegeus said coldly. “And I repeat, your
time is— What are you doing?”
Maria’s hands were trembling but she tried to stay calm. She
put the pair of pink diamonds back in their bag, put the bag in
her tote and took out a small flashlight and a jeweler’s loupe.
Quickly, she put the loupe to her eye and turned on the flashlight.
“Ms. Santos!” The king’s voice was sharp. “The Aristan
diamond is priceless. I do not want you poking at it and picking
at it and—”
“It’s a fake!” Her words seemed to explode in the confines of
the small room. She looked up, horrified. “This half of the Stefani
diamond. What’s supposed to be the Stefani diamond. It isn’t a
diamond at all.”
The king’s already pale face went paper-white. He shot to his
feet. “Give me the crown!”
“Sir. The stone is a fake. Cubic zirconium. Or something else.
It’s an excellent forgery but…” God, she was shaking like a
woman with a high fever! “Your Majesty. I have some tools in
my workshop. I can do some tests but I am sure—”
“Give me the crown!”Aegeus roared. He snatched it from her
and stuffed it into the velvet bag, but suddenly his eyes grewwide
and his face lost what little color it had.A strangled sound broke
from his throat; he clapped his hand to his heart, the bag fell on
the table and the king tumbled back into his chair.
Maria leaped to her feet, ran to the door and flung it open.
“Help!” she shouted. “Please, someone help!The king’s collapsed!”
At once, the seemingly empty corridor swarmed with people.
Maria fell back against the wall. Someone scooped everything
from the table—the loupe, the flashlight and the velvet bag—
dumped them into her leather tote, thrust the tote at her, then
grasped her arm, hurried her out of the palace and to Alex’s
waiting limousine.
It wasn’t until she was back at the guesthouse that she realized
the crown of Aristo had gone home with her.
* * *
SANDRA MARTON 143
What did you do when you had absconded with a royal crown?
Maria sat at herworkbench, staring blindly at the crown as she
tried to come to grips with all that had happened today. The
wrenching realization that she was pregnant. The horrifying discovery
that the half of the Stefani diamond in the Aristan crown
was not a diamond at all and then, the king’s collapse.
Was Aegeus dead? Had her news killed him?
She’d phoned the palace. Useless. She had the private telephone
number of the queen’s personal secretary but reached only
her voice mail. Desperate for diversion, she’d filled the time
running tests on the pink stone in the crown, praying all the
while that her initial judgment had been wrong.
She’d done a dozen tests, everything from the silly—did the
stone fog when she blew on it?—to the absolutely, completely
scientific.
She’d used an electronic tool called a diamond tester. She’d
brought it out last, as if by holding off she could avoid the truth.
The tester had been one of the things she’d brought with her from
NewYork; she hadn’t even been aware she had it with her until now.
The thing was a complex piece of equipment but it was simple
to operate. Turn it on, touch the probe at one end of it to a stone.
If the stonewas a real diamond, a green light came on. If itwasn’t…
If it wasn’t, nothing happened.
Nothing had happened, half a dozen times.
Maybe the tester wasn’t working. That had been her hope.
So she’d touched the probe to every white diamond in the
crown. To the diamonds in Tia’s almost-completed necklace. To
the two big pink stones she’d taken to the palace.
The green light blinked on each time.
Then she’d touched it to the pink stone in the Aristan crown.
Please, she’d prayed, please let the green light come on.
It didn’t.
The stone was a brilliant, beautiful fake. It would fool
anybody. Anybody but an expert.
Still, maybe she was wrong. Maybe she’d missed something.
144 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Was there a test she’d forgotten? Anything was possible, she told
herself, and reached for the phone.
Far across the ocean, Joaquin answered on the first ring.
“Maria,” he said happily, on hearing her voice. “¿Como se va?
Sela was just saying—”
“Joaquin. I need your help.”
He was not a GG—a Graduate Gemologist—as she was. The
degree had cost her a small fortune; shewas still carrying the debt.
But his depth and breadth of knowledge was excellent, and she
knewshe could trust him with this devastating news. She told him
what she’d discovered. Described the tests she’d run. Their conversation
grew complex, touched on things like heating, magnification,
trigons and dodecahedral surfaces of octahedral crystal
formations and then, finally, she took a deep breath and told him
she’d used a diamond tester.And the stone had failed that final test.
“You’re sure the tester is working properly?”
“I checked the battery. And it gave a green light, literally, to
a couple of dozen diamonds, pink and white.”
“But not this one.”
“No,” Maria said, “not this one.”
Joaquin’s sigh drifted through the telephone. “I don’t envy you,
chica.You are about to be the bearer of very bad news for someone.”
She gave a sad little laugh. “I’m afraid I already am.”
“Call me if you need me. Sela says to tell you she can do
without me for a few days. We both love you, you know that.”
She smiled. “Doing without you, even for a few days, is impossible.
I love you, too, Joaquin. With all my—”
“How cozy.”
Maria spun around. Alexandros stood in the doorway, arms
folded, legs apart, face stony and cold.
“Alexandros! I didn’t hear you come in.”
“No. Obviously not. Don’t let me interrupt you, Maria. Not
when you’re in the middle of an obviously important call.”
She said a quick “goodbye” to Joaquin and hung up the phone.
Then she slid from the stool and went to her lover. He didn’tmove.
Didn’t smile. Didn’t react at all when she put her hand on his arm.
SANDRA MARTON 145
“Your father—”
“I know all about my father.”
“Is he—is he—”
“He’s in the hospital. He had a heart attack.” Alex’s mouth
narrowed. “Thanks to you.”
“I never meant—”
“What did you say to him? Did you perhaps tell him you were
sleeping with me even though you miss your lover in NewYork?”
His mouth twisted. “No. Why would you do that when you’ve
been so careful to hide that information from me?”
“Alexandros. Listen to me. I don’t have—”
“Liar!” He caught her by the shoulders, his hands rough on
her tender flesh, and drewher to her toes, just as he had after their
first night together. “It’s the same man you were talking to that
morning three months ago.” When she said nothing, his face
contorted. “Answer me, damn you! Admit it.”
“I was talking with Joaquin, yes. But—”
“Can’t you do without him for another few days?”
“Alexandros.” Her voice broke. “You’re wrong about him.”
“I was wrong about you, you mean.”
“I told you, Joaquin works for me. He’s married.”
“What would that matter to a woman like you?”
Maria felt the insult like a knife to the heart. She jerked free
of his hands, her face white, eyes glittering with tears.
“I don’t deserve that,” she whispered.
Yes, he thought, she did. She deserved that and more. He had
taken her to his bed. Held her in his arms as she slept. Awakened
her with his kisses. He had shared his life with her these past weeks.
Fool that he was, he’d come to—to care for her. To want her more
than he’d ever wanted anything or anyone in his entire life.
He’d even imagined—he’d stupidly imagined he might keep
her with him after her work here was over.
He turned away. Composed himself. She was just another
woman. More beautiful, perhaps. More intelligent. More fun. In
the end, though, she was the same as all the others. She was with
him because of who he was. Because of the power he wielded.
146 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Because hewas a prince, not a man. He had to remember that.
She was his mistress, bought and paid for. She was not his
lover; she was not in his bed of her own free will but because he
had demanded her presence there.
He took a breath and looked at her. “What did you say to my
father?” His voice was cold. “He was fine at the start of his
meeting with you.”
“He wasn’t. He looked ill.”
“Answer the question.What did you do to make him collapse?”
Maria stared at Alex. He was looking at her as he had not done
in weeks, as if he were an autocrat and she were his to command.
His expression radiated scorn—and maybe she deserved it. She’d
slept with a man who’d made it clear he wanted her sexually, not
any other way.
And she’d fallen in love with him.
Wasn’t she repeating a pattern for which she’d vilified her
mother—up to and including the shame of becoming pregnant?
God. Oh, God! How had she let this happen? And what would
she do next? End the pregnancy? Have the baby? Raise it, alone,
as her mother had raised her? Because it was only in fairy tales
that the handsome prince married the beautiful commoner and
lived with her happily ever after.
“I’m waiting, Maria.”
She wrapped her arms around herself. Lifted her chin. Forced
herself to meet Alex’s steely gaze without flinching.
“I told him something about the Aristan crown.”
“And?”
“And, it upset him. I’m sorry for that but I was—I was
shocked myself and I just blurted it out—”
“Blurted out what? I’m not in the mood for games, Maria.”
Maria swallowed dryly. Her lover was a prince of the house
of Karedes. He had to know the truth.
“I told him—I told him the half of the Stefani diamond in the
crown wasn’t real.”
For a long moment, nothing happened. Then Alex laughed.
The sound startled her.
SANDRA MARTON 147
“You told the king that a stone that is beyond price wasn’t
real?” His laughter ended as quickly as it had begun. “And he
called you, what? A liar? A fool? An idiot? Or all three?”
“It isn’t real,” Maria said quietly. “It’s an excellent fake—but
a fake, nevertheless.”
Alex’s face darkened. “He should have had you thrown out
for spouting such nonsense!”
“Listen to me, Alex.”
“No, glyka mou, you listen to me! I don’t know what you
thought to accomplish with such a lie but—”
“The stone’s counterfeit!” Maria grabbed the crown from the
workbench along with a stack of papers and shoved all of it into
his hands. “Here’s the crown.”
“You took it out of the palace?—”
“I didn’t plan to take it but… Never mind the details. Look at
my notes. I ran endless tests. That’s why I phoned Joaquin, to see
if maybe, just maybe therewas something I missed. Therewasn’t.
The Aristan pink diamond isn’t a diamond at all!”
Alex stared at her. Then he began leafing through the papers,
quickly at first and then, as he began to absorb what she’d written,
more and more slowly. He stared at the crown. At the papers.
Finally, he looked up.
“I don’t understand. Who would have done this? And how?
The crown’s been in the vault for years.”
Maria spread her hands. “I have no answers. I only know the
diamond is a fake.”
Alex put down the papers and the crown, and ran a hand
through his hair. “You’re sure? There’s no possibility of error?”
“I’m a Graduate Gemologist,” she said softly. “I’ve appraised
lots and lots of diamonds. I even did some work with an insurance
company that involved fraud and a diamond that would
have been worth millions, had it been real.” She paused. “I
phoned Joaquin because he’s knowledgeable. And completely
trustworthy.”
Alex’s mouth thinned. “I’ll just bet he is.”
“Damn it, stop being a fool! I phoned him that morning in
148 BILLIONAIRE PRINCE, PREGNANT MISTRESS
your apartment to tell him I thought I had a good shot at winning
the competition because I knew how much it mattered to him
and his wife. And I called him now to pick his brain. He’s not
my lover. He never has been. He’s married to my best friend and
he’s my friend, too. I can trust him to keep quiet about this—or
am I wrong, thinking you don’t want the citizens of Aristo
learning the truth about the diamond from the front pages of the
world’s newspapers?”
A muscle flickered in Alex’s jaw. She was right about the need
for discretion. The diamond was priceless, not only as a stone
but as a symbol. No Aristan ruler could ever be crowned without
it. There was also his grandfather’s pronouncement, what
everyone called King Christos’s Legacy, the pledge that both
halves of the Stefani diamond would have to be joined together
in the crown of Adamas if ever the two kingdoms, Calista and
Aristo, were to be reunited.
And then, he thought, looking at Maria, then there was
Maria herself.
Maria, who had brought him the kind of joy he’d never
expected to find. What he’d told himself a little while ago was a
lie. She’d come to Aristo because he’d forced her to do so, yes,
but that was in the past. She was here now because it was what
they both wanted. He couldn’t imagine ending the day without
sharing a few quiet moments with her as they stood in each
other’s arms, watching the sun set over his beloved island.
Couldn’t imagine opening his eyes in the morning and not
finding her in his arms again.
As for Joaquin… He’d seen his Maria with him but, really, what
had he seen?A man putting his arms around a woman.A kiss, but
were either the embrace or the kiss those of lovers? Had she lifted
her face to Joaquin as she lifted hers to him? Had she drawn
Joaquin’s head down to hers? Had anything about that kiss held
the heat, the power of what happened between his Maria and him?
God, hewas a fool.Accusing her of things he knew, in his heart,
were not true. Things she would never do. He had to tell her what
she’d come to mean to him, that he didn’twant her to leave him…
SANDRA MARTON 149
“I only wish,” she said brokenly, “I just wish I’d broken the
news to your father differently. Perhaps, if I had—”
“It’s all right, glyka mou.”
“No. It isn’t. I upset him. His heart—”
“His heart is undamaged. He’s at the hospital, yes, but he’s
awake and alert.”
“Thank God,” she said, and then she began to weep.
“Ah, sweetheart.”Alex gathered her into his arms. “Don’t cry.”
She wept harder, her face pressed against his shoulder. He
could feel her tears dampening his shirt.
“Forgive me for blaming you for what happened. Discovering
the stone is fake must have been terrible.”
Maria lifted her face to his. “It was horrible. Horrible, Alexandros!
I couldn’t believe it. That was why I called Joaquin—”
“I spoke before I thought,” he said gruffly, framing her face
between his hands. “An old failing, I’m afraid. Ask my brothers.
Or my sisters.” He smiled. “They’ll tell you the same thing. I hear
something, I get upset, I react.” He clasped her chin, lifted her
mouth to his and kissed her. “Will you forgive me?”
Their eyes met, his dark with anguish, hers bright with tears.
Would she forgive him? How could she do anything else? She
loved this man with all her heart. He had been through an awful
shock about his father. She could grant him some leeway,
couldn’t she?
And she carried his child.
She had to tell him. She knew she did. They had created this
tiny life together. No matter what the consequences, Alexandros
had the right to know. She was not her mother and he was not a
clone of her father.
“Maria? Please, sweetheart, say you’ll forgive me.”
“You know I will,” she said softly, smiling through her tears.
Alex let out a long breath. “Glyka mou.We must talk.About us.”
“Yes. We do.”
“But not now.” He held her closer. “The next days are going
to be hectic. I’ll have to tell my family about the Stefani diamond.
150 BILLIONAIRE PRINCE, PREGNANT MISTRESS
We’ll have to meet with the council and decide how to handle
this. And there’s my mother’s birthday…”
“Can you postpone the celebration?”
“My father has already said it must go on as scheduled.”
“But if he’s ill…”
“This is a national celebration, sweetheart. Royal responsibility
to the people comes before everything else.” He frowned. “And
nowthat I knowthis about the diamond, Iwonder ifmyfather isn’t
concerned that his illness should not seem too important.You see,
if something should happen to him, if a new king had to be
crowned… That could not happen unless the real diamond were
found and placed in the crown. Do you understand?”
Maria nodded. Like most little girls, she’d loved fairy tales.
Now she knew, first-hand, that real kings and queens and princes
and princesses did not live such easy lives.
That fairy tales didn’t always end happily, she thought, and a
shudder went through her.
“What is it, agapoula mou?”
“Nothing,” she said quickly. “Just—I’m just thinking of how
busy everyone will be the next few days.”
“We’ll manage. I, especially, because I’ll have you beside me.”
Alex bent to her and kissed her. Whispered soft words against
her lips. Her arms crept around his neck. Now, she told herself.
Never mind that there’s no time for real talking. Let him ask you
to stay with him, and you can tell him about the baby—
His cell phone rang. He blanched as he grabbed it from his
pocket.
“Ne?” he said brusquely.
But it wasn’t the hospital, it was Andreas. The conversation
was brief. When it ended, Alex drew her against him.
“I can’t stay, sweetheart. I must meet with Sebastian and
Andreas. There are many things to discuss, and now is as good
a time as any to tell them about the diamond.”
She nodded. “Tell them, too, how sorry I am.”
“You have nothing to be sorry for, glyka mou.” His lips curved
in a smile. “But if you feel you must show contrition for some
SANDRA MARTON 151
152 BILLIONAIRE PRINCE, PREGNANT MISTRESS
imagined misdeed, I’ll consider letting you find creative ways
to do so later on.”
She laughed and kissed him, and when he whispered something
that made her blush, she kissed him again.
“Tonight,” she promised.
He gathered up the papers and the Aristan crown; he put his
arm around her as they walked to the door.
“Tonight,” he said softly.
But one night became another and then another. The mystery
of the diamond, the king’s illness, the birthday celebration on the
horizon… Alex was caught up in the politics of the palace.
There was no time for anything else.
CHAPTER TWELVE
THE day of the queen’s birthday celebration was an anomaly.
It was winter, when cool winds and rain often lashed Aristo,
but this day dawned bright and warm.
Alex hardly noticed.Hehad not been home since he’d left Maria
in the guesthouse. He’d returned the crown to the display case in
the vault and, ever since, he’d been closeted with his brothers.
They were trying to come up with answers. Where was the
missing diamond?Whohad stolen it?When?Howcould the switch
have gone unnoticed? Where did they start searching for the real
stone? Most pressing of all, how could they keep it all a secret?
And it had to be a secret. They could not permit word to get
out that the stone was gone.
On the simplest level, news like that would be humiliating.
Far more unsettling were the possible political consequences.
What if a Calistan sheikh somehow gained control of the
diamond? Could he then twist the true meaning of King
Christos’s legacy, join the Aristan stone to the one in the Crown
of Calista, and claim the right to rule both kingdoms?
It was a real possibility, one that might well destroy Aristo.
Hemissed Maria terribly. Her smile. Her quiet strength.The feel
of her in his arms.Hephoned her whenever he could: even the sound
of her soft voice was an oasis of calm in the middle of a storm.
“I miss you, glyka mou,” he told her softly.
She missed him, too. Terribly. But she understood that he was
154 BILLIONAIRE PRINCE, PREGNANT MISTRESS
needed at the palace. Sometimes, she could forget her lover was
a prince. Now, she couldn’t escape it. So, rather than burden him
with her own feelings, she did what she thought was right. She
said she missed him, too, but she was busy.
“Even if you were here,Alexandros, I couldn’t spend time with
you. I have last-minute work to do on your mother’s necklace.”
“Oh,” he said, just that one word, but he sounded disappointed.
She almost told him she was lying, that she missed him
so badly she ached, that if he came through the door she’d toss
everything aside and run into his arms…
But the last thing he needed now was a clinging female. Her
Alex, along with Sebastian and Andreas, were like jugglers
trying to keep a dozen balls in the air. Elissa had just arrived
home. She and Kitty were busy helping their mother get ready
for the party.
The king had come home from the hospital against the advice
of his doctors. The heart attack had not done any damage, true,
but they wanted other tests. Nonsense, said Aegeus. There were
affairs of state to deal with. Tia’s birthday. All the media attention
the celebration had brought. Scores of foreign dignitaries.
“I am fine,” he insisted.
Was he? The brothers thought their father looked ill.
“Actually,” Sebastian said, “he looks like hell.”
It was an accurate assessment. The king was pale. He seemed
to have shrunk in size and there was a constant sheen of sweat
on his forehead. And why did he never mention the missing
diamond? That seemed strangest of all.
“If we can just get through the celebration tonight…” Alex
said, and they all agreed. Get through tonight and then they could
institute a real if subtle search for the missing stone.
Alex was going home to shower and change. “We’ll have
half an hour alone, sweetheart,” he said when he phoned Maria,
“but we can make the most of that half hour.” He told her how
they’d do that, in explicit detail, and she gave a sexy little sigh
and said she’d be waiting.
Smiling, he flipped his cell phone shut. He needed that thirty
SANDRA MARTON 155
minutes, not just to make love to her but to tell her what he’d started
to tell her three days ago. What he should have told her weeks ago.
He didn’t want her to leave him.
Once she gave the necklace to the king, once the king presented
it to the queen, Maria would go back to New York.
He could not imagine letting that happen.
They were at the start of their relationship, not the end. In the
last month, she had become part of him. She was—she was everything
to him. Sometimes, when he held her close, he wanted
to tell her—to tell her—
“Alex?” Andreas was hurrying toward him. “Change in plans.
Last-minute stuff. Sebastian’s meeting with that guy from the
BBC, I’m going to talk to CNN. Kitty’s doing a piece with The New
York Times. Lissa was going to deal with Newsweek but Mother
needs her, something about the flowers. Can you take her spot?”
Alex looked at his watch. “I have to get home, Andreas.”
“You mean,” his brother said, smiling, “youwant to see Maria.”
“No, of course not. It’s just that my tux is at home…” Alex
sighed. “You’re right. I do.”
“Well, you’ll see her soon enough. The party starts in a couple
of hours. Let your driver pick up your tux, okay? If you don’t take
over for Lissa, we’ll be up the creek without a paddle.”
Alex hesitated, but what choice was there? He couldn’t walk
away from his duty, no matter what his own needs. He hoped
Maria would understand.
She did more than understand. She said that it was just as well,
she still had to do her nails and her hair. He said fine, he was glad
it had all worked out, but he was lying.
What he’dwanted her to saywas that she’d been longing for him.
That it was agony to know they would not have half an hour alone.
Hehad noway of knowing that Mariawas lying, too. She’d been
counting the hours untilAlex came to her, but she couldn’t tell him
that. She needed the feel of his arms around her.And then therewas
her pregnancy. She had to find the right time to tell him about it.
But when?
He was, after all, a man with all the responsibilities of a life
completely different from hers. He might see her as an exciting
lover but that was all she was, all she ever could be…
Her throat tightened.
Maybe she wouldn’t tell him about the baby. Not just yet,
anyway.
Not until the time was right.
The evening started with a flourish.
A dozen royal heralds played a trumpet fanfare at the top of
the marble steps that led into the huge ballroom. A velvet curtain
at the far end was drawn back and the queen swept in on the
king’s arm. The hundreds of guests smiled and applauded her
arrival. Every eye was on the radiant Tia.
Every eye but Alex’s.
He was waiting at the opposite end of the enormous room,
waiting and watching for Maria. Where was she?
“Alexandros,” a voice whispered, and he turned and there she
was, standing behind him, so gorgeous in a silk gown the color
of fine sherry, her dark hair tumbling down her back in a profusion
ofwaves and curls accented with tiny ruby and diamond stars
he’d had sent to her, that the sight of her almost stopped his heart.
He didn’t think, didn’t hesitate but took her hands, drew her
through the crowd and out to the terrace, took her in his arms and
kissed her.
She melted against him.
“Maria,” he said softly, “kardoula mou, you are the most
beautiful woman in the world.”
Her mouth curved against his. “And you, my prince, are the
most handsome man on the planet.”
He kissed her again. “I hoped you’d be here before the celebration
started.”
“The car,” she said, on a little laugh. “We had a flat tire. Don’t
let on that you know, Alex. Poor Alastor felt awful.”
“As he should,” Alex said, but he smiled. “Never mind.
You’re here now. That’s what matters. Did you give the necklace
to my father?”
156 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Maria nodded. “He seemed pleased with it. He said he’ll
give it to your mother at midnight.” She hesitated. “Is he all
right? He looks—”
“Terrible. I know. We tried to convince him to cancel but he
refused.” Alex gathered her closer against him. “Let’s not talk
about that,” he said softly. “Not when I have something important
to discuss with you.”
Now was the time to say that she did, too.
“Maria.” Gently, he brushed a curl from her forehead. “I know
you’re supposed to… I mean, I know we agreed you would…”
Alex groaned. “I’m making a mess of this, glyka mou. What I’m
trying to say is—”
“Your Highness! Prince Alexandros!”
An equerry was running toward them. Alex knew, before the
man said another word, that the news was of his father.
“The king?”
The equerry nodded. “He’s been taken ill, sir.”
Alex ran into the ballroom. Maria hiked up her skirt and ran
at his side.
“Where is he?”
“The throne room, sir. There’s a helicopter on its way. Your
Highness?” The equerry, running with them, caught Alex by the
sleeve just before they reached the throne room. The simple
actionwas so unprecedented that it startled even Maria. “The king
wishes to see Ms. Santos.” He swallowed audibly. “Alone.”
“Me?” Maria said, in amazement. “That can’t be.”
The Karedes family was gathered outside the closed doors of
the throne room, faces white and puzzled. When Maria hesitated,
the queen motioned her forward.
“My husband wants to see you, Ms. Santos.” Tia bit her lip.
“Please. I don’t think there’s time to waste.”
“Go on,” Alex said softly, and touched his hand to her cheek.
The doors closed behind her with an audible click.
This was Maria’s first visit to the throne room. It was not as
big as she’d imagined, the size, perhaps, of half her loft, but it
SANDRA MARTON 157
was elegant. A red carpet stretched toward a pair of ornate chairs
that stood on a raised platform but the chairs—presumably, the
thrones—were empty.
“Here,” a weak voice said.
The king was alone. He lay on a crimson velvet sofa, head
elevated on a blue silk pillow.
Maria moved slowly toward him. Her heart thumped. He’s
dying, she thought, and, as if he’d read her mind, Aegeus struggled
up against the pillow.
“I am not dead yet, Ms. Santos. Come forward.”
“Your Majesty. Your family is outside. Surely, you want to see
them—”
“You were not supposed to learn that the diamond in the
crown is false.”
Maria caught her breath. “You knew?”
The king’s face contorted. He groaned and Maria swung
toward the door to call for help but Aegeus’s fingers wrapped
around her wrist with the steely grip of command.
“My son is in love with you.”
She stared at him. “What?”
“Alexandros loves you, Ms. Santos. I’m not sure he knows it
yet, but he does.” He drew a rasping breath. “But you must not
return that love.”
Maria shook her head. “Your Majesty. Please. You’re very
sick—”
“All the more reason for you to pay attention to what I say,”
he said, a touch of the old sharpness edging hiswords. “You must
understand that there is no room in a royal’s life for love.”
“Sir. This is hardly the time—”
“A prince is not born to his mother or father, Ms. Santos, he
is born to his nation and his people. His life, from birth, is one
of responsibility. Commitment. Obligation.” Aegeus took another
labored breath. “Someday, my sons will marry. They will marry
young women born of blood as royal as theirs, young women
who understand what is expected of them.”
Maria sank to her knees beside the sofa. She could feel the
158 BILLIONAIRE PRINCE, PREGNANT MISTRESS
sting of tears in her eyes and she blinked furiously to keep them
from falling.
“I love your son,” she whispered. “And I understand he has
responsibilities. I can help him shoulder them. I can step back
when I must.”
“If you truly love him, you will give him up.”
“No. No! You can’t ask that of me. Or of him. If Alexandros
loves me—”
“His duty is to his people. To his mother. To me. A prince who
falls in love with the wrong woman can only destroy her. He can
only destroy his nation and himself. Maria. If you love my son
as you say you do, you will leave him. And you will not tell him
the reason. Alexandros must never know you love him, or that
you gave him up because you love him. You must walk away
from him, from his life, and never look back.”
Tears streamed down Maria’s face.
“You ask too much of me,” she said. “You have no right!”
“I love my country and my people. And though you may not
think so, I love my children.” The king took a long, agonizing
breath. “Alex thinks you willmake him happy but youwon’t, Maria.
Your love can only hurt him.You must, you must, set him free.”
“Your Majesty—”
The king jerked upright. His hand went to his throat; his
breath rattled though a mouth gone wide, gasping for air.
Maria sprang to her feet.
“Help,” she shouted.
“Maria,” Aegeus whispered hoarsely.
“Someone, help—”
The door swung open. Footsteps clattered against the marble
floor. And, as they did, Aegeus grabbed Maria’s hand again.
“Promise me,” he said fiercely. “Swear that you will do what
you know you must.”
Weeping, Maria stared at the king’s stricken face—and knew
he was right. She could not share Alexandros’s life. He was a
prince and she—she was nobody.
“I swear,” she said.
SANDRA MARTON 159
160 BILLIONAIRE PRINCE, PREGNANT MISTRESS
A smile pulled Aegeus’s lips back from his teeth—and then he
fell back against the pillows. His family surrounded him.The queen
sank to the floor beside him, took his hand and began to weep.
“He’s gone,” she said, “he’s gone!”
Alex gently drew her to her feet. Sebastian put his arm around
her. Andreas touched her shoulder. Kitty and Lissa bent over their
father and sobbed.
And Maria did the only thing she could. The thing Aegeus had
asked of her. The promise she had made him that she knew, in
her heart of hearts, was right.
She slipped from the room, from the palace.
From Alexandros’s life.
CHAPTER THIRTEEN
A MONARCH’S death left behind a void that must be filled quickly
for the safety and stability of the kingdom and its people.
At first, all was confusion.
Despite Aegeus’s illness, his death had been sudden. The
king’s private physicians tried every possible means to revive him
but to no avail. The Karedes family clustered around the king’s
lifeless body; the palace, filled with guests for the queen’s
birthday celebration, buzzed with rumors. Andreas comforted his
sisters. Sebastian, who as eldest son would, within hours, be
named the Prince Regent, was immediately surrounded by guards
whose duty it was to protect him, especially in times of turmoil.
Alex held his mother in his arms.
Through it all—the loss of his father, his mother’s tears, his
sister’s sobs, the stunned reactions of his brothers and his own
shock—through all that, Alex found himself looking over the
heads of those who’d crowded into the room. Where was Maria?
He needed her. And, surely, she needed him. She’d been alone
with his father at the moment of his death.
She needed his comfort. His arms.And he, God, he needed her.
A reporter and a couple of photographers had somehow
slipped into the room; two of the guards were hustling them out.
Had those guards, in error, forced Maria aside?
He was desperate to find her but Tia was distraught. He
couldn’t leave her, not until she was calmer. He told himself not
162 BILLIONAIRE PRINCE, PREGNANT MISTRESS
to worry. His Maria was smart. She was resourceful. She’d find
his car, have his driver take her home. Or she’d wait for him in
a quiet corner of the palace.
Soon, he’d be alone with her. And he’d tell her what he now
knew had been in his heart for weeks. He loved her. He adored
her. He could not imagine life without her.
He didn’t just want her to stay here, on Aristo, as his lover.
He wanted her to become his wife.
One thing about death, he thought as he led his mother from
the room. It had a profound way of making a man see what
really mattered.
And what mattered, the only thing that mattered, was Maria.
In the face of a nation’s grief and loss, tradition became its solace.
Aegeus would lie in state for three days. The Accession
Council would meet to formally name Sebastian the Prince
Regent, though by tradition coupled with the decades-old decree
of Christos, there could be no coronation of him as king until the
missing half of the Stefani diamond was returned to the Aristan
crown. The Privy Council would meet, too, so its members could
certify the succession declaration.
Andreas took on the coordination of those meetings.
Sebastian immersed himself in policy conferences. It fell to
Alex to finalize plans for the royal funeral. And yet, as he raced
home just before dawn, his thoughts were not on any of those
things. He was consumed by worries over something far more
important.
Maria.
She hadn’t beenwaiting for him in the palace, not in the public
rooms or in the royal apartments. His driver was waiting, in the
courtyard, and in response toAlex’s questions the man could only
shake his head and say that he had not seen Ms. Santos.
Alex checked his cell phone. Again. He’d already done that
a dozen times but maybe, now, she’d left a message… She hadn’t.
He’d phoned her endlessly and been connected to her voice mail,
where he’d gone from leaving messages telling her he would
SANDRA MARTON 163
break away as soon as he possibly could to increasingly terse
ones asking her to contact him.
By the time he reached the house on the bay, he was frantic.
“Maria?” he shouted as he burst through the door. “Maria?”
No answer. He ran up the stairs to his bedroom, flung open
the door. The room was dark. Empty.
“Maria,” he said again, and flew down the stairs, almost stumbling
over Athenia who stood at the bottom wearing a housecoat,
her hair in curlers.
“Your Highness. Our hearts are filled with grief. We are all
so sorry for you—”
“Yes. Thank you. Where is Ms. Santos?”
Athenia bit her lip. Shook her head. Alex cursed in frustration—
and then breathed a sigh of relief. He knew where Maria
would be. In the guesthouse. He knew her habits. She was
probably losing herself in work.
But the guesthouse, Maria’s workshop, stood as silent and
empty as his bedroom. Something about that silence made his
heart rise in his throat. He ran back to the main house, took the
steps two at a time, flung open the bedroom door, this time
switched on the light…
And knew, instantly, that Maria was gone.
The room felt cold. Not just empty but barren, as if the very life
had been stripped from it. He went to the dressing room, stepped
inside. Her suitcase was gone. The beautiful clothes he’d bought
her hung from the racks like mournful reminders of the past.
“Maria,” Alex said, bewildered. What the hell had happened?
Where was his Maria? He turned in a slow circle—and saw the
envelope propped on the bed. “Alex,” it said, and that it didn’t
say Alexandros was a statement in itself.
He picked it up. Opened it.Withdrew the note inside and read
it. It was brief. She was, she said, terribly sorry for his loss.
Though she’d only met his father a handful of times, she’d come
to respect him. She’d wanted to tell him that herself but…
The “but” made Alex’s belly knot.
But, she wrote, she knew that the king’s death meant Alex
would be immersed in the duties of a prince. She saw no reason to
burden him with concern for her, especially since she was returning
to NewYork anyway, nowthat her duties here were completed.
Her duties here.
He looked up, his face a mask of disbelief.Was that what it had
been? Had sleeping with him been part of her duties?Was leaving
him such a relief that she couldn’t have waited to say goodbye?
He read the note again. And again. Then he let out a roar of
anguished rage from a place in his soul he’d never known existed,
and tore the note into a dozen pieces.
A state funeral was not a simple thing.
Fortunately, plans for events like this had always existed.
Except for the addition of a motorcade, those plans had not
changed much since the time of the Crusades.
Aegeus lay in state for three days while his people, friends,
relatives and foreign heads of state all paid their respects.
The Sheikh King Zakari Al’Farisi represented the island of
Calista.
Zakari, a proud and ruthless man, made all the appropriate
comments to the press; he offered Tia his polite condolences.
In private talks with the Karedes princes, however, Zakari’s
words were probing as well as troubling.
He seemed to know that Aristo’s half of the Stefani diamond
was missing.
Though Alex, Andreas and Sebastian had met with their
council and agreed the mystery had to be kept secret until it was
solved, that decision was—as Andreas wryly put it—pretty much
the equivalent of shutting the stable door after the horse had
been stolen.
Clearly, the news had reached Calista. And that was dangerous.
Since Sebastian could not be crowned without the true
diamond, Alex’s worry—that it might fall into the wrong hands
and a Calistan prince could take the Aristan throne—seemed
more and more plausible.
Added to concerns of state were those of family. Lissa and
164 BILLIONAIRE PRINCE, PREGNANT MISTRESS
Kitty took their father’s death hard and clung to Andreas. Tia,
shocked by her loss, claimed Alex for solace and support.
Sebastian, now the Prince Regent, was, by custom, designated
to lead them all through the necessary formalities.
Alex had no time to think, or told himself he had no time for
it. But at night, when the hands of his watch seemed to slow to a
crawl, he lay awake in his palace rooms, despising Maria, despising
himself, telling himself what a fool he’d been to have imagined
himself in love with her because he certainly had not loved her.
Of course, he hadn’t.
He counted down the days until the formalities of mourning
would end. He had work to do, investors to meet with and
reassure that nothing would change on Aristo. He was also fully
involved in organizing the search for the missing diamond. Once
the mourning period was behind him, he’d be far too busy to
think about Maria Santos.
A lie.
Life slowly returned to normal. He was busy from early
morning until late at night.And he thought about her all the time.
What he needed was closure, to tell her, to her face, that she
had meant nothing more to him than he had obviously meant to
her, but that would mean seeking her out and he wasn’t about to
lower himself to that.
Strangely, no one in his family asked about Maria until one
morning, when his mother phoned and invited him to breakfast.
He was incredibly busy that day but he knew Tia’s grief was still
new; nothing would have made him refuse her request.
They chatted briefly about nothing special—and then, without
warning, Tia asked why Maria had gone.
“Why wouldn’t she?” Alex said, with a shrug. “She finished
your necklace. Her work was over.”
“I’m not talking about her work,” Tia said. “I’m talking about
the feelings you and she have for each other.”
“You’re wrong, Mother. We had no—”
“Alex. I’m your mother. I’m also a woman. I know love when
I see it. Maria and you were in love. So, why did you let her go?”
SANDRA MARTON 165
Alex thought of half a dozen answers, all of which would have
worked—and, instead, found himself speaking the truth.
“I didn’t,” he said in a low voice. “She left me. She enjoyed—
she enjoyed our time together but—”
“Nonsense. She loves you. I saw it. Everyone saw it.”
“The hell she did!” Alex shot to his feet. “She left the night
Father died. What was I supposed to do? Go after her? Walk out
on my duties to try and convince her not to leave me?”
“Your duties,” Tia said softly. “Yes. Such things always get
in the way.” She looked up at him. “Had you ever told her you
loved her?”
His mouth thinned. “No.”
“Perhaps,” she said carefully, “perhaps you should have.”
Yes, Alex thought, he should have. He’d known the truth, in
his heart. Why hadn’t he faced it sooner? Now it was too late.
“It’s never too late,” his mother said, and he realized he’d
spoken aloud. “Alexandros. Love is a precious gift. Don’t
throw it away.”
“How do you know that, Mother? I know you respected Father
but I don’t believe you truly loved him.” Alex drew a ragged
breath. “Hell,” he said softly, “I’m sorry. I shouldn’t have—”
“You spoke the truth, my son. I didn’t truly love Aegeus, nor
did he truly love me.” The queen’s eyes shone with unshed tears.
“And that’s exactly the reason you must not let love slip through
your fingers, Alexandros. Even a royal is entitled to happiness.”
The New York weather was harsh and uninviting.
Snow, slush, sleet and grey skies were daily companions.
The sun seemed reluctant to put in even a cursory appearance.
The weather was a reflection of Maria’s despair. She was
lonely for Alexandros, for Aristo, for the happiness she had
found with him there.
It was good that she was busy. Shops that had not wanted any
part of her in the past clamored for her designs. L’Orangerie
headed the list.
And, well, yes, there was one other good thing. A miracu-
166 BILLIONAIRE PRINCE, PREGNANT MISTRESS
lous thing that had, at first, terrified her and now made her
heart sing with joy.
Avisit to her doctor had confirmed that shewas pregnant. She
was carrying Alex’s child.A little girl, Sela had said, smiling.
“Morning sickness at the beginning of your pregnancy. And
look how high you’re carrying. Absolutely, a girl.”
Maria didn’t believe in the old superstitions but it didn’t
matter. Shewould love her baby whatever the sex, and shewould
name it for Alexandros even though he was gone from her life.
He, and Aristo, were moving forward. Sebastian was the
Prince Regent, though there was no mention of the missing
diamond. She’d followed the funeral on TV. The royal family had
looked saddened but composed. Alex had been his mother’s
strong, handsome escort.
Just seeing him had made Maria’s throat constrict.
She would never stop loving him.
But she would have his daughter to love. It saddened her that
her baby would never know her daddy but when Alexandra was
old enough, she’d tell her what a fine man he was, what a loving
man, what a good man—and never mind that he hadn’t called or
written or tried to find out how she was, where she was…
“Maria? You okay?”
She looked up at Joaquin, working at the end of the bench.
He and Sela had been wonderful. Though they knew about the
baby, they hadn’t asked questions. A good thing, too, because if
they had, she might have broken down and wept.
Tears filled her eyes and dripped onto thewax shewasworking.
“Maria?”
“Yes,” she said briskly, wiping the back of her hand across her
eyes and flashing a smile, “I’m fine. I just—I think I got a bit of
wax in my eye.”
“Want me to do that mold?”
“No. No, thanks. I’m almost finished. You know, it’s getting
late. Why don’t we call it a day, hmm?”
“Well, if that’s okay… I promised Sela I’d pick up some stuff
from the Chinese market on the way home.”
SANDRA MARTON 167
“Better get going, then, before the market closes.”
Joaquin nodded, cleaned up his end of the workbench, then
put on his coat. He kissed her cheek and she managed to keep the
tears from building again until the door closed behind him.
Why was she weeping? She’d wanted to end things cleanly.
To keep Alex from contacting her. And she’d succeeded.
She just had to stop crying every five minutes. Sela said itwas
her hormones. It wasn’t. It was her inability to accept that she
would never lie in her lover’s arms again, but she’d sooner have
died than admit that to Sela or even to herself because it wasn’t
true, itwasn’t true, she had awonderful, fulfilling life nowand—
Someone knocked at the loft door.
Maria grabbed the edge of herwork-apron and wiped her eyes.
Had Joaquin forgotten something? Why didn’t he use his key?
Unless it was a reporter. They were still driving her crazy, hoping
for an interview about life on Aristo and the death of its king.
The knock came again. She sighed, smoothed down her apron,
fixed a polite smile to her lips and marched to the door.
“Yes?” No answer. Maria rolled her eyes. “Look, I’ve said I
won’t do interviews so whoever you are—”
“Open the door, Maria.”
Her heart leaped. No. It couldn’t be.
“Maria. Did you hear me? Open this door.”
She shook her head, as if Alex could see her. “Go away,” she
said in a shaky voice.
“I’m not going anywhere. Either you open this door or I’ll
break it down.”
He would, too. He was angry—she could hear it in his voice,
and she remembered what his anger had been like that night he’d
first come here.
Bam! The door, heavy as a chunk of steel, shuddered under
the blow.
“I don’t want to see you.” Maria licked her lips. “Joaquin is
here. He says—”
“He says I’ve been a fool. And he’s right.”
Maria stared at the door. “You talked to Joaquin?”
168 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Just now. On the stairs.” Alex’s voice softened; she had to
put her ear to the door to hear him. “He’s been a good friend
to you.You’re lucky to have him to turn to. Maria, glyka mou,
let me in.”
She swallowed hard. Then she undid the bolt and opened the
door.
“I don’t want to talk to you,” she started to say, but the sight
of her Alexandros, so tall, so powerful, so much the lover she remembered,
stole the words away. To her horror, her eyes flooded
with the tears she’d fought only minutes before. She couldn’t let
him see her cry, she couldn’t, she told herself, and she slapped
her hands against the door and started to push it closed.
Alex was too quick. He jammed his shoulder between the
door and its frame and pushed. Maria staggered back, the door
swung open and he stepped into the loft.
He’d had plenty of time to consider how he would handle this
meeting. The flight from Aristo had taken longer than usual. Bad
weather had meant putting down at Charles de Gaulle Airport in
Paris for a few hours. Just as well, he’d thought. The delay had
given him extra time to decide what to say.
He’d come up with a list of questions.A little speech, though
he tried not to call it that, in which he’d let Maria know that a
woman did not simply walk out on him without explanation.
He would be cautious in expressing his feelings, never
mind his mother’s insistence that Maria and he were in love.
The sad truth, as Tia had admitted, was that his mother didn’t
know a damned thing about love. If Maria loved him, why had
she left him?
A woman who loved a man didn’t walk out on him without
so much as a handshake.
He wasn’t so sure about loving her, either. Why would a man
love a woman who’d abandoned him? Who was so independent?
Why would he want her back in his life?
Logical, all of it. The trouble was, the closer he’d come to her
street, the harder his heart had beaten. All his hours of planning
and doubt had dissolved like cotton candy in the rain. And when
SANDRA MARTON 169
he’d bumped into a man on the stairs, he’d known instinctively it
was Joaquin—and known, just as instinctively, that the guy knew
who he was, too, and wanted nothing more than to flatten him.
He could hardly blame him.
Hell, itwas what he’d have done if the situation were reversed.
The men had taken a long look at each other.
“Are you the prince?” Joaquin had finally growled. At Alex’s
nod, the other man’s mouth had thinned. “She loves you, you
jerk. And you don’t deserve her.”
Alex had grinned. Then he’d put his hand out.
“You’re right,” he’d said, and after a few seconds Joaquin had
smiled. They’d shaken hands. Then Joaquin had stepped aside
and Alex had continued up the stairs to Maria’s door when terror
had stopped him cold. Certain of everything, sure of nothing, he
had resorted to anger…
And then he’d come to his senses.
He would do whatever it took to win his Maria’s heart…and,
looking into her eyes, he knew, with a rush of fierce joy, that her
heart had always been his for the taking.
Maria loved him. He loved her. And he’d be damned if he’d
lose her again.
So, in the end, there were no questions, no speeches, no
doubts. There was only a man, baring his soul by stepping
forward and opening his arms to a woman. And—thank you,
God—there was the woman, his Maria, giving a little cry and
throwing herself into his embrace.
He kissed her. Kissed her for a very long time. Her mouth.
Her eyes. Her hair.
“Why did you leave me?” he said.
“Because I have no place in your life,” she said, returning each
kiss, each caress, each sigh.
“I love you. You are my life.”
Her heart soared, but she shook her head. “I can’t be.”
“Do you love me?”
How could she lie to him? How could she deny what burned
in her heart?
170 BILLIONAIRE PRINCE, PREGNANT MISTRESS
“Yes,” she said softly, “I love you. I adore you, Alexandros.
But I can’t be part of your life. I—I’m not cut out to be a mistress.”
“Of course you aren’t,” Alex said, in that imperious way that
she’d learned to love. “You’re going to marry me and be my wife.”
His words were more precious than any of the diamonds in
the Aristan crown. She knew she would cherish them forever,
even if what he’d just told her could never happen.
“I can’t marry you,” she whispered.
“Because?”
“Because you’re a prince. You have obligations. Duties.”
“I have nothing, unless I have you, glyka mou. You are my
heart. My joy. My love.”
Oh, how easy it would be to give in. To say, ‘Yes, I’ll marry
you…’ But she couldn’t. She loved her Alexandros too much to
ruin his life.
“Alexandros, listen to me.Your father’swords to me were true.”
Alex’s eyes darkened. “What are you talking about?”
“The night he died—Aegeus said—he said I was wrong for
you. That if I loved you, I had to leave you. He said—”
“Was that why he wanted to see you?” Alex’s tone was harsh.
“To tell you to go away?”
“No. Yes. It was more than that. He said he wanted the best
for you.”
“You are the best for me, glyka mou.”
“Also—also, I think he knew something about the diamond.
I think—I think he had something to do with switching the fake
for the real one.”
“I don’t care about that diamond right now,” Alex said fiercely.
“All that matters is us. What we feel for each other, the life we’ll
create together… What?”
Maria was laughing. Or maybe she was crying. He couldn’t
tell; he only knew that something in what he’d just said had
affected her.
And then, he knew.
Slowly, he clasped her shoulders. Held her just far enough
away so he could look at her from head to toe. She looked dif-
SANDRA MARTON 171
172 BILLIONAIRE PRINCE, PREGNANT MISTRESS
ferent. Her face was fuller. So were her breasts. And, under her
denim work-apron, he could see the delicate but clear convexity
of her belly.
It all came together. Her nausea. Her exhaustion. And now,
these physical changes that made her even more beautiful.
“Maria.” He could feel the smile starting to stretch across his
lips. “Maria, my heart, my soul, are you pregnant?”
She stared at him. She could lie. She could say, no, of
course not…
“Yes,” she said softly.
Alex grinned. Then he gathered her in his arms and rained
kisses on her face.
“Pregnant,” he said, as if he were the first man in the world
ever to hear such news. “My God, sweetheart, we’re pregnant!”
He held her inches from him, his eyes searching hers. “Say the
words, Maria. Tell me that you love me as I love you, and that
you will do me the honor of becoming my wife.”
Maria thought of how far they had come, of a time her
Alexandros would have demanded to know if he was really the
father of the baby in her womb. She thought of how he had
crossed the ocean to claim her. She thought of King Aegeus’s
warning, and how cold and empty the life he’d foreseen for his
son now seemed.
“Alexandros,” she said, because if life wasn’t worth risks,
what was the point? “Alexandros. I love you. And it is you who
do me honor, my beloved, by asking me to marry you.”
Alex gave her a solemn look. “Is that,” he said carefully, “a yes?”
Maria laughed, though she was crying again, this time tears
of joy that streamed down her face.
“Yes,” she said, “yes, yes, yes!”
Her Alexandros kissed her. Then he kicked the door shut,
swept her into his arms, and carried her to the bed.
* * * * *
The Kingdom of Adamas: a Turbulent History
The islands of Calista and Aristo have always been a temptation
to world powers. Initially this was because of their excellent positions
for trading and the agricultural potential of Aristo’s
luscious, fertile land. The discovery of diamonds on Calista in
the Middle Ages made the kingdom a target for invaders.
The kingdom passed through the hands of many foreign powers
throughout the ages. Originally part of the ancient Greek empire,
Adamas then came under the control of Rome from 150 BC
onwards. Following the fall of the Roman empire approximately
400 years later, the islands were annexed to Byzantine control.
It was not until Richard the Lionheart seized Adamas in the
twelfth century that the family of Karedes, local island nobility,
was installed on the throne. When the republic of Venice briefly
took control in the fifteenth century, the Karedes dynasty continued
to rule as mere figureheads.
There followed a period of struggle for the royal family. The
Ottoman Empire claimed the islands in the sixteenth century and
they were forced into an exile that lasted nearly 200 years. When
the Turks finally sold the islands to the British in 1750, the royal
family was reinstated but the kingdom did not gain its independence
until 1921.
The death of King Christos in 1974 marked the end of the
kingdom of Adamas. The islands have functioned under separate
rule ever since.
The Stefani Diamond
Diamonds have been prized since the dawn of human history for
their unique qualities. The jewels were first discovered in India
in 800 BC, and brought to Europe by Alexander the Great five
hundred years later.
In 1477, Mary of Burgundy became the first known recipient
of a diamond engagement ring, given to her by the Archduke
Maximilian of Austria. This begins the history and tradition of
diamond engagement rings.
The Koh-i-Noor and the Hope diamonds were brought to
Europe in 1631. In 1792, the Hope Diamond was stolen from the
French crown jewels during the French Revolution. In 1851,
The Koh-i-Noor diamond was re-cut to 105 carats for Queen
Victoria (Empress of India). This famous diamond is part of the
British crown jewels.
In the medieval period, a beautiful pink diamond was discovered
on Calista, and used in the Karedes crown to symbolize the
power of the Karedes’s rule. The jewel became known as the
Stefani (“Crown”) diamond. It quickly took on a deeply symbolic
role in the kingdom of Adamas. Believing that their power
resided in the stone, the Karedes family vowed that it would
never leave their hands. They thought that if the jewel was lost,
their kingdom would fall. The existence of this diamond fueled
treasure hunters’ dreams for centuries, but no other diamond of
any size was found on Calista until the 1940s.
In 1972, faced with increasing tension in his kingdom
between the islands of Aristo and Calista, and with family
pressure, King Christos announced that after his death the two
islands would split. In the presence of his children Anya and
Aegeus, witnessed by the court, Christos declared,
“You will rule each island for the good of the people, and
bring out the best in your kingdom, but my wish is that
eventually these two jewels, like the islands, will be
reunited. Aristo and Calista are more successful, more
beautiful and more powerful as one nation—Adamas.”
After King Christos died in 1974, the Stefani diamond was
split in two to form two stones for the coronation crowns of
Aristo and Calista and fulfill the ancient charter.
About the Author
Sandra Marton wrote her first story when she was seven years
old and began to dream of becoming a writer. Today, Sandra is
the author of more than thirty romance novels. Readers around
the world love her strong, passionate heroes and determined,
spirited heroines.
Sandra has won a Holt Medallion for Best Single Title and
the Romantic Times BOOKreviews Reviewers’ Choice Award
for Best Mills & Boon Modern Romance of the Year twice.
Sandra sees her greatest goal as a romance writer is to provide
readers with characters and stories that offer hours of pleasurable
escape from the stresses of everyday living. When she’s not
busy writing, Sandra likes to hike, read, explore out-of-the-way
restaurants and travel to faraway places. She is active in many
organizations including Novelists Inc., the Nature Conservancy,
the Humane Society and the Audubon Society.
The mother of two grown sons, Sandra lives with her husband
in a sun-filled house in a quiet corner of Connecticut where she
alternates between extravagant bouts of gourmet cooking and
take-out pizza.
Turn the page for our exclusive interview
with Sandra Marton!
We chatted to Sandra Marton about the world of THE ROYAL
HOUSE OF KAREDES. Here are her insights!
Would you prefer to live on Aristo or Calista? What appeals to
you most about either island?
The two islands are both fascinating, but I would much prefer to
live on Aristo. I love the contrast between the sophistication of
Ellos and the wildly beautiful cliffs that wind above the Bay of
Appollonia, the gentle climate, the white sand beaches kissed by
the sea. My husband and I took a wonderful trip to Greece a few
months ago; all the time we were on the island of Santorini, I
kept thinking how easily beautiful Santorini could be Aristo.
What did you enjoy about writing about THE ROYAL HOUSE
OF KAREDES?
I was very fortunate to write the launch book for the series. That
gave me the chance to give substance to Aristo and to the Karedes
family. Breathing life into Aegeus and Tia, the princes and
princesses was great fun. I especially loved creating my hero,
Alexandros. I’ve always thought the lives of royals must be hard,
all that balancing of personal needs with public demands, and here
I had the chance to show some of the inner conflicts that are part
of a royal’s existence. I loved creating Maria, too. Because I was
born and raised in New York, I was able to give her a background
with at least some similarities to mine. Like Maria, I attended its
schools. I went to university there. My first job was in the part of
Manhattan where I put Maria’s loft and, believe me, her feelings
on riding a crowded subway car were a mirror of my own.
How did you find writing as part of a continuity?
It was great fun but also a challenge. I had to be sure to introduce
my secondary characters in ways that wouldn’t be a problem for
the other authors, and to describe places (the palace, for example)
so that the other authors could “see” it as clearly as I did. I’ve
always loved writing my own miniseries because I love the scope
and depth a writer gets from dealing with ongoing characters and
intertwining plots. Writing BILLIONAIRE PRINCE, PREGNANT
MISTRESS gave me that same feeling.
When you are writing, what is your typical day?
Hmm. Let’s see. The maid draws my bath, brings me my morning
coffee… Oh, if only! Seriously, my working day isn’t a glamorous
one. I get up anywhere from six to seven-thirty, shower,
put on what I think of as my summer outfit (shorts, T-shirt, thong
sandals) or my winter garb (jeans, T-shirt, sneakers), head down
to the kitchen where my husband, bless him, is generally already
brewing the coffee. Breakfast is toast and coffee with the
morning news playing in the background. Then I give my
husband a kiss, head for my office, turn on my computer, play a
few rounds of Spider Solitaire—it’s addictive—and settle in to
work. I take a break somewhere between noon and one o’clock.
My husband’s office is upstairs and he comes down and joins me
for lunch. Then it’s back to work until he calls me on the intercom
and reminds me—by then, I’m lost in what I’m writing—that it’s
time for a glass of wine. Depending on my mood, I’ll either put
together an easy meal—not much cooking goes on when I’m
working!—or he’ll grill something on the deck, or we’ll go out
somewhere local for supper. After that, I generally curl up beside
him on the sofa to read, catch the eleven o’clock news, and then
stagger off to bed.
Where do you get your inspiration for the characters that you write?
I’m an inveterate people-watcher. Plop me down in a café in
NewYork or San Francisco, Paris or Athens, and I’m content. I’m
very aware of people’s body language and facial expressions.
Those things communicate a lot to me. Many of my characters
have come to life through my observations of complete strangers
who have no idea I’m taking mental notes! Friends sometimes
think I’ve based my characters on them. I never do. If I know
someone well, I can’t see them as anything but themselves, if that
makes sense.
What did you like most about your hero and heroine in this
continuity?
I love creating Presents heroes, men who are strong and loving, protective
and powerful, and maybe just a little bit arrogant.
Alexandros is all those things. He’s also a man accustomed to not
showing his feelings. I find that, always, a special challenge for a
heroine. And my Maria is, I think, the perfect woman for
Alexandros. She’s independent, spirited and tough in the best
possible meaning of the word. She, too, has learned to keep her
emotions in check. That’s why the passion they discover in each
other’s arms is so exciting. It changes them, forces them to examine
their own true needs, their own true desires. Fate has created Alex
and Maria for each other. For me, that fierce sense of destiny is what
Presents, passion and enduring love are all about.
What would be the best—and worst—thing about being part of
a royal dynasty?
The best would probably be the good one can do as a royal. The
worst would surely be the public exposure demanded of royals.
I tried to convey some of that in Alexandros’s story.
Are diamonds really a girl’s best friend?
It depends on the girl. A serious answer? No, absolutely not.
When you get down to basics, what women—all women—want
is happiness. And happiness comes from much more precious
things than diamonds. Good friends. Good health. A loving
family… Above all, the love of one special man. Those are the
qualities that make a woman’s life full and rich. The glow of
diamonds is lovely but the glow in your lover’s eyes when he sees
you means far, far more.
HPHALO
We hope you enjoyed being swept
off your feet with this book from the
Harlequin Presents line!
Meet sophisticated men of the world and
captivating women in glamorous, international
settings, available every month from
Harlequin Presents wherever books are sold,
including most bookstores, supermarkets,
discount stores and drugstores.
Seduction and Passion Guaranteed
60EBOOKENDR
From passion, paranormal, suspense and
adventure, to home and family,
Harlequin has a romance for everyone!
Harlequin has
a romance for every mood™!
Look for all the variety Harlequin has to offer
wherever books are sold, including
most bookstores, supermarkets,
discount stores and drugstores.
Visit
www.HarlequinCelebrates.com
to choose from a variety of
great series romance stories
that are absolutely FREE to download!
(Total approximate retail value $60.)
A Romance for Every Mood™!
Passion
SMP60PASSIONR2
Harlequin Presents®
Intense and provocatively
passionate love affairs set
in glamorous international
settings.
Harlequin® Blaze™
Fun, flirtatious and steamy
books that tell it like it is,
inside and outside the
bedroom.
Silhouette Desire®
Rich, powerful heroes and
scandalous family sagas.
Look for these and many other Harlequin and Silhouette
romance books wherever books are sold, including most
bookstores, supermarkets, drugstores and discount stores.
A Romance for Every Mood™!
Suspense and Paranormal
SMP60SUSPENSER2
Harlequin Intrigue®
Breathtaking romantic suspense.
Crime stories that will keep you
on the edge of your seat.
Silhouette® Nocturne™
Dark and sensual paranormal
romance reads that stretch
the boundaries of conflict and
desire, life and death.
Silhouette® Romantic Suspense
Heart-racing sensuality and the
promise of a sweeping romance
set against the backdrop of
suspense.
Look for these and many other Harlequin and Silhouette
romance books wherever books are sold, including most
bookstores, supermarkets, drugstores and discount stores.
A Romance for Every Mood™!
Home and Family
SMP60HOMER3
Harlequin® American Romance®
Lively stories about homes,
families and communities like
the ones you know. This is
romance the all-American way!
Harlequin® Superromance®
Unexpected, exciting and
emotional stories about
homes, families and
communities.
Silhouette® Special Edition
A woman in her world—living
and loving. Celebrating the
magic of creating a family and
developing
romantic
relationships.
Look for these and many other Harlequin and Silhouette
romance books wherever books are sold, including most
bookstores, supermarkets, drugstores and discount stores.
A Romance for Every Mood™!
Romance
SMPNASROMANCER2
Harlequin® Romance
The anticipation, the thrill of
the chase and the sheer rush
of falling in love!
Harlequin’s officially licensed
NASCAR series
The rush of the professional
race car circuit; the thrill of
falling in love.
Harlequin® Historical
Roguish rakes and rugged
cowboys capture your
imagination in these stories
where chivalry
still exists!
Look for these and many other Harlequin and Silhouette
romance books wherever books are sold, including most
bookstores, supermarkets, drugstores and discount stores.
A Romance for Every Mood™!
Inspirational Romance
SMP60INSPIRATIONALR2
Love Inspired®
Contemporary inspirational
romances with Christian
characters facing the challenges
of life and love in today’s
world.
Love Inspired® Historical
Travel back in time and
experience powerful and
engaging stories of romance,
adventure and faith.
Love Inspired® Suspense
Heart-pounding tales of
suspense, romance, hope
and faith.
Look for these and many other Love Inspired romance
books wherever books are sold, including most bookstores,
supermarkets, drugstores and discount stores.
Look for Harlequin, Silhouette
and Love Inspired books
WHEREVER
BOOKS
ARE SOLD
including most bookstores,
supermarkets, discount stores
and drugstores.
60HARSIL09R
ISBN-13: 978-0-373-12835-8
BILLIONAIRE PRINCE, PREGNANT MISTRESS
First North American Publication 2009.
Copyright © 2009 by Harlequin Books S.A.
Special thanks and acknowledgment are given to Sandra Marton for her
contribution to The Royal House of Karedes series.
All rights reserved. Except for use in any review, the reproduction or
utilization of this work in whole or in part in any form by any electronic,
mechanical or other means, now known or hereafter invented, including
xerography, photocopying and recording, or in any information storage
or retrieval system, is forbidden without the written permission of the
publisher, Harlequin Enterprises Limited, 225 Duncan Mill Road,
Don Mills, Ontario, Canada M3B 3K9.
This is a work of fiction. Names, characters, places and incidents are
either the product of the author’s imagination or are used fictitiously,
and any resemblance to actual persons, living or dead, business
establishments, events or locales is entirely coincidental.
This edition published by arrangement with Harlequin Books S.A.
® and TM are trademarks of the publisher. Trademarks indicated with
® are registered in the United States Patent and Trademark Office, the
Canadian Trade Marks Office and in other countries.
www.eHarlequin.com
For MM, my very own hero, yesterday, today and forever.
And for MIM, whose spirit of adventure is an inspiration.
I love you both.
Recycling programs
for this product may
not exist in your area.
eISBN-13: 978-14268-5365-4
An unusual book of euphemisms
Linda Berdoll
Very Nice Ways to Say
VERY BAD THINGS
Very Nice Ways to Say
Very Bad Things
w
w
g
g

Nice Very
ways
to say Very
Things
AnUnusual Book of Euphemisms
by
Linda Berdoll
Copyright © 2003, 2007 by Linda Berdoll
Cover © 2007 by Sourcebooks, Inc.
Internal design © 2003 Carol Sue Hagood
Internal graphics © 2003 Carol Sue Hagood and Johnny Alvarez
Sourcebooks and the colophon are registered trademarks of Sourcebooks,
Inc.
All rights reserved. No part of this book may be reproduced in any form or
by any electronic or mechanical means including information storage and retrieval
systems—except in the case of brief quotations embodied in critical
articles or reviews—without permission in writing from its publisher,
Sourcebooks, Inc.
Published by Sourcebooks Hysteria, an imprint of Sourcebooks, Inc.
P.O. Box 4410, Naperville, Illinois 60567-4410
(630) 961-3900
Fax: (630) 961-2168
www.sourcebooks.com
Originally published in 2003.
Library of Congress Cataloging-in-Publication Data
Berdoll, Linda
Very Nice Ways to Say Very Bad Things / Linda Berdoll
p. cm.
ISBN-13: 978-1-4022-0885-0
ISBN-10: 1-4022-0885-5
1. English language—Euphemism. 2. English language—Jargon.
3. English language—Terms and phrases. I. Title.
PE1449.B4435 2007
427—dc22
2006100787
Printed and bound in the United States of America.
WC 10 9 8 7 6 5 4 3 2 1
ISBN-13: 978-1-4022-2983-1
ISBN-10: 1-4022-2983-6
Contents
Aspersions, brickbats, carping, cavil, censure, denunciation,
disparagement, reproach, opprobrium, reproof, stricture,
vitriol, epithets, and vituperation
Censuring the Inherent Fool: The Lost Art 3
Shakespeare, Addressing Individual
Mounds of Foul, Undigested Lumps
of Donkey Entrails 19
Sacre Bleu: Profanities and
Expletives 21
Oaths and General
Vituperation 27
Silent Disparagement
(The Bird and His Friends) 30
1v
Circumlocution 33
Worshipping at the Shrine
of Bacchus 49
Fits, disease, ill health, infirmity, breakdowns, affliction, ailment,
attacks, bugs, collapse, complaint, confinement, convalescence,
disability, disorder, disturbance, dose, failing health, flu,
indisposition, malady, malaise, prostration, seizure, syndrome,
a bit of unwell, and what’s been going around
Indisposition 55
Going to Europe with Ralph
and Earl in a Buick 56
In the Privy 65
Afflicted by Time’s Wing’d
Chariot 69
53
v
Gender specific activity, femininity, manhood, manliness,
masculinity, sexuality, womanhood, womanliness, intercourse
between animate beings, coition, coitus, copulation, fornication,
generation, intimacy, lovemaking, magnetism, procreation,
relations, reproduction, sensuality, sexuality
Bewitched, Bothered
and Betwattled 75
The Long Carbine 80
Dallying, Firkytoodling
and Finkdiddling 83
Sex “Sain et Sauf” 102
Men Behaving Badly 107
73v
A Pea in the Pod 109
Misbegotten 110
Unknown to
Man 112
Trafficking with
Oneself 114
Daft, mentally strange, barmy, unzipped, batty, berserk,
insane, bonkers, cracked, loony, crazed, cuckoo, demented,
deranged, peculiar, erratic, flaky, fruity, idiotic, insane,
lunatic, mad, maniacal, nuts, potty, psycho, touched,
unbalanced, unglued, unhinged, wacky 135
The Gazelles are in
the Garden 137
’N What? 142
Acknowledgements 144
v
spersions, brickbats, carping, cavil,
censure, denunciation, disparagement, reproach,
opprobrium, reproof, stricture, vitriol, epithets,
and vituperation
Zounds, I have been bethumped by words.
—Shakespeare
You clod of puke-stocking,
roastmeat for worms!
ab
Censuring the
Inherent Fool:
The
Lost Art
Few would argue that some behavior is so abhorrent, it
demands redressing. Regardless of justification—idiot
drivers, impudent clerks, adolescents who have been
spawn by the devil—we as a society simply cannot condone
smacking the offender upside the head. (Admittedly,
we institute this decision partly in deference to decorum,
but also in the distinct possibility that said transgressor
might be packing heat.) Since throwing the bric-a-brac can
become prohibitively expensive, our only alternative is to
let fly with a few choice words.
That acknowledged, it is miserably apparent that standards
about what is said or heard in public have become
remarkably lax. What comes out of the mouths of babes
nowadays would have once made a fishwife blush. Not that
we deplore vehement notification of character flaws, but
3
4
Granted, no one can hold a verbal candle to Will Shakespeare,
but with a few carefully tailored ripostes, one might
just leave the miscreants of society flummoxed, if not actually
chastened.
chucking stock profanities about does not exhibit the exercise
of intellect to which we aspire. To wit:
You stupid, fat fuck
Famous mob boss
You show yourself highly fed and lowly taught.
Shakespeare
or:
5
Aspersions, brickbats, carping, cavil, censure,denuncia-
He’s a most notable coward, an infinite and
endless liar, an hourly prose-breaker, the owner
of no one-good quality.
Shakespeare
b
Hos and Hounds
Call Him a Rat;
Just Don’t Call Him a Mouse.
Once, was one to imply a man less than a
gentleman, one would have to meet him
at dawn accompanied by one’s seconds.
The current vogue of anti-heroes
appears to have reversed such a
notion. Calling a man a rogue,
scoundrel, heel or even humping
dog will not necessarily be
an insult. Therefore, with
honor now discounted, the
male character flaws vulnerable
for attack are intellect,
cuckoldry, wimpiness and
penis size.
He is not only dull in himself, but
is the cause of dullness in others.
Samuel Foote
Homo-Boobus
To properly vilify the cabbage-headed oaf, we must, unfortunately,
blaspheme the animal kingdom*—polecat,
skunk, swine, baboon, (particularly effective with a British
inflection) varmint, goose, or donkey. However, if one
calls him a capon (a de-knackered chicken), one has hit a
triple—not only is he a graceless lout, but also a eunuch—
and unless he was in 4H, unlikely to comprehend the slam.
7
Aspersions, brickbats, carping, cavil, censure,denuncia-
*(In that today few people understand that an ass is actually a four-legged
animal, not the gluteal area surrounding one’s anus, we omitted it.)
:
He has no such brain as ear-wax.
Shakespeare
Dullard, dim bulb, dolt, lobberhead, or flap-doodle are
inherent fools. A lurdane or sluggard is not only a fool, but
a lazy fool. The particularly cantankerous ignoramus is a
devil child, demon rogue, archfiend, churl, Mephistopheles,
or carcass fit for dogs. If one wanted to cover all the
8
bases, there is Lusus naturae, which is Latin for freak of
nature. To clarify the subtle difference between a jerk and
a dunce, one must remember not to credit insult that can
be more appropriately explained by stupidity.
cThe Two-timed
Not so very long ago if a man found his wife in bed with
another man and took a shotgun to them both, it was ruled
justifiable homicide. Hence, it might be wise to make certain
there is a clear avenue for escape before one goes
rattling this particular cage. If one does have the moxie
to do it, there is only one way to go. To quote Pulp Fiction,
c
You met your wife’s wit
brickbats, carping, cavil, censure, denunciation,dispar-
9
one has to “get medieval on his ass.” To do so effectively,
one must become intimately familiar with terms as old as
the middle ages.
We begin with the word cuckold, which many believe
originates with the French word for cuckoo bird. This conclusion
is apparently due to that dirty bird’s penchant for
depositing, then abandoning, its monstrous egg into some
unsuspecting little wren’s nest for it to hatch, then attempt
to feed. History has writ cuckoldry a shooting offense, giving
us to understand quite clearly that men do not want another’s
cuckoo baby in their nest. In that the cuckoo egglayer
and proprietress of said nest are both female should
Shakespeare
going to your neighbor’s bed.
throw a monkey wrench in
this entire affronted manhood
stuff, but as far as we can
determine, it has not.
The derivations of most of
our terms for cheating appear
to be some convolution of the
definition for horn—hard
protuberance, e.g. penis, and
cornu—horn-shaped anatomical
characteristic. Indeed,
there was a mythical beast
called a bicorn, which, legend
says, used to eat husbands
who had unfaithful
wives (as to why these victims
of infidelity were the
ones preyed upon, our crack
team of researchers have
been unable to ascertain).
Then there is the Greek legend of Artemis who caught Actaeon
peeking while she was bathing and turned him into a
stag, thereupon causing his own hounds to eat him—which
maybe served him right.
10
A man does not look
behind the door unless he has
stood there himself.
Du Bois
Hence, the poor cuckold is doomed to suffer, not only his
wife’s infidelity, but being taunted as a cornuto or buck’s
face (has horns, you know), suffering the forked plague,
prey to the bicorn, or, get this, wearing Vulcan’s badge:
The roof of Vulcan, her, by many a gift
Seduced, Mars won, and with adult’rous lust
The bed dishonour’d of the King of fire.
Cowper—The Odyssey of Homer
One must concede that in issuing the jibe, Vulcan’s badge,
it could be misconstrued. A certain element of the population
may not understand that in this context, Vulcan pertains
to the God of Fire and has nothing whatsoever to do
with Star Trek.
A wittol is aware he is being cheated on and puts up with
it (what was Camilla Parker Bowles’ husband’s name anyway?).
If he is aware and enraged, he is horn-mad. If he is
cheating on her, she is a cuckquean and usually The Last
to Know. If the correspondent in this affair is a man, he is,
indeed, Actaeon. His female counterpart is an inconstant,
faithless sore in the side of a man and, no doubt, a wanton
hussy. The entire activity is, quite aptly, named cornucopia
—horn of plenty (we suppose, because there is plenty of
horniness going on).
ATTENTION: It is imperative that when one
inflicts any of the above abuse, it must be done with
extreme superciliousness, else its just not gonna work.
11
brickbats, carping, cavil, censure, denunciation,dispar-
What a candy-ass!
13
carping, cavil, censure, denunciation, disparagement, The Invertebrate
In cockfighting, a white tail feather
among the plumage of a gamecock denotes
inferior breeding and therefore a
less combative rooster. When calling a
person’s courage into question, the accusation
of showing a white feather
may now seem a bit obscure, but for
centuries, it was tantamount to saying
“what a candy-ass.”
In common parlance a cur is a mongrel
dog, but its second definition dating
also from the thirteenth century, is
coward. From the Middle Ages comes
recreant, which as an adjective describes
a begging of mercy (we understand
not an uncommon occurrence
during those times) and by token, one
who does so, a coward.* In the first
half of the 18th century, funk meant
“a state of paralyzing fear,” hence one
who funks is, too, a coward. As to how
and why this term was usurped by the
music industry in the ‘70s remains a
mystery, but it will arbitrarily remove
the word funky from possible cowardly
insults.
*If faced with being drawn and quartered we are
not certain who among us would not go down
screaming like a woman bringing forth child.
He led his regiment
from behind,
He found it less
exciting.
W.S. Gilbert
14
Therefore, the terms that imply the lack of
stalwartness of someone’s innards are: lilylivered,
yellow-bellied, spineless, faint, or
chicken-hearted, pantywaist, or a gutless
wonder. One might avoid wimp and big
baby—they lack imagination. Woody Allen
says he is not a hypochondriac, but an
alarmist. That makes our list, as does
milquetoast, caitiff, craven, dastard, or
poltroon. Save sissy-britches or wienie for
when one has to pull out the big artillery.
VFYI: We note a rectal sub-category
as it relates to the frightened. First, there is the
pucker factor, which refers to the degree of fear that
causes one’s sphincter to tighten. Contrarily is the
green heron or shitepoke which, when startled into
flight, defecates. It goes without saying that whatever
category one may find oneself in when, say, one’s aircraft
plummets or the IRS makes inquiries, should remain
between oneself and one’s laundress.
He Who Is Not Nick-Named Tripod
There was an old man named Ringer,
Who was seducing a beautiful singer.
He said with a grin,
“Now, I’ve got it in.”
Said she, “You mean that’s not your finger?”
Cowardice is distinguished from panic by
the inability to suspend the imagination.
Of the euphemisms we uncovered for a man less favored
by nature (hung like a chicken, pencil-dick and bugfucker),
we can only recommend under-endowed and
three-inch fool, so this entry will be blessedly small (no
pun intended).
The Five-Letter Womanr
:
She was a woman of mean understanding,
Little information and uncertain temper.
Jane Austen
Historically the most effective means to rebuke any woman
was to disparage her virtue (that or possibly her fashion
sense). Nowadays, un-virtuous and unladylike are probably
as useless as insults go as un-gentlemanly. Yet however
ubiquitous its use, we can agree that calling a disreputable
female a bitch (or even puppy’s mama) is not only
common, but an insult to female dogs. Harpy,
harridan, slattern, or shrew may be vintage, but
they are just pithy enough for general reproach
of shrill, hateful behavior. When faced with an
irredeemably cantankerous woman,
she may well be the Devil’s Sister.
(If she appears to find this in any way
complimentary, a keen sense of self
preservation might suggest one run
like a cheap pair of pantyhose.)
carping, cavil, censure, denunciation, disparagement,
16
rFoul Sluts
Even if the succubus
that one’s brother intends
to marry is a fornicatress
that has seen
more pricks than a
dartboard, we encourage
one not to refer to
her as a slut, tramp,
hussy, trollop, roundheeled
floozy, or dirtylegged
Jezebel. One
might get away with
“she’s been around the
block more times than
the Good Humor man”
to others, but unless he
actually asks your opinion,
one might do well
to refrain from comment
at all.
Other analogies for that
woman who has been
laid on every flat rock
in three counties include
the town pump
or any noun that can
I can remember
when the air was clean
and sex was dirty.
17
be ridden: bicycle, hobby horse, barber’s chair, ferry,
hackney, taxi, etc. A badger is a loose woman who is particularly
ill-scented.
Disclaimer: This information is offered only for elucidative
purposes.
VFYI: If one believes that a woman is of accommodating
morals and decides to say so publicly, one has
bewhored her (or, depending on one’s ‘hood, possibly
beho-ed her). Be certain that she doesn’t mind
the advertisement or have your affairs in order, for it
is said: “Hell hath no fury like pussy with a pistol.”
Dog City
If while mentally cruising some parallel
universe, one believes it a good
idea to slander a masculine woman,
at least have the good sense to avoid
calling her a diesel-dyke or hell pig.
Virago, beldame, trolleymog, daggletail,
or buffarilla mean precisely
the same thing and their relative obscurity
may offer one just enough
time to elude being beaten to a pulp.
VNOTE: We have been told
that if one is in a Spanish-speaking
country, it is also advisable not to
compliment a strong woman by
calling her macha.
w
At a loss for words, hockey puck?
Quote Shakespeare.
BULLETIN: The unparalleled king of insults
is not Don Rickles.
As has certainly not passed one’s notice, Shakespeare marshals
up gems of abuse that would whoosh right over the
average boor’s head. Therefore, appropriating The Bard’s
18
Y’wanna piece
of me, sweetie?
19
Shakespeare, Addressing Individual Mounds
of Foul, Undigested Lumps of Donkey Entrails:
for those of the female persuasion
Hag of hell, fat chuff, latten bilbo (brass shackles),
painted maypole, long-tongued babbling gossip,and
Amazonian trull.
For men who have fallen out of one’s favor
False hound, untutored churl, rank weed, insolent cracker, unlettered
small-knowing soul, odoriferous stench, pigeon-egg of
discretion, dilatory sloth, homely swain, clod of wayward marl,
dunghill groom, puke-stocking, improvident flea, ronyon (mangy
or scabby creature), roastmeat for worms, princox (fop), cacoethes
(one with insatiable desire, usually disreputable), mad mustachio’d
purple-hued maltworm, prick-eared cur of—(fill in the
name of town, school, or neighborhood the cur claims as home),
and whoreson.
for one’s boss
Old feeble carrion, scolding crookbank, embossed carbuncle,
white-livered-red-faced prince of fiends, cacodemon (evil spirit),
maggot pie, execrable wretch, beef-witted, or sodden-witted
implorer of unholy suits.
to verbally backhand group obnoxiousness
You rabble of vile confederates, herd of boils and plagues, petty
spirits of region low, strangely visited people, foul and pestilent
congregation of vapors, college of witcrackers, dissolute crew, or
base lackey peasants.
words to one’s own needs will serve a dual purpose. It
confounds the ignorant and catches the erudite off guard.
Hence:
cavil, censure, denunciation, disparagement, reproach,
Under certain circumstances, profanity provides a
relief denied even to prayer.
Mark Twain ab
21
Sacre Bleu:
Profanities and
Expletives
w
The “F” ing Word & Other Intensives
Veritable, sure enough, or bona-fide are perfectly respectable
intensifiers when one needs, well, emphasis. Unfortunately,
fucking seems to be the hands-down pejorative of
choice in modern society. This being the case, we believe a
little historical perspective couldn’t hurt . . .
No matter how many people believe it true, it is highly unlikely
that the word “fuck” is an acronym of For Unlawful
Carnal Knowledge or that other old chestnut, Fornicate
Under Consent of the King. Eric Partridge believed it
evolved from the German word ficken for “to strike.” Like
most, he found the word objectionable. He, however, categorized
it along with words that he considered sadistic representations
of the male’s part in copulation: clap, strike,
thump, nail, and, yes, bang.Webster’s offers the derivations,
fokken (Dutch, to breed) or fokka (Swedish, to copulate).
Others suggest the French word foutre, to thrust, and even
firk (English 1600’s), to beat or to lash. However it originated,
it has been in use and considered a vulgarity the better
part of a millennium. As an intensive, Webster’s calls it
meaningless. There are those who would disagree.
To avoid inciting an affronted swoon
by the more sensitive souls of society,
acronyms have been embraced in place
of a number of phrases that include
the “f” word. Specifically, we have
GFY, which instructs one to do something
anatomically impossible (Go
Fuck Yourself ); GFU, a moron (General
Fuck-Up); and NFW, an implausibility
(No Fucking Way). Related
acronyms include SNAFU, a cynical
expectation of any situation in which
the military is involved (Situation
Normal, All Fucked-Up); FUBAR,
unrecognizably mussed (Fucked-Up
Beyond All Recognition); and there is
the sarcastic BFD (Big Fucking Deal).
Additionally, when one has been indisputably wronged, one
has been RF—Royally Fucked (also known as the king’s
elevator—the royal shaft). Just for the record, a flying
fuck is what one does not give, not airborne copulation.
And abso-fucking-lutely means beyond a shadow of a
doubt.
22
w
Merde
The four-letter word for defecation has been in use for
eons—which allows that antiquity does not necessarily dictate
grand lexicon. It is possible to avoid the vulgarity of
the word shit completely, as feces, manure, and dung all
mean the same thing. (Small point of interest: feces refer to
human waste, manure and dung, animal.) Other selections
tend to be polysyllabic but are colorful—meadow dressing,
bovine excrement, horse apples, corral confetti, etc.
Granted, if one is discussing political matters, it may be impossible
to avoid using (or even shouting) bullshit. However,
if one does not want to compromise decorum completely,
that can be shortened to B.S. Or, call it hogwash,
heifer dust, or lip-gloss. Bull-chips might do in a pinch
but, in all probability, not what pops out of one’s mouth
when faced with ultimate doom (at which time one will
most likely be up Shit Creek). Indeed, sources report that
when the black boxes are recovered from airplane crash
sites, invariably the last words on the tape are “Uh-oh,”
“Fuck!” and “Oh, shit. ”
Of course, one can use the French, merde or
speak of “a short French expletive” which
would in fact allow one to perform a rather impressive
circumlocutory hat trick, a euphemism
for a euphemism for euphemism.
When one finds it necessary to point out the
limitations of another’s character via the
23
cavil, censure, denunciation, disparagement, reproach,
alimentary canal, it is our position that it is preferable to
enlist mock Latin such as excrementum cerebellum vincit
rather than call someone a shit-head.
Other expressions that would benefit such translation are:
shit list (a mental note of personae non gratae); the shitty
end of the stick (the bad end of a bargain—often known
as the shaft); to shit or get off the pot (or fish or cut bait).
To shit in high cotton is to have attained a higher standard
of living. But not knowing shit from Shinola—well, that
means . . . owing to stupidity one cannot tell feces from
shoe polish. Someone whose continued presence is an
24
annoyance sticks like shit to a shovel. Alternatively,
shit on wheels reflects an over-inflated opinion of oneself.
(We, however, could in no way determine how one could
deign this to be a self-compliment).
Shit a brick technically means discharging a copious and
compacted bowel movement, but colloquially it refers to
accomplishing the impossible. Lastly, to be so angry as to
perform said impossibility is engaging in a shit-fit (also
known as pitching a bitch). Certainly there are Latin
instructors standing by to assist us.
w Vexed
As ancient a word as is piss, it was not until the last century
that humankind found use for it beyond the single
verb or noun. Nowadays, if one is pissed off, one is actually
choleric (and undoubtedly with one’s panties in
a bunch or knickers in a knot). Shakespeare expressed
it thusly: “You do me the most insupportable vexation.”
Other urinary-based euphemisms and their more civilized
translations: full of piss and vinegar (effervescent), piss
away (squander the inheritance—leaving oneself without a
pot to piss in), and piss blood (work with extreme diligence).
A piss-ass is a worthless individual (occasionally called an
arseworm), to engage in a pissing match is an endeavor
that is certain to be unproductive, and if one is piss-poor,
one is monetarily disadvantaged (e.g., without cable).
25
cavil, censure, denunciation, disparagement, reproach,
26
Full a’ piss and
vinegar, ye’ are!
Piss ugly is extremely unattractive
and if piss-faced, one
is overly medicated by alcohol.
The heretofore unheard of, pissed as
a newt has come to our attention. As we
have not personally been confronted by an
outraged salamander, we are uncertain of the
etymology or history of this term. We can only
labor under the supposition that in this situation,
“pissed” does mean vexed, for we believe one even less
likely to come across a drunken newt than a mean one.
VNOTE: The colorful late U. S. Vice President, John
Nance Garner is oft quoted as saying the office of Vice
President was not worth a bucket of warm spit. Those who
knew the man insist he didn’t use the word, “spit.”
Oaths and General
Vituperation
If a potty mouth forsakes stock curses and lets fly with the
likes of Jumpin’ Jehosaphat, just imagine the stunned
silence. Likewise, pshaw, Land a Goshen, Lord love a
duck, criminey, Ye Gods and little Fishes, pish-tosh, My
Well, bugger my giddy aunt.
Great Aunt Gussie—or as Great Aunt Gussie might say,
hells bells and panther tracks! While we understand these
oaths are insufficiently obscene for some, calling someone a
pinhead instead of a fuck-head will neither get one ticketed
nor beat like a one-legged step-child.
w
TheAbodeof theWickedDead
Down, down to hell;
and say I sent thee thither
Shakespeare
Technically hell is the nether realm of
the devil in which the damned suffer
everlasting punishment. In other words, a real sticky
wicket. The word in and of itself is not naughty. Nevertheless,
everyone knows (or at least suspects) that damning
someone to it is considered a blasphemy.
Hence, it is not surprising that an entire cottage industry
of euphemistic splendor has erupted from that word’s
roots. Indeed, the lengths to which people go to say it without
“saying it” is quite remarkable: Hades, Hail Columbia,
blue blazes, Cain, tarnation, Sam Hill, Kingdom Come,
You Know Where, or any place that implies “down there,”
the hot place, netherworld, lower regions, etc. Although
28
the Victorians gave us heck, perdition has been a suitable
alternative since the 14th century. Today we seldom hear
the once popular Go to Helen B. Happy. A shame, really.
Hellacious is a multi-purpose adjective that can mean either:
exceptionally powerful, remarkably good, extremely
difficult or extraordinarily large. To be hell-bent is
recklessly determined come hell or high water.
w
Doggone and Up Yours
Oh darn, dang, confound, consarn, dagnab, dash, blank,
or blast followed by it, are all euphemistic replacements for
the word, damn. All denounce someone or something as
evil. Truly genteel society frowns on these seemingly benign
adjectives as well as bloody, bleeding,
blamed, all-fired, dad-gummed, dratted,
and cotton-picking.
At one time, a curse was serious business.
No one took lightly being consigned
by another to hell, which may
be why Go to the Devil morphed
into Kiss My Ass. Go jump in the
lake or take a long walk off a short
pier are only nicer sounding ways to
tell someone to fold it five ways and
shove it where the sun don’t shine.
censure, denunciation, disparagement, reproach,oppro-
29
Silent Disparagement
(The Bird and His
Friends)
Although many think of it as contemporary,
digitus infamis or digitus impudicus (infamous
or indecent finger) as a phallic symbol has
been referenced in literary works as early as
ancient Rome. Mad-as-a-hatter Caligula was
rumored to hold up his middle finger for supplicants
to kiss.
There is the obvious suggestion of genitalia
in fist and extended middle finger, but we
have heard that during early warfare, captured
enemy archers had their fingers removed so they
couldn’t draw a bow. Therefore, holding up two fingers
(index and middle) backwards to one’s enemy signified
one could still do them damage. One could premise
that’s pretty much saying “f--- you.”
From the fight scene in Romeo & Juliet, which
commenced with the snapping of thumbnail under
the front teeth, to Texas A&M’s upraised “Gig ‘Em
Aggies” thumb, we see the ultimate insult can be insinuated
by other than extended middle finger. In the Arab world,
palm down, middle finger waggling downward means the
same as raised middle finger in the West.
31
censure, denunciation, disparagement, reproach,oppro-
VFYI: The little finger offered as
suggestion of a, shall we say, modestly
proportioned male part is not of modern
origin. Seek ye the Bible. I Kings 12:10.
32
To express general disrespect, there is the Cock a Snook,
also known as Ann’s Fan or Pulling Bacon, which is the
thumb on nose, fingers waving. To grasp one elbow and
raise a fist is one of the commonest insult
found worldwide, but is not universal.
That title must go to displaying
one’s naked backside. Anthropologists
say mooning predates Braveheart and,
loosely translated, meant “eat shit.”
After the fall of Bagdad, we saw Iraqis
beating the tar out of portraits and statues
of Saddam Hussein with their
shoes, revealing to westerners one of the strongest insults
of their culture—that of sticking the sole of your shoe in
someone’s face.
As there are any number of variations of armpit, bicep, fist,
finger, thumb, nose, crotch and spit . . . maneuvers to express
disrespect in different cultures, if one must hail a cab,
say, in Greece or New York, do so with all due caution.
Circumlocution
Because we often toss them about willy-nilly, we may forget
that euphemisms serve a greater purpose than merely
keeping the ladies at a garden party from glaring at us over
the top of their spectacles. A glib turn of phrase can spare
wounded feelings, a few mincing words keep lawyers at bay.
Until the Victorian era, however, the euphemistic mother
lode had not really begun to be mined. Once Queen Victoria
was on her throne and her minions on high alert, there
was little that couldn’t be accused of having a sexual, and
therefore, evil, connotation. Everything had to be renamed.
Hence, a bull became a cow’s spouse and one’s buttocks,
sit-upons. One can only imagine how dicey it must have
been sitting down at Sunday dinner for some poor soul
trying to ask for a specific piece of chicken.
w
A Woman of Expansive Sensibilities
Paphos was an ancient city of Cypress known for worshipping
Aphrodite. The well-traveled, or at least well-read,
33
Victorian men found it quite sly to call a prostitute or her
doings, Paphian. Further 19th century circumlocution favored
demimondaine, academician, abbess, courtesan,
Fille de jolie (fun gal) or nymph du pave (streetwalker). The
term of choice for those whose professions or predilections
sought to save her soul: she was a fallen woman.
One rarely hears of a lady of certain description or
painted woman anymore, but one would have to be pretty
obtuse not to understand the meaning. A little more recent
is woman of the night, streetwalker, naughty girl, and
commercial sex worker. A quick check of our Yellow Pages
did not uncover services by call girls. However, escort,
model, and actress listings are numerous and offer “discreet
billing.”
As for the specific establishment where these shenanigans
take place, a century ago it was referred to as a leaping
academy, vaulting school, disorderly house, knocking
shop, or chamber of commerce. However dated that
sounds, one must agree that today’s snake ranch or slut
hut is not much of an improvement. Granted, whorehouse
is to the point, but just a tad crude. If compelled to speak
of it, polite society might say it is a brothel, place of accommodation,
bagnio, or seraglio. Or, depending on your
frame of mind, house of ill-repute.
Furthering the subject, we proffer that he who pimps prostitutes
is not a pussy peddler, hole-toller, buttock broker,
vent renter, or crack salesman, but a panderer, procurer,
or the French, sounteneur, and with or without pimpmobile,
undoubtedly, a louse (editorially speaking).
For he who thinks he is pulling the wool over by describing
she who is gyrating upon his lap as an exotic dancer rather
Dividing the spoils?
35
denunciation, disparagement, reproach, opprobrium,
than a stripper, be advised, he can go one step further in
self- (or wife) delusion. Employing the term ecdysiast is
even more oblique. Although ecdysis does sound like a
moderately uncomfortable medical procedure, it is actually
the molting or shedding of a skin like a snake.
w
Men Much Taken With Wenching
As lechery appears to be an
accepted major by college-age
males, modern vernacular has responded.
Nowadays, he who pursues
such activities with undue
vigor is a walking hard-on. If the
little stud muffin has seen more
tail than a toilet seat, when the
dean writes home of his expulsion,
he may be described as of
distempered blood and duteous
to vices. (Well, maybe if he was
at Oxford.)
We can call him a debaucher,
libertine, flesh-monger, incubus,
Lothario, insatiate, or roué,
but it doesn’t make him any less
36
irredeemable. Of course, if he insists he is a man of the
world by way of visiting three county fairs and a goatfucking,
he undoubtedly is a bon viveur.
w
The Prevaricator
Liar, Liar, Pants on Fire
At one time, to question a
person’s honesty was no trivial
matter. Such was its consequence;
one dare not bandy
the word liar about. Therefore,
the more innocent prevaricator
was often accused
of only spinning a windy or
embroidering the truth. A
mountebank would lie like
a rug, and a charlatan was crooked as a barrel of snakes.
To piss in someone’s pocket means one is feeding him a
pack of lies.
A lie can travel halfway around the world
while the truth is putting on its shoes.
Mark Twain
37
denunciation, disparagement, reproach, opprobrium, Honest
Bob’s
Used
Wagons
If you seek the finest for
the least, Honest Bob
can procure it for you.
38
It’s hard to believe that a man is telling the truth
when you know that you would lie
if you were in his place.
H.L. Mencken
Current euphemisms such as terminological inexactitude
and economy with the truth dilly-dally about. When last
we checked, thou shalt not bear false witness against one’s
neighbor was still the ninth commandment. So “I misspoke”
won’t cut it with the keeper of the pearly gates.
A lie is an abomination to the Lord
and a very present help in trouble.
Adlai Stevenson
Although not technically lying, pettifoggery fits into this
category for general unscrupulousness. Since the 16th century,
it has described the antics of two or more lawyers
haggling unceasingly about minute matters thereby inflating
their client’s bill—thus proving the old axiom about the
more things change, the more they stay the same.
Q. Why do lawyers wear neckties?
A. To keep the foreskin from crawling up their chins.
disparagement, reproach, opprobrium, reproof,stricture,
w Tuft Hunters and Suck-ups
In English colleges such as Oxford, the aristocrats wore
special tassels (tufts) on their mortarboard hats to denote
their status. The more obsequious among the student body
sought them out, ergo—tuft-hunters. To most, these truly
annoying suck-ups are sycophants.
If overtaken by an undeniable need to
publicly decry this character flaw, one
might whip out one’s French dictionary
and sniff “leche-cul” (butt-kisser) right in
the servile flatterer’s face. Once out of high
school, however, it is advisable to sling
more derogatory comments such as
bootlicker and brown-noser behind the
back. If you do cast this particular stone,
understand that bootlicker is associated
with the habit of kissing the feet of kings
and therefore conveys a modicum of respectability (only
barely). However, it is often overlooked that brown-noser
refers to the result of smooching another part of the anatomy.
Shakespeare called them all puling pickthanks.
40
41
disparagement, reproach, opprobrium, reproof,stricture,
Clothes make
the man. Naked
people have little
or no influence
on society.
Mark Twain
w
In the Altogether
By definition, if one finds oneself in dishabille, one is carelessly
attired. In truth, that French term is often nothing
less than an outright accusation of misconduct. Not only
has one been cited for having one’s clothes in a muss, but
also by having them become that way because one has
been fooling around. Standard advice: Gather whatever
dignity one is able to muster, deny everything and make
a brisk exit.
If caught without a stitch in the great outdoors, one is au
natural. If indoors and can strike a pose, one is nude. In
the case of being stark-ballock-naked and in a compromising
situation, one is nekkid.* No defense—beat a hasty retreat
without the bugle call.
w
The Part that Goes Over the Fence Last
It is never necessary to use that three-letter word regardless
whether it has been in use since the 12th century. Nor
the four-letter one short for buttocks. Just say buttocks.
Or bottom, behind, or rear end for heaven’s sake. If that
is just too simple and one feels the need to express oneself
more floridly, we suggest posterior, derriere, ampersand,
parts behind, prat (hence, pratfall), differential, fanny,
fleshy part of the thigh, blind cheeks, bum, or tushy.
However we would like not, one hears, of course, of
ying-yang, wazoo, and poop-chute. Or if you prefer the
cloak of Latin, gluteus maximus.
42
*This southern colloquialism, often preceded by “buck,” is differentiated
from naked thusly: “Naked” means you do not have any clothes on.
“Nekkid” means you don’t have any clothes on and you’re up to no good.
There once was a woman from Mass
Who had an enormously large ass
when asked does it wiggle
she replied with a giggle
No, but it occasionally does pass gas.
43
reproach, opprobrium, reproof, stricture, vitriol, epithets
w
The Endomorph
He sweats to death,
And lards the lean earth as he walks along.
Shakespeare
“A goodly bulk,” Shakespeare
also called it. But
even on those rare occasions
when an absolute description
is unavoidable,
however ample the avoirdupois,
we believe buffalobutt,
barge-assed, or
hopper-hipped are unnecessarily
mean. Weightadvantaged
would be discreet.
With corpulent,
obese, or endomorphic,
one gets the broad-beamed
picture. Callipygian or
Rubenesque are downright
complimentary.
It is a long-held defense for
having an amply fleshed
mate that one is assured of
optimum warmth in the winter
and shade in the summer.
Conversely, lore tells of a
guy of disturbingly low
reproach, opprobrium, reproof, stricture, vitriol, epithets
morals and poor initiative who only dates fat girls because he
figures, “They don’t have much willpower.”
We are seeking out the purveyors of these stories in order
to exact retribution.
VNOTE: Any abuse is allowable if it is indemnified by
the “bless her heart” clause. The only criteria for its application
is that one can either claim Southern heritage or
manage a credible Southern drawl when it is employed:
“That girl is so fat, bless her heart, if she sat on a bug it
would fossilize in five minutes.”
Clarification: In the South, a boy or a girl is anyone under
the age of 60.
w
Ill-Favored by Nature
Whether or not a person looks like they fell from the ugly
tree and hit every branch on the way down, one certainly
would not want to make this observation within their earshot.
If it becomes necessary to describe an unprepossessing
person to a third party and one does not want to be
Never try to teach a pig to sing,
it wastes your time and annoys the pig.
Proverb
out-right deceptive, said person might be described as
unlovely, disagreeable to the eye, or a bit homely. Do
avoid butt-ugly at all costs (impolitic remarks have a nasty
history of payback).
The Paper Bag Rule
If only one paper bag over the head is necessary to keep
from frightening children, one is uncomely. Two paper
bags, admittedly hard-featured. Three paper bags, o.k.,
butt-ugly. If the person in question is a close friend or relative,
said person is plain but has a good personality.
Postscript: If one would chew off an arm in the morning to
escape undetected from a one-nighter who looked all right
when they said, “Last Call,” that person is Coyote Ugly
(owing to a coyote’s supposed willingness to chew off a
limb to get out of a steel-jaw trap).
46
The Lord prefers common-looking people.
That is the reason why he made so many of them.
Abraham Lincoln
In our western regions, if one looks a bit worse for the
wear, one has been rode hard and put up wet. If this colloquialism
needs explaining, then it would be wise not to try
to work that dog won’t hunt into the conversation either.
w
Short Pockets
A small-statured person is not sawed-off nor suffering from
duck’s disease (short legs), but is vertically-challenged,
abbreviated, a bit close to the ground, compact, diminutive,
petite, slight, undersized, wee, or not tall. Alternately
one with exceedingly long legs may have high pockets and
run like a dromedary with the staggers, but it would be
kinder to describe him as lean, lanky, or rangy. She is statuesque,
unless, of course she is a carbon copy of Olive Oyl.
If this is the case, one might want to disregard bony, emaciated,
scrawny, living stick, or skeletal and rely on slender
or a bit spare.
w
Buck-Toothed
As to why the French describe someone with protruding
teeth as dents a l’anglaise, we shall, in the name of diplomacy,
not look to the British throne.
47
opprobrium, reproof, stricture, vitriol, epithetsand
Bacchus hath drowned
more men than Neptune
Dr. Thomas Fuller
And ale for
my steeds!
Worshipping at the
Shrine of Bacchus
w
Killing a Few Brain Cells
Webster’s first definition for bibulous is “highly absorbent,”
which is probably why its second definition describes one
who over-imbibes on alcoholic substances. Over-imbibers
are also: besotted, befuddled, bleary-eyed, blotto, soused,
bombed, Bosco Absoluto, adrip, afloat, wall-eyed, cupshot,
lit, likkered up, walking on rock socks, or stinking
drunk.
An oenophile is a lover of wine. With the addition of a
prepositional phrase such as “of legendary proportions,”
said drinker is a wino.
The difference between a drunk and an alcoholic
is that drunks don’t have to attend all
those meetings.
How we identify inebriates today is not half so eloquent as
did our forefathers. Their excessive quaffers were called
49
belch-guts, bibblers, biled owls, bloaters, boosey-cocks,
bubbing-culls, cadgers, fuddle-caps, fuddlers, groghounds,
gullions, guttles, large-heads (a hands-down
favorite), lick-spigots, lick-wimbles, moist-uns, plonkdots,
squiffs, and tosspots.
The productive drunk is the bane of moralists.
Anon
50
An alcoholic is someone you don’t
like who drinks as much as you.
Dylan Thomas
The trouble with jogging
is that the ice falls
out of your glass.
w Paying for It
crapulous \ kra-pye-les\ adj [LL crapulosus,
fr. L crapula intoxication, fr. Gk
kraipale ] (1536) 1 : marked by intemperance
esp. in eating or drinking
2 : sick from excessive indulgence in liquor
If not behind the wheel, intemperance can
be relatively benign. Indeed, a crying jag
is embarrassing but hardly lethal. Be forewarned,
even wearing beer goggles (optically
impaired by drink) can get a limb
chewed off (see coyote ugly). In one’s
armor (fighting drunk) is the best way to
get ass-whupped.We don’t even want to
talk about the infamous brewer’s droop (also known as
whiskey dick). While the morning after one may be spitting
feathers, visited by the brown bottle flu implies a trip
to Europe with Ralph and Earl in a Buick.
I always keep a stimulant handy in case
I see a snake, which I also keep handy.
W.C. Fields
The beezie-weezies sound kind of cute. If you have
them it means an array of colorful visitors from the
animal kingdom have come to call on you (pink
elephants, blue devils, red spiders, a black
dog, or snakes—of any hue—in one’s boots).
51
reproof, stricture, vitriol, epithets and vituperation
They are also synonymous with the screaming meemies, a
term a tad more accurate. But the presence of either means
the delirium tremens or DTs have invaded. And, if on the
wagon is not something the afflicted has yet contemplated,
clearly, the time is at hand.
VFYI: St. Bibiana, 4th century Spanish
Patron Saint of hangovers
52
You’re not drunk if
you can lie on the floor
without holding on.
its, disease, ill health, infirmity, breakdowns, affliction,
ailment, attacks, bugs, collapse, complaint, confinement,
convalescence, disability, disorder, disturbance, dose,
failing health, flu, indisposition, malady, malaise,
prostration, seizure, syndrome, a bit of unwell, and
what’s been going around
I need to see the
Duchess of York.
Indisposition
They do not fall under the canopy of saving face, litigation,
nor feelings. No, these situations have to be the reason
euphemisms were invented in the first place.
w
Gastro-Intestinal Disorder
Few of life’s miseries have escaped schoolyard ridicule,
occasionally even put to rhyme. Therefore,
it is not surprising that lower intestinal
disturbance inspired at least one school-age
ditty—“When you’re sliding into home and your
pants are full of foam, diarrhea, diarrhea . . .”
There is an array of frank terms that describe
not the bowel disorder itself, but the
rapid response it necessitates. Hence, far
too often we hear the runs, quickstep,
sprints, trots, scoots, scatters, etc. Yet,
admittedly, any of these are preferable to
excusing oneself to company by declaring
onset of the screaming shits. Additionally,
if on one’s vacation one has an attack of the
turistas, assigning specific ethnic blame
Going to Europe with Ralph and Earl in a Buick
If one is sick to one’s stomach, we believe that is all the
information one needs to share. Throwing up or vomiting
are also perfectly good descriptive terms. It has been
our experience, once that announcement has been made,
everyone pretty much gets out of your way on the way to
the lavatory.
We reduce ourselves to the indelicacy of delineating regurgitation
euphemisms for no other reason than it is an absolute
playground for onomatopoetic words such as gurk,
urp, and barf. With one’s head stuck down the big white
phone, one can talk to Earl, Ralph, or Cousin Sis, call
Hughie or cry Ruth.
Invariably, the most colorful are offered up by friends of the
vomitee recounting the entire event to avid listeners: flash
the hash, flay the fox, feed the fish, drive the Buick,
bow to the porcelain altar, hug the throne, toss
tacos, woof cookies, laugh at the carpet, launch
one’s lunch, de-food, bestow a Technicolor yawn,
heave Jonah, blow beets, park a custard, or go see
the Duchess of York.
Evidently, there is bovine sub-category provision for the escalation
of vomiting: to bison (be nauseated), yak (very
nauseated), or water buffalo (throw up one’s toenails).
57
Fits, disease, ill health, infirmity, breakdowns, affliction, ailment, such as Montezuma’s revenge, Dehli-belly, Mexican twostep,
Spanish squirts, Botswana bop, or Cairo crud does
nothing to improve international goodwill.
Let’s face it, unless one is sitting on the edge of an examining
table wearing nothing but a gaping hospital gown, “I
am unwell,” is pretty much all anyone needs to tell.
w
Pussyfooting around The Curse
When OTR (on the rag) or having that time
of the month, few occurrences engender more
verbal pussyfooting (again, no pun intended) than
women’s troubles.
Victorian ladies suffered from domestic affliction. So general
a term, however, could mean either the sink is stopped
up or one’s husband is a cur. Today we seldom hear of the
flowers, floods, vapors, wretched calendar, or high tide.
While weathering feminine complaint, then as now, not
only can one entertain the general or fly the red flag, one
can have the painters in, a wet weekend, endure wallflower
week, or a visit from Aunt flo. When the British
have landed (wearing red coats), the Captain is at home
and it is BENO time (there’ll be no fun).
Inevitably, the onset of one’s menstrual period requires
covering the waterfront by the wearing of a sanitary
58
product. It is preferable to specify
perineal pad or tampon by brand
name (Kotex, Tampax, etc.), else one
is left with a hopeless number of riding
analogies: the cotton bicycle, red stallion,
white sling, white horse, or
fanny mattress.
From a male point of view, this item is
identified as peter-cheater or manhole
cover which, while applicable, are in
poor taste. Pleasure garden padlock
sounds oh-so-refined, but we haven’t conjured
an occasion when this, as a topic of
general conversation, was.
w
Crawling Creatures
When once only an accusation one screamed at the opposite
sex at recess, cooties have become a renewed nuisance,
not only to school children, but to the population in general.
(There are those who blame this phenomenon entirely
on the hippie generation.) One would think such progress
would have birthed a parallel vocabulary. That seems not
the case. Euphemisms for pediculosis, while dated, are
interesting: light troops, active citizens, bosom chums,
familiars, walking dandruff, intimate friends, and seam
squirrels.
59
VNOTE: Lobby lice are found in hotels,
but of the two-legged variety, not eight.
60
Genital or crab lice are crotch pheasants and pants rabbits.
Lice are chats, hence, technically, a chatty person is
not loquacious, but slovenly.
That nightly admonition to not let them bite not withstanding,
few of us ever encounter bedbugs anymore. To the
Victorians, they were a fact of life, yet a troubling conundrum.
The more fastidious citizens of society refused to utter
the word “bug” because of its unfortunate connotation
(see The Love That Durst Not Speak Its Name). Hence,
the pesky critters were known as gentlemen in brown,
B-flats, or Norfolk Howard (which may or may not reference
either the War of the Roses or Flodden Field—far too
obscure for a non-Anglophile to ascertain).
w
Social Diseases
Disgraceful disorders refer specifically to gonorrhea
(the clap) and syphilis (the pox). Other substitutes are:
bad blood, nasty complaint, bone ache, foul disease, delicate
taint, pintle fever, fire down below, forget-me-not,
Venus’ curse, and infinite malady. Historically, however,
such misfortune appears to have incited unlimited opportunity
to disparage various ethnicities: French measles,
Neapolitan favor, Spanish gout, Irish mutton, and
Rangoon itch.
61
w Foul Emanations
There once were two men in black suits
who had trouble controlling their poots
At lunch one finally said
As the other nodded his head
We should switch now from beans to fruits
Breaking Wind
Should one befoul the
air with an unduly emphatic
noise, one has
committed a rouser.
If one got by, it was a
blind-fart also known
the acronym SBD—
silent but deadly. Anything
in between is
a backfire, backdoor
trumpet, bad powder,
buck-snort, or bathtub
bubble. In addition,
a whistle
britches can suffer
butter’s revenge or
pocket thunder.
ailment, attacks, bugs, collapse, complaint, confinement,convalescence,
62
Under these audible
circumstances (if the dog
is unavailable to blame),
someone might have stepped
on a frog, talked German
(supposed guttural reference),
cut a rusty, sliced the
cheese, or shot rabbits. If
any of these aforementioned
indiscretions occur and the
offender does not know to
look suspiciously at others,
then that person does not
deserve to inhabit polite society.
As already observed,
when one is beset by gastrointestinal
disorder, there is
little discretionary reaction
time. We shall assume any
sullying of the air, too, is
inadvertent, giving all transgressors
(you know who you
are) blanket clemency.
This is the rankest
compound of villainous smell that
ever offended nostril.
Shakespeare
63
convalescence, disability, disorder, disturbance, dose, failing
There once was a wonderful wizard
who had a great pain in his gizzard
So he ate wind and snow
at 50 below
and farted a forty day blizzard.
VFYI: Breaking wind was actually a great party trick
in the Renaissance. Even Dante wrote of a fartiste
who made a trumpet of his ass. At the turn of last
century, a French nightclub performer, Joseph Pujol,
reportedly plied his artistry in the Moulin Rouge. Although
known to play O Solo Mio on the ocarina, his
tour de force was an anal rendition of Claire de Lune.
Dog Breath
If one’s breath is strong enough to carry coal, could fell a
horse at twenty paces, or smells like the Chinese army
has walked through one’s mouth in their sweat socks,
one has halitosis.
Some small woodland creature sneaked
into his mouth and used it as a latrine.

65
In the Privy
w
Calls of Nature
In Elizabethan time, the place of ease was known as a jakes,
this was eventually corrupted to ajax. Derivation of another
more oft used term for the facilities, the loo remains under
disagreement. Some like l’eau (French for water), others
insist it lieu (as in “place”). Nonetheless, euphemisms for
the room that contains a toilet can fall into two categories.
In the first, based on the concept of contrary connotation,
we have bank, chapel, coffee shop, commons, counting
house, cottage, library, office, parliament, Spice Island,
or the temple.
The less verbally discriminating, however, relieve themselves
in a bog, cacatorium, can, compost hole, dilberry
creek, dunny, forakers, john, necessarian, place where
one coughs, siege-house, or stool of ease. In most places
in Europe, one seeks the W.C. (water closet), which seems
infinitely more reasonable than in America’s restroom
(where one may sit but does not necessarily rest).
VFYI: Yes, the story is apparently true, there actually
was a Thomas Crapper who invented a flush toilet.
w Wring Out One’s Socks
Our study has revealed a vast disparity
between the number of euphemisms for
male urination (lots) compared to those
for female (zilch). This may well fall to
the unquestionably finer sensibilities prevalent amongst the
lady-folk. Either that or if one sits to release one’s bladder,
it is a solitary, quiet event. There is very little associated
activity once one has made certain the toilet seat is down.
But he who has a penis with which to pee can even write
his name in the snow—well, for argument’s sake, we suppose
a woman could do it, but it would take a while.
Men can also take the snake for a gallop, siphon the
python, shake hands with the bishop, point Percy at the
porcelain, or train Terrance on the terracotta after which
they can shake the dew off the lily.
Either sex could give the Chinaman a music lesson, but in
that few use china pots in which to tinkle anymore, it is
generally obsolete.
As an exit excuse to relieve themselves, men go water the
horses, feed the goldfish, see how high the moon is, kill a
snake, chase a rabbit, drain the radiator, or check the ski
rack.Women seem to just go to the “Ladies” to powder
their noses (albeit a bit nonsensically, in pairs).
66
VNOTE: There was a hunt-themed restaurant that
initiated some baffled head-scratching among their patrons
by labeling their respective restrooms, Pointers and
Setters.
67
flu, indisposition, malady, malaise, prostration, seizure, syndrome,

Afflicted by Time’s
Wing’d Chariot
Be kind to your children, they will choose
your nursing home.
For those of us middle-aged (assuming everyone lives to
be 110), a person of maturity has the dwindles, is a bit
forward at the knees, long in the tooth, white-topped,
blue-haired, rusting out, old as the hills, in one’s dotage,
and no spring chicken, whiling away their time in God’s
waiting room.
CAUTION: Make very certain the senior citizen of
whom one speaks is deaf as a post before one utters any
of these little nuggets. Else, the person upon whom one
remarks is always distinguished.
He is alive, but only in the sense
that he can’t be legally buried.
Geoffrey Madan (subject of the observation unknown)
70
w
The Bucket Kick’d
Are there any grander occasions to pull out all the stops,
euphemistically speaking, than speculating on just where
the dearly departed’s place of eternal rest will be? The
late-lamented could land in Abraham’s bosom, be church
triumphant, called to a higher service, or, less optimistically,
stoking Lucifer’s fires. Non-ecumenically, a quietus
or an exitus could have occurred.
Better judgment would insist (at least insofar as the eulogy)
one avoid calling the deceased either worm food or
buzzard meat.
Pardon My Dust
Dorothy Parker’s epitaph by
Dorothy Parker
There appears to be a paradoxical
inclination by the bereaved
to insist said worm
food to action when they have
had a mortality experience
(a term popular with the mortuary
profession). Hence, we
hear the dearly departed may
suck grass, grin at daisy
roots, buy the farm, give up
the ghost, pay nature’s debt,
pull a cluck, cash in one’s
chips, fold one’s hand, coil
one’s rope, drop off the hook,
71
slip the cable, sun one’s moccasins, take the long count,
jump the last hurdle, drop the cue, ride off on the last
round-up, or answer the ever-lasting knock.
The report of my death was an exaggeration.
Mark Twain, after reading his own obituary, June 2, 1897
Suicide is our way of telling God,
you can’t fire me—I quit.
72
One of the funniest of Monty Python’s routines involved
the return of a dead parrot, “Maybe he’s just shagged out
after a long squawk—no, he’s bleeding demised, ceased
to be, bereft of life, joined the choir invisible . . .”
One can go wearing the Q (the death face rather coarsely
delineated by comics—tongue lolling out the corner of the
mouth), feet first, toes up, eyes closed, heels foremost,
face turned to the wall, on one’s shield, in a box, or in
repose . . . whence one goes to the bone orchard.
ender specific activity, femininity, manhood,
manliness, masculinity, sexuality, womanhood,
womanliness, intercourse between animate beings,
coition, coitus, copulation,
intimacy, lovemaking, G
magnetism, procreation, relations, reproduction, sensuality, sexuality
fornication, generation,
Bed is the poor
man’s opera.
Italian Proverb
74
A hard man is
good to find.
Mae West
Bewitched, Bothered
and Betwattled
R
Overborne by Desire
Few, if any, still believe that only the male gender suffers
from the pangs of lust. If proof be needed, the phenomena
of Valentino, Elvis and Chippendale’s dancers provide full
support for the theory that sexual appetence is an equal
opportunity employer. Yet, regardless how prevalent its
use, we again point out that the word horny, via horn,
comes from a root word pertaining to the erect penis.
Therefore, for absolute accuracy, a woman may be just as
lustful, dissolute, concupiscent, lascivious, libidinous,
salacious, appetent, licentious, ribald, prurient, wanton,
or humpy as a man, but, unless born a hermaphrodite, or
completed gender reassignment, she will not be horny.
Those terms describing the throes of excess cupidity can
be gender specific and—however we wish they not—the
examples that come to mind for men are pussy simple,
cunt-struck and betwattled. Although a woman may have
75
hot pants or be cocksmitten, we prefer to say either is
confounded by love (more likely confounded by lust, but
it is not our place to proselytize). The unmistakable (and
most conspicuous) concomitant of desire, however, is
borne by the male: Penis in erectus.
F Temporary Priapism
Although it might initially sound like a Viagra high, a
priapism (named after Priapus, a Greek and Roman god
of male generative power) is a medical condition that manifests
itself by an unrelenting erection which is quite painful
76
A stiff prick has
no conscience.
Ancient Proverb
and—here’s the catch—is unrelieved by sexual gratification.
We will remark only upon the temporary kind.
Unlikely as it is to be referenced in one of Martha Stewart’s
fine books, for procreative (or recreational) purposes
everyone will agree that an erection is A Good Thing.
However, if the little devil rears its head when copulation
is merely on the mind but not imminent, it might prompt
some explaining—something we did not find indexed by
Miss Manners either.
If a rise in one’s Levi’s is espied by someone peripheral to
the action, we advise the male in question to adopt an air of
innocence and complain of an involuntary biological reaction.
Genital tumescence, virile reflex, and male arousal
are equally non-accusatory terms. All are preferable to hat
rack, blue-veiner, clothes prop, tent peg, live rabbit,
proud meat, horn colic, bit of a stiff, or sporting some
wood—even if one is ready to dig post holes with it.
VNOTE: Many men consider an inadvertent hard-on
(an expression we do not endorse) as an unwitting condition
and maintain, therefore, that they should not be held
accountable for that over which they hold no control (see
The Unruly Member).
Certainly beyond one’s sway is morning pride, which, for
exonerative purposes, can be identified as matutinal erection.
Indeed, if the male can convey an appropriately
sleepy-headed look, this excuse is good until noon. If one’s
nocturnal erection is inexplicably relieved during the
night, one has shot the bishop.
Gender specific activity, femininity, manhood, manliness, masculinity,
77
78
Another actual affliction is erethism, an abnormal irritability
or responsiveness to stimulation. Erethism (it too comes
from Greek, but we did not find any reference to the god of
crankiness) is an actual disorder, which does give marginal
credibility to the otherwise questionable assertion by some
men that for arousal they need no more inducement than a
stiff breeze. One could propose either of these ailments as
reason for undue . . . excitement, but both are a bit obscure.
We suggest one assert oneself as constitutionally inclined
to passion. It sounds a bit Edwardian, but far better
than randy as a goat.
Beware: If one needs to call upon this explanation
while wearing nothing more than a trench coat, it is
probable the police will look upon one’s suffering
unsympathetically. The docket sheet will read lewd
conduct, however, not weenie-wagger.
Is that a gun in
your pocket—or are you
just glad to see me?
Mae West
F
Humbled in the Act of Love
Alternately, if the male member remains flaccid regardless
of encouragement, he is suffering from orgiastic impotence.
He has not only failed in the furrow, he has no
money in his purse, lead in his pencil, ink in his pen, nor
toothpaste in his tube. When his ability is thus compromised,
he is slack in his matrimonial duty or leaving the
pillow unprest. The culprit is itself deadwood, a dangling
participle, dolphin, flounder, lob-cock, half-mast, flat
tire, hanging Johnny, or Mr. Softy.
femininity, manhood, manliness, masculinity, fornication, generation,
79
The Long Carbine
Whether one is endowed with a howitzer or peashooter,
guns are, and always have been, phallic symbols.
In the 17th century, flintlock guns had a hammer, a flint to
produce a spark, a lockpan that held the priming powder
and a main charge behind the
musket ball. When the hammer
was released, it hit a small flint
rock igniting a spark that lit the
priming powder, and if all went
as planned, then exploded the
main charge. Sometimes this prehigh-
tech procedure backfired
and the priming powder flashed
but did not ignite the main charge.
Hence a flash in the pan, but no
shot was produced. If one had
game (or the enemy) in one’s
sights but needed time to aim,
the hammer could be partially
cocked. If the gun fired while
in this position, it went off halfcocked—
no doubt a quite vexing
and dangerous occurrence.
80
81
manhood, manliness, masculinity, fornication, generation, sexuality,
We recount all of this seeming arcane information only to
provide background to fully understand the following:
If one achieves an erection but one’s intention is thwarted by
a premature ejaculation, one has gone off half-cocked, fired
in the air, shot in the bush, misfired, or has experienced
a flash in the pan. Hanging fire occurs when the priming
powder initially failed to ignite the main charge. This term
has come to be synonymous with indecision, not as some insist,
a lengthy orgasm. These expressions have been bandied
about for both sexual and non-sexual purposes for centuries.
When we study their origins, they do make perfect sense.
Sometimes a cigar is just a cigar.
Attributed to Sigmund Freud
As much as it sounds as if it should be, we all know to
peter-out is not necessarily a sexual innuendo. In fact, the
dictionary definitions for peter are as follows: (1) to diminish,
(2) to become exhausted, (3) a vulgar name for one’s
penis, and (4) one of the twelve apostles. (Insomuch as
one’s penis (3) diminishes (1) when it becomes exhausted
(2), we will conclude that other than that the Apostle Peter
(4) must have had one, he is irrelevant to this discussion).
The French word pete means to explode weakly (also an
expulsion of intestinal gas). Peter dans la main means literally,
to come to nothing. The Dictionary of Word Origins says
that peter-out originated with miners in the mid-1800’s (an
explanation of which, trust us, is even less relevant than
the Apostle Peter). Regardless, what we do know is that to
peter-out means to give out—be spent—and usually not
with a bang (so to speak). Lest one’s lover be unconsoled,
we suggest it is time to explore The French Arts.
If one can get it up, but is sterile—firing blanks, or engaging
in a dry bob, one is improcreant.
82
Agriculturalsidebar
For those unaware, when a horse
and a donkey mate, their offspring
is a mule, a hybrid. This hybrid cannot
reproduce; hence, one occasionally
hears an improcreant male
referred to as a mule.
Dallying,
Firkytoodling, and
Finkdiddling
If one has the Jones for another, as a rule, one dares not
jump their bones without first introducing oneself. Under
the right circumstances, small talk can be dispensed with,
but it is reasonable to
insist that if copulation
is the goal, at least
a little foreplay is in
order. This is known
as canoodling.
Engaging in tonsil
hockey, chewing face,
and cow kissing means,
in baseball analogy,
one has arrived at first
base. Copping a feel
above the waist is a
double. The digital
investigation of a
83
female’s privates (otherwise known as down there) is a bit
for the finger and progression to third base (a hand down
a man’s pants is probably third base also, but one seldom
hears women using sports analogies). Reasonably, physical
congress is going all the way, because one has scored
( yes, scored) a home run.
If one ruts on another without penetration or relocation of
one’s clothing, it is called a dry hump and runners do not
advance to home. Male students of an Ivy League school
perform the Princeton rub and, we are told, no one scores
(bats, if not balls, being optional).
r
Making the Beast with Two Backs
To have a legion of suitable euphemisms for doing the big
nasty at one’s fingertips, there is a very simple formula.
Merely select any combination
of an adjective
from the first column
and noun from the
second. Voila!
84
Adjective Noun
Physical congress
Carnal knowledge
Intimate necessities
Capital embrace
Amorous favors
Connubial attention
Passionate connection
Fulfilling arrangements
Horizontal relief
Illicit affections
Nocturnal pleasures
Conjugal union
Voluptuous combat
Loving consummation
Secret deed
Lewd rites
Naughty conflict
Night association
Nuptial coupling
When in want of euphemistic eloquence, however, we often
rely on Latin as in in coitu or actus coitus. Shakespeare’s
words, however, are positively rhapsodic: The very lists of
love, to make one’s heaven in a lady’s lap, dance on one’s
heels, lay it to one’s heart, or behind door work. Indeed,
having an enseamed or fortunate bed sounds a skosh classier
than parking the pink mustang up a side street. Granted,
Shakespeare was capable of circumlocutory stretch. Groping
for trout in a peculiar river means fishing in a private
stream, which means knowing someone in the Biblical
sense. Knowing someone in the Biblical sense means
manliness, masculinity, fornication, generation, sexuality, womanhood 85
86
that one is engaging in an act of generation, androgyny
(no, not Boy George—at least not necessarily), original
sin, shame, darkness, or, in the words of Delbert McClinton,
plain ol’ makin’ love.
R We Are Not Amused
In Victorian times, illicit love referred to sexual shenanigans
between anyone outside of holy wedlock. So heinous
was such activity, it was called criminal conversation (a
more stupefyingly cryptic euphemism we have yet to behold).
If it became necessary to allude to such foul doings
in print, even so ambiguous a term as criminal conversation
was far too explicit. It was abbreviated as crim. con.
or even c.c., a ruse that was not particularly effective.
Sociologists explain
that sexual shenanigans
inside holy wedlock
were frowned on as
well, but we understand
that authorities
were seldom able to
actually make arrests
for it.
H Wreak One’s Passion
If our ancestors’ sensibilities in print were euphemized into
total obscurity, private conversations were not held to the
same standard. We note that the designation for the act of
c.c. was then, as now, often preceded
by an acquiring verb: getting,
having, copping, grabbing, nabbing,
snatching, fetching, wanting,
and occasionally, begging for any
noun used to specify the female pudendum.
Typical of these nouns are
cookie, nooky, ass, beaver, bird,
jam, pork, bob, snug, box, bull’s
eye, buns, booty, cat, pussy, crack,
cranny, crotch, down, flesh, hole,
fur-pie, honey-pot, kitty, lap, milk,
monkey, mouse, muff, naughty,
oyster, poontang, rump, squirrel,
twat, twittle, and you-know-what
(often times further identified adjectively
as a bit of). All are, even
now, substituted for the detested
“c” word.*
masculinity, fornication, generat ion, sexuality, womanhood, womanliness,
87
*Although it has been in use since the
14th century, we offer less sensibility stunning
euphemisms for the monosyllable
under the heading The Little Man and
His Boat.
On occasion, this vast array of monosyllabic choices causes
an exceedingly aroused male to abandon assigning what he
wants a specific name. He may eliminate the use of a noun
altogether and just says some (get some, want some, etc).
However brainless this sounds, we have to give credit here.
Although man is an unwitting party, Webster’s does define
the word some as “being an unknown, undetermined, or unspecified
unit or thing.” This suggests that when in rut, the
male of the species does not like to restrict his possibilities.
p To Spend
If referring to the male orgasm, shot his wad, blown off,
spooged, or popped his nuts are unnecessary. He has experienced
sexual reflex. He can also have eventuation,
emissio seminis, or effect emission
(although we admit the latter does
sound a bit like a NASA instruction).
For women, making the chimney
smoke seems not overly graphic, but
again, we prefer the French, petit
mort meaning little death. Come,
spend, and get off do refer to orgasm
for both sexes, but then, so does
climax.
88
O
The Loving Spoonful
That which is ejaculated, is just that, ejaculate. Baby batter,
duck butter, man oil, bull gravy, gism, guma glue, buttermilk,
and love juice are a bit too . . . icky.We prefer it called
semen, reproductive fluid, or even sexual discharge.
Leukorrhea is the whitish viscid discharge from the vagina
known more delicately as fleurs blanches or white flowers.
(In the 19th century, wags said this condition was occasioned
by young ladies who read overly explicit French
novels.) Those less discerning call it the twitters. Only the
outright crude would pronounce her dripping for it. Under
the heading of untoward
euphemisms,
we find snail trails
(the resultant traces
of vaginal secretion
on a woman’s leg) and
pecker tracks (dribbles
of semen on trousers—
or, occasionally, a blue
dress).
fornication, generation, sexuality, womanhood, womanliness, intercourse
Prithee, summon
ye laundress.
The cheesy sebaceous matter that collects around the
glans penis and the foreskin or the clitoris and labia minora
is neither gnat bread nor crotch cheese. It is smegma
(granted, a word that sounds only marginally better than
crotch cheese). In the fairer sex, this is understood to be
too much cheese on the taco and an indication of better
attention to personal hygiene.
90
Between two evils,
I always pick the one
I never tried before.
Mae West
r
Bow at the Altar of Eros
One should try every experience once,
excepting incest and folk-dancing.
Arnold Bax
In some societies, anything other than the missionary position
( figura veneris primi) between a churched couple is
not only considered kinky but illegal. The ancient legend
of The Dragon and St. George notwithstanding, doing it
dorsally (coitus a la vache) or doggy-style will get you jail
time. But, if the woman is on her back (star-gazing) and
the man on top (beating the bunny), evidently the kitchen
table is just fine so long as the kids are asleep.
Chinese fashion denotes a sexual arrangement found in
ancient woodcuts revealing the male and the female facing
each other in an entwined X configuration. This reference
is tainted by its association with some rather tasteless jokes
proposing it necessary to copulate with an Asian woman in
such a fashion because her pudendal crevice is supposedly
horizontal.
Q. Why don’t Frenchmen like to eat flies?
A. Because they can’t get their little legs apart.
generation, sexuality, womanhood, womanliness, intercoursebetween
91
R
Different Strokes
There once was a girl from Vancouver
Whose mouth had the strength of a Hoover;
When she turned it on high,
A week would pass by,
Before anyone could remove her.
Q. What is the definition of trust?
A. Two cannibals giving each other a blow job.
In popular vernacular, a blow job, talking to mike, polishing
the helmet, giving head, or lipstick on the dipstick
denotes achieving sexual satisfaction through oral stimulation.
Either sex can be a goot-gobbler, piccolo player,
peter-eater, lick spigot, dicky-licker, or mouth-whore
(one particularly well-practiced is said to be able to suck
the chrome off a trailer hitch). Introduce the use of Latin
and a modicum of class drapes any non-orthogenital sex
act no matter how indelicate: penilingus, fellatio, or irrumatio
(root word, to suck). We add that a female who fellates
is a fellatrice.
Talking to the canoe driver, nose painting,
sneezing in the basket, yodeling in
the canyon, gamahuching, whistling in
the dark, eating at the Y, having a hairburger,
mouth music, lickety-split, and
muff-diving mean cunnilingus. (As this activity is not new,
it is not surprising that those mutton-chop sideburns were
92
called depth markers long before the sixties.) Loop de
loop, 69, or soixante neuf is mutual oral-genital stimulation.
Two women involved in such activity are engaged in
bird-washing.
Granted, shooting the beaver (or, squirrel, or moon)
could pertain to a night out with one’s favorite scent
hound, but most likely it references female exhibitionism.
Alternately, a female-attired male prostitute hides his
candy (and occasionally said candy is discovered by an unamused
client). Goober-grabber usually means a forward
woman. We note however, that goobers can be grabbed by
either sex. Sadly, we can offer no socially acceptable euphemisms
for these last entries.
sexuality, womanhood, womanliness, intercourse between animate 93
Are you a lesbian?
Are you my alternative?
O
The Love That Durst Not Speak Its Name
or the Unmentionable Vice
Paedictcato, crimen innomentatum, coitus in ano—gay
sex is still called buggery in some circles. Also, concubitus
cum persona ejus dem sexus, alternative proclivities, or
same-sex-oriented. (Although the receiver in this act has
been called a pillow-biter, we find that distinction to be
pan-sexual.)
94
95
womanho od, womanliness, intercourse between animate beings, coiti In the unlikelihood one finds it necessary to note the sexual
inclinations of another, we hold that it is best to cleanse one’s
euphemistic repertoire of the terms Nancy-boy, friend of
Dorothy’s (referencing Parker, not the Wizard of Oz—
although one’s confusion on this point might be understandable),
confirmed bachelor, light in the loafers, playing
for the pink team, pouff, and no bull-fighter. Sissybritches
and pantywaist, along with manhole inspector,
or rump ranger should also be avoided. Gunsel (derivation
of the German for gosling) is passably PC if the person
to whom one refers is also a jerk.
Daisy (along with daffodil and pansy) has long been used
as an insulting term for a gay man. That notwithstanding,
participation in a daisy chain would involve a group of
like-minded individuals engaging in simultaneous, er, sexual
acts.
VFYI: It was not until the second decade of the
twentieth century that the word faggot came to be
a disparaging term for a male homosexual. In the
middle ages, faggot meant a bundle of sticks, and,
understandably, fag eventually became slang for
cigarette. In the 1800’s, it also meant to work hard
or become exhausted (by having to cut all that fire
wood?). Its contemporary connotation possibly stems
from its use to describe the tradition of young English
boarding school boys who act as a servant to older
students. The rumors about what actually occurs in
single-sex schools when hormones rage undoubtedly
fanned the fires of this particular vulgarism.
96
As for her, she may be somewhat butch, but rug-muncher,
lesbyterian, and bull-dyke are understandably offensive.
(For further aspersions on masculine women, see Dog City.)
o
Switch Hitting
If one has taken a position of non-discrimination about the
sexual orientation of one’s romantic encounters, one is referred
to on the street as ambisextrous, double-gaited,
batting and bowling, AC-DC, trolling both sides of the
stream, driving a two-way street, or buttering both sides
of the bread.We, however, insist said person is influenced
by an amphi-genous inversion.
w Fetishes and General Freakiness
A widow whose singular vice
was to keep her late husband on ice.
Said “It’s been hard since I lost him-
But, Ill never defrost him!
Cold comfort, but cheap at the price.”
A hundred years ago the learned did not call pornography
smut, but facetiae or curiosa. By the twentieth century, an
abnormal interest in obscene material was known as coprophilia,
although more technically that is the use of feces
for sexual excitement. Those who revel in such activity are
indelicately referred to as fecal-freaks, kitchen cleaners,
and felch queens. To felch means to perform anilingus*
(tookus-lingus to our less somber fellow beings). A pound
cake-queen enjoys being defecated on. Anyone engaged in
this base pastime (beyond the age of two) is taking part in
a Boston Tea Party. An associated activity, golden showers,
is more formally termed micturation. (Our informawomanliness,
intercourse between animate beings, coition, coitus,
97
*If one needs it spelled out, anilingus is to the anus what cunnilingus is
to the cun . . . er, vagina.
tion notwithstanding, polite society prefers that if these . . .
entertainments exist, they pass unremarked.)
Apparently, there is a “queen” designation to fit every
manner of sexual diversion. For instance, one who is
under the spell of a foot fetish (equus eroticism)
is known as a shrimp-queen (referring to the
shape of the toes), enjoys sex in the great
outdoors: a green-queen, or in public:
a tea room-queen.
Once: a philosopher, twice: a pervert!”
Voltaire
(turning down his second invitation to an orgy)
If generously lubricated by cooking oil, your run-of-themill
orgy is a Mazola party. Team cream, gang bang, round
pound, and bunch punch appear self-explanatory—this
poetry occurring, undoubtedly, when one trots out one’s
pussy to pull a train, or choo-choo.
98
Said the masochist to the sadist: “Beat me, beat me!”
Replied the sadist: “No.”
Originally, ascetics employed ritual floggings to induce discipline
through strict self-denial by means of mortification
of the flesh. Evidently, somewhere in this mix of flogging
and religious frenzy, sexual titillation reared its ubiquitous
head. Pious monks in robes metamorphosed into leatherclad
dominatrices wielding wicked-looking whips. Indeed,
if one has not actually experienced it, one has certainly
heard of being whipped into a frenzy.
intercourse between animate beings, coition, coitus, copulation,fornication,
99
My problem is reconciling my gross habits
to my net income.
Attributed to Errol Flynn
There is bondage and sado-masochism. In bondage one
finds erotic stimulation either in exacting or under subjugation.
One who finds sexual satisfaction by inflicting pain on
another is a sadist—not slap artist nor fire-queen (not to
be confused with a flaming-queen who is a relatively benign,
if outrageously flamboyant, male homosexual).
Flagellation (not to be confused with flatulence—although
it is noted that foundered horses used to be flogged in order
to force them to pass gas) can be inflicted either by a
willing compatriot or one’s own hand. Indeed, a masochist
gets off by being beaten literally or figuratively. And while
most people know that sadism found its name by way of
the infamous Marquis DeSade, few realize masochism
100
was named for the German novelist, Leopold von Sacher-
Masoch who evidently also wrote of what he lived.
VNOTE: There is the term Zooerasty, but we decided
that there is some information we just do not want to have.
Clearly, however, limerick writers have been much amused
with the notion.
The Right Reverend Dean of St. Just
Was consumed with erotical lust
He buggered three men
Two mice and a hen
And a little green lizard that bust.
between animate beings, coition, coitus, copulation, fornication, generation,
101
Sex “Sain et Sauf ”
One may hear of peek-freaks and peer-queers, but they
are voyeurs. If one gets one’s jollies by listening, one is an
ecouteur.
102
103
animate beings, coition, coitus, copulation, fornication, generation, w
Dishearten
If a man is sexually aroused and then brought to satisfaction
by manual manipulation of his member by another, he
has been brought down by hand, a more circumspect term
for a hand-job, spitting white, or upshot. (The person
who supplied the hand is a peter-beater who caught an
oyster otherwise known as “sweetheart.”)
No Glove—No Love
It has been some time since one would hear of a condom
wearer as fighting in armor. So ancient is the term, it very
nearly predates the invention of circular protection itself.
It may surprise some to know that condoms were in use as
early as Elizabethan times although they did not become
common (and then only in the large cities) until two centuries
later.
These early sheaths were often made of material such as
sheepskin (ouch), fish bladder (yuck) and eventually, rubber.
Indeed, Casanova is said to have bragged of owning a
pretty little linen ditty (un petit linges) with a delicate drawstring
ribbon—the upper class does have its privileges.
Some of these early protectors were said to bear the portraits
of famous persons—the significance of which does
not immediately leap to mind. Perhaps a modern equivalent
is a lunch box bearing the image of Mighty Morphin’
Power Rangers—but we suppose we digress.
Once these handy little devices were perfected, euphemisms
did abound—keeping down the census, taking a dry run,
or wearing a cheater.Wearing a fearnought, lace curtain,
diving suit, head gasket, nightcap, catcher’s mitt, rubber
cookie, overcoat, raincoat, saddle, shower cap, lifepreserver,
washer, party hat, Dutch cap, phallic thimble,
or, less preferably, a cum drum could reference either a
condom, or a diaphragm. A pussy butterfly is an intrauterine
device or IUD.
Most commonly, however, a protective sheath has been
called, variously, a French, Italian, Spanish, or American
letter. (We did not find indication that it has been called an
English letter. Hmmm.)
Malthus was an English curate. The Maltusian
Theory posits that population tends to increase
geometrically and resources or means of subsistence,
arithmetically. Hard-liners believed that
unless procreation was checked by moral restraint
or even disaster (pestilence, famine, or
war) unrelenting poverty and its resultant human
degradation would inevitably result. This doctrine
is often cited as an excuse for the use of
birth control, hence, labeling any non-procreant
sex, Malthusian.
A vasectomy means not ever having
to say you’re sorry.
w
Sex a Cappella
The rhythm method may indeed be chancy, but it is still a
bit graceless to refer to it as playing Vatican roulette. Riding
bareback means intercourse without protection. On
occasion, condom-less sex is called making faces in that it
often leads to producing babies.
VFYI: As the male anatomy is limited in its ability
to produce semen rapidly, when a man is fortunate
enough as to enjoy what is called a triple header, a
fourth round might result in his coming air.
NOTE: In England if someone tells you to keep your
pecker up, it is indeed an expression of encouragement.
However, not necessarily what one imagines. In Great
Britain, pecker can mean chin.
NOTE, PART 2: There was a big hoo-haw over there when
the American movie Free Willy premiered because willy
does not mean chin in England.
NOTE, PART 3: If fortune has smiled upon one to the extent
that one has somehow missed seeing any of the Austin
Powers’ movies, please understand, in Great Britain, a
shag is not a 70’s haircut.
beings, coition, coitus, copulation, fornication, generation, intimacy, 105
My wife doesn’t understand me.We’re only staying
together for the kids. I’ve never done this before. I only
shoot blanks. If you get pregnant, honey, I’ll take care of you.
I’ll respect you in the morning. I promise it won’t come in your mouth.
107
The check’s in the mail. I’ll call you.
Men Behaving
Badly
Although snatch can be either verb or noun, in either
sense it usually refers to rapid copulation. Irish foreplay,
sometimes known as brace yourself Bridget, is essentially
a Wham Bam, Thank You Ma’am with a lilt. Jewish foreplay,
we have been told, involves only extended pleading.
A flyer can be either prone or vertical. If an upright quicky,
it is also known as a knee-trembler. Occasionally this excursion
doesn’t even entail intercourse. To cop a feel is either
with or without permission and is usually performed
nose open (for those unfamiliar with animal husbandry—
it describes an eager bull) possibly with it in his hand
(which clearly does not).
If it need be said, we
endorse neither the
above behavior nor
the euphemisms, we
only offer them for
elucidative purposes.
108
He would fuck a snake if someone
would hold its head.
109
One need not call a gestating woman knocked up*. She
is enceinte, fecund, or expecting. While we do not find
preggers offensive, round-wombed, about to find pups,
apron-up, one is up the spout, a lap full, or a bun in the
oven do not offer the proper respect as does experiencing
a blessed event.
*Again, this is a phrase to use judiciously in England. For there if a
woman has been knocked up it means she has merely experienced someone
rapping on her door. Whether or not that leads to a shotgun wedding
is beyond our polite speculation.
A Pea in the Pod
110
Misbegotten
The word bastard was once solely a comment on one’s
happenstance of birth. Some say the word came from the
French, fils de bast or packsaddle child.Born on the wrong
side of the blanket (the foul event producing said infant
taking place other than within the marriage bed) or born
in the vestry (left on the church steps) were other roundabout
ways of disparaging one’s heritage. Also, a counterfeit,
wood colt, stall whimper, nullius filius, or side-slip
(as in oops). Producing a child out of wedlock to Shakespeare
was to tender a fool. More specifically in the chain
of generations, a child born out of wedlock to a mother
Only if its
done right.
Is sex dirty?
who was of illegitimate birth herself, was said to be a bellbastard.
Today, the word bastard, as used in this sense is so out of
fashion as to be irrelevant. Indeed, most probably all these
euphemisms have been overridden by “DNA test” and
“child support payments.”
beings, coition, coitus, copulation, fornication, generation, intimacy,
111
112
Unknown to Man
In historical romance novels, a virgin (depending on the
genre) was either picked, plucked, ruined, trimmed,
deflowered, or devirginated. When a sweet young thing
succumbed to seduction, she was persuaded to venery.
Until then she was a chaste treasure, virgin patent, or
rosebud, possibly remaining that way by wearing iron
knickers. Digital investigation of the vagina comes under
the heading of heavy petting. For
anyone in need of exact terminology—
in legalese, carnal knowledge
is the slightest penetration of the
vulva. If one is messing with jailbait,
one is looking at jail time.
Even if she spends more time on
her knees than a priest, she is still
technically a virgin—a demi-vierge—
never having gone all the way.
Indeed, if the results of recently
published, if somewhat unscientific, polls are to believed,
by today’s standards, a fellatio generating enough suction
to suck a golf ball through a garden hose would not be
considered a sex act. We believe this is now known as
The Clinton Exculpation.
In scholarly tomes,
one may come across
the term, claustrum
virginale. This reference
is a bit of a
stretch in that claustrum
is one of the
four basal ganglia in
each cerebral hemisphere
that consists
of a thin lamina of
gray matter separated
from the lenticular
nucleus by a layer of
white matter (whew).
However, we believe
it is more likely that
it is derived from
claustral—cloister.
coition, coitus, copulation , fornication, generation, intimacy, lovemaking,
113
114
Trafficking
with Oneself
95% of people masturbate.
The other 5% just lie about it.
If there are no obliging friends about and one does not care
to avail oneself of commercial outlets (brothels), genital
stimulation via phallengetic motion may be the only alternative
for one’s sexual . . . disposal. Still condemned by
many, the solitary vice has managed not only to survive,
but flourish, even under the threat of blindness, insanity,
hairy palms and your mother’s (and the Church’s) wrath.
There was a young fellow from Yale
Whose face was exceedingly pale.
He spent his vacation
In self-masturbation
Because of the high price of tail.
Many believe masturbation is synonymous with Onanism.
In the Bible, however, Onan’s sin, scholars insist, was not
coitus, copulation, fornication, generation, intimacy, lovemaking,magn
115
masturbation at all but coitus interruptus. (Regardless, he
was slain by God for this heinous sin and let that be a lesson
to us all.) This misunderstanding may well have been a
deliberate Victorian manipulation of the scriptures laying
the groundwork for generations of adolescent guilt-trips.
Additionally, as Onan was a guy, these guilt-trips were
taken primarily by young men. The Victorian rationale
was that all womankind (wives, daughters, mothers—i.e.
any female a Victorian man was not trying to seduce) were
chaste of mind and body. Indeed, most doctors of the era
persisted with the fallacy that ladies were devoid of sexual
desire; therefore, the possibility of these women having an
orgasm with or without the aid of a penis did not exist.
Hence, it is the masculine population whose indiscriminate
nocturnal . . . twiddling came under intense scrutiny and
abject condemnation. So strong was the shame, we still
hear self-pleasuring condemned as genital pollution, selfabuse,
and the sin of youth.
Wanking may be the more oft-used term, but for those
formal occasions, digitally oscillating one’s penis or selfinduced
penile regurgitation would be preferable. In
French, se branler, se crosser, se faire les cinq doigts de la
main, se passer un poignet, or la veuve poignet (branler—to
shake, crosser—to club, faire—perform, cinq doigts—five
fingers, passer—happen, poignet—wrist, veuve—widow—
you do the math.) If merely fiddling with the equipment,
one is playing pocket pool.
As the dogma surrounding this abhorrent act is so intense
and the deed is fraught with such euphemistic eloquence, it
is an absolute necessity to be generous in recounting them.
w
Take Herman to the Circus
The chasm separating proper Victorian sensibility and that
of the unwashed masses about who was and was not the
116
117
Master of One’s Domain (a term “Seinfeld” did not invent)
can be succinctly defined. For every shaming euphemism,
we find dozens that are unrepentant (and if not actually
poetry, one can appreciate the rhyme): bleed the weed,
bang your wang, shake the snake, ram the ham, rope the
Pope, spank the frank, squeeze the cheese, stroke the
bloke, crank one’s whank, flog the log, lube the tube,
wanker the anchor, hone the cone, strain the vein, pump
the stump, torque the fork, thump the pump, tickle the
pickle, jerkin’ the gherkin, yank your plank, tease the
weasel, fist your mister, punchin’ the munchkin and
make the scene with a magazine.
Some are, if not poetic, at least alliterative: burp the baby,
cuddle the Kielbasa, fondle the fig, punish Percy in the
palm, smash the stake, hug the hog, stir one’s stew,
strangle the stogie, slap pappy, bash, beat, or bop the
bishop, pummel the priest, wave the wand, whip one’s
copulation, fornication, generat ion, intimacy, lovemaking, magnetis m,
wire, paddle the pickle, bang the banjo, dash one’s
doodle, grip the gorilla, and prime one’s pump.
There are dated euphemisms—get the German soldiers
marching, have a date with Rosy Palms, polish one’s
helmet, phone the czar, take Herman to the circus, feed
the ducks, clean one’s rifle, give a one gun salute, and
choke the sheriff and wait for the posse to come; and
contemporary—adjust your set, go on Pee Wee’s little
adventure, boot up the hard drive, paint a small Jackson
Pollock, stretch the turtleneck, play the single-string
air guitar, feed the Kleenex, tweak your twinkie, do
the Han Solo, romance the bone, choke Kojak, play
Uno, R2 your D2, upgrade your hardware, test fire
the love-rocket.
There once was a man named McGill,
Whose acts grew exceedingly ill,
He insisted on habits,
involving white rabbits,
and a bird with a flexible bill.
The animal kingdom is not only not exempt, it is well represented:
gag the maggot, lope the mule, wax the dolphin,
burp the worm, look for ticks, and corral the tadpoles.
Granted the prominent feature of euphemisms for
this activity is hardly political correctness, a few examples
would outright enrage PETA: club the baby seal, violate
the hedge-hog, flog the dolphin, suffocate the trout,
pound the pup, pump the python, or choke the chicken.
118
119
I swear, you could ask your
class if they’d had sex with goats
and the next thing you’d hear
is somebody asking,
‘Define sex.’
Overheard from a College Professor
Everything else falls into the category of one-night stands:
come to grips with oneself, climb Mount Baldy, audition
the finger puppets, beat the bald-headed bandit, do the
five-finger solo, iron the wrinkles, make the bald man
puke, shake hands with the unemployed, rough up the
suspect, summon the genie, butter the corn, kill the
snake, seed the rug, paint the ceiling, dig for change,
fire the flesh musket, frost the pastries, mangle the
midget, unload the gun, varnish the flagpole, and cane
the vandal.
While amusing, none of the above makes quite the statement
as does address Congress.
120
w
Searching for Spock
Nymphomaniacal Jill
Tried a dynamite stick for a thrill
They found her vagina
Way over in China
And bits of her tits in Brazil
Contrary to popular opinion, self-pleasuring (even, experts
say, obsessive self-pleasuring) is not unique to the male of
the species. We note that masculine verbal images involve
all manner of phallic symbols such as guns and beasts.
Those feminine (aside from allusions to small furry creatures)
are quite dissimilar. (These are offered, we swear,
only for their sociological enlightenment value.)
There are culinary references—preheat the oven, baste
the beaver, grease the skillet, butter the muffin, skim the
cream, sort the oysters, stir the cauldron, roll the dough,
and stuff the taco. In the aforementioned animal category—
caress the kitty, dunk the beaver, feed the bearded clam,
fan the fur, make the kitty purr, roll the mink, floss the
cat, and check the foxhole. Specific to the feminine sex
too are dig for one’s keys, candle bashing, apply lip gloss,
dust the end table, air the orchid, do one’s nails (also
soak in Palmolive), get a stain out of the carpet, part the
petals, polish the pearl, do something for chapped lips,
gusset typing, unclog the drain, ride side-saddle, paddle
the pink canoe, wake the butterfly, and work in the garden.
fornication, generation, intimacy, lovemaking, magne tism, procreatio 121
122
Fare un ditolino (Italian: to do a little finger)
Specific to self-digitation is to drown the man in the boat,
circle the knoll, flip through the pages, grope the grotto,
leglock the pillow, null the void, read Braille, stroke the
furnace, surf the channel, play the silent trombone, do
the two-finger slot rumba, play solitaire, check one’s oil,
tickle one’s fancy, tiptoe through the two-lips, check the
status of the I /O port, bury the knuckle, and search for
Spock. Oh yes, females can rhyme too: scratch the patch,
scuff the muff, itch the ditch, and rubbin’ the nubbin.
Not specific to women, but peculiar to them is the polymorphously
perverse orgasm where the entire body, not
123
generation, intimacy, lovemaking, magne t ism, procreation, relations, just its genitals, is a source of erotic pleasure. Without
direct clitoral stimulation, some women say psychic
orgasm can be achieved. All one needs is either a risqué
novel or a full bladder. No doubt, euphemisms have been
coined just for such occurrences, but we are still digesting
the information.
w
Pokin’ the Pucker
The word dildo has been in use since the 16th century, but
there is evidence the item was created not long after Eve
herself. The ancient Greeks called them godemiches, the
French, bijoux indiscrets. Made of glass or velvet, they
were also known as paprilla, cazzi, consolateurs, and bienfaiteurs.
Whatever one’s position on the use of mechanical
devices to achieve sexual fulfillment, we can agree that
today’s battery-powered vibrators are
a vast improvement over 18th century
ladies’ penchant for turkey necks
(headless, carcass-less turkey necks
we pray, else it’s a whole other story).
Today, if a woman employs an indiscreet toy too . . . enthusiastically
upon herself, the medical community refers
to it as a picket fence injury. Masturbatory mishaps by the
male of the species seem to revolve around where, shall we
say, the evidence might happen to land and is rarely lethal
(notwithstanding Portnoy’s worry about the bathroom light
bulb). As far as we have evidence, that story about the
young man whose investigation of the erotic effects of a
vacuum cleaner hose left him with a severely elongated
penis, is only an urban legend.
Although many believe that inflatable dolls are a recent
phenomenon, we understand that there was such a thing for
horny sailors called a Dutch sea wife. How anatomically
correct these dolls were remains unascertained, but a
Dutch husband was a bed bolster.
124
Were it not for imagination, a man
would be as happy in the arms of a
chambermaid as of a Duchess.
Samuel Johnson
w
Fleshly Treason
What men call gallantry and the gods, adultery
Is much more common where the climate’s sultry
Lord Byron
Let us make this abundantly clear: adultery is what others
commit. However, if one’s own shoes find themselves under
another’s bed, one has suffered an error of the blood.
A spouse’s infidelity is grounds for divorce (if not an
exchange of gunfire). If one wanders a bit (“I was thinking
of you the whole time, honey”), it begs forgiveness.
In the 1900s, those guilty of facile morals committed a
marriage breach by engaging in illicit embraces. Now, if
intimacy, lovemaking, magne t ism, procreation, relations, reproduction,
125
one’s affections stray, it is called offshore drilling, parallel
parking, or extra curricular activity. In any case, one
is likely to be the recipient of a folded piece of paper announcing
one’s imminent matchruptcy, dewife-ing, or
splitting of the sheets spelled D-I-V-O-R-C-E and the
lawyers won’t be kind. To remain faithful to one’s vows,
however, is to keep league and truce.
If one is not in a committed relationship and simply
screwing around, it is an affaire d’ amour (which is French
for one night stand). Hence, one is in an irregular situation,
breaking the pale, and indecorously familiar.
126
French does offer us very specific nuggets of circumlocutory
gold. Cinq-a-sept refers to a customary afternoon period
for quick assignations, hence the slang, un petit cinqa-
sept—a matinee; Le demon de midi—demon at noon:
mid-life crisis or middle-aged men or women with
eighteen-year-olds. (Ever notice that you never see someone
living solely on social security sporting arm candy?)
Skin off old dead horses is to marry one’s mistress.
Q. How are a redneck divorce and a tornado alike?
A. Somebody’s gonna lose a trailer.
Of a man who was very unhappy in marriage and remarried
immediately after his wife died, Samuel Johnson observed
that it was “triumph of hope over experience.”
w
Family Jewels
Baubles, Bangles and Beads
In polite company, they are privates, urogenital concern,
apparatus, loins, or vitals. Indeed, sports announcers tend
to identify this area as the groin or lower abdomen, apparently
believing that to broadcast a more accurate “Ouch,
that shot to the nuts had to hurt!” is not FCC-becoming.
In less discreet society, the virilia are called doodads, marriage
tackle, peculiar members, nads (short for gonads),
lovemaking, magne t ism, procreatio n, relations, reproduction, sensuality,
127
wares, Adam’s arsenal, stick and bangers, lingam (from
the Kama Sutra), credentials, testimonials, pencil and
tassels, and master of ceremonies.
Whirleygigs, baubles, jinglebangers, whenneymegs,
clangers, clappers, and bangers betray a great deal of fascination
by the male of the species with their own apparatus.
Regardless how noisy they all sound, none have, as far as is
known, ever actually made any audible noise (not counting
that poor man with testicular cancer whose doctor experimented
by replacing his with ball-bearings—they didn’t
rust but his scrotum drooped abysmally).
Not unexpectedly, there is a specific term for the relaxation
of scrotum—the whiffles. There is an equally curious name
for the foreskin—whickerbill.
w
The Unruly Member (My Body’s Captain)
There was a man from Ghent
Who had a penis so long it bent
It was so much trouble
That he kept it double
And instead of coming he went.
Only the female pudendum rivals the membrum virile for
euphemistic grandiloquence such as purple helmeted warrior
of love. Are anthenaeum, Aaron’s rod, carnal stump,
128
Q. What did Adam say to Eve?
A. Stand back, I don’t know how big this thing gets!
husbandman of nature, lance of love, man-root, torch of
cupid, or dribbling dart of love too overwrought? May
we suggest swaydangle, larydoodle, tallywacker, flapperprick,
or bean-tosser (a term of which one dares not guess
a derivation). The basis for bald-headed hermit and oneeyed
trouser snake seem far less obscure.
The ancient term for the male appendage was yard. This,
mercifully, was when this word meant a stick or rod, not
thirty-six inches. Almost as ancient is man’s inclination to
give his appendage a pet name. This selection often reflects
the esteem (or lack thereof ) in which said member is held
by its owner—Big Steve, Pile-Driver, merry-maker,
General Custer, He Who Must Be Obeyed, Old Faithless,
or Sleeping Beauty. For pomposity, one cannot top
plenipo, an abbreviation of plenipotentiary, which means
“a diplomatic agent invested with full power to transact
business.” We also hear Tommy, Dick, Harry, Willie,
Giorgio, Percy, and Peter (which reminds us that it was
Groucho Marx who observed that actor Peter O’Toole’s
name was a penis euphemism times two).
The terms bayonet, bazooka, blade,
brachmard, dagger, dirk, gun, sword, and
weapon reflect the already acknowledged
phallic/weapon imagery.
One can, of course, always call it a penis.
130
131
w
The Upright Wink
or The little man and his boat
Once described by some wit as the factotum (that which
controls all things), “it” is also demesnes (female domain).
If one cannot bring oneself to say the word vagina, try
hypogastric cranny (which will serve the purpose, no
doubt, of completely bewildering one’s audience). More
easily interpreted, if not particularly concise, we have yoni,
love’s sweet quiver, delta of Venus, tufted love mound,
Alter of Hymen, Adam’s own (beg pardon?), nonnynonny,
the Ace of Spades (clearly presaged the advent of
Nair) and the cabbage garden (which does explain that
inane story about where babies came from).
There once was a woman from China,
Who went to sea on a liner,
She slipped on the deck,
And twisted her neck,
And now can see up her vagina.
The mons veneris has generated a whole school of hirsute
appellations, namely: bearded clam, bearskin, brush
brakes, bush, belly whiskers, thicket, down, nature’s
veil, fleece, fluff, motte, and beaver (which alone accounts
for the derivations beaver-den, beaver-flick, beaver hunt,
beaver pose, beaver-retriever, and the ever-popular
beaver-shot). The entire range of pussy metaphors would
require corresponding redundancy and offers no particular
revelations apart from the clearly onomapoetic term kweef
which can most briefly be described as a pussy-fart.
There was a young lady named Brent
With a cunt of enormous extent
And so deep and so wide
The acoustics inside
Were so good you could hear when you spent
132
There is a rather indiscreet tale of a man who claims to have encountered
a vaginal cleft so commodious that upon intromission he
discovered “another bugger looking for his hat.”
w
Nature’s fonts
I once knew two sisters whose breasts
They exposed to their thunderstruck guests
A policeman was called
And the young chap, enthralled
Ogled, but made no arrests.
The female breasts. Or appurtenances,
bosom, bust, front, mammary
glands, mammilla, teats,
balcony, big brown eyes, headlights,
lung warts, love bubbles, baloobas,
bazookas, bazoongies, garbonzas,
gazongas, kajoobies, toraborahs,
maracas, lollies, diddies, or bodacious
ta-tas often encased in an
over-the-shoulder-boulder-holder
or flopper stopper.
Wasn’t it one of the “friends” on TV
who observed that it was God’s plan
magnetism, procreation, relat ions, reproduction, sensuality, sexualit 133
that men didn’t have boobs because, if they did, “they’d
never get anything done”?
I knew a young lady named Claire,
Who possessed a magnificent pair,
Or that’s what I thought,
Till I saw one caught,
On a thorn and begin losing air.
134
beings, coition, coitus, copulation, forni cation, generation, intimacy, lovemaking, 135
136
aft, mentally strange, barmy, unzipped,
batt y, berserk, insane, bonkers, cracked,
loony, crazed, cuckoo, demented, deranged, peculiar,
erratic, flaky, fruity, idiotic, insane, lunatic, mad, maniacal, nuts, potty,
psycho, touched, unbalanced, unglued, unhinged, wacky
D135-
We are all born mad.
Some remain so.
Samuel Becket
The Gazelles are
in the Garden
w
Cerebrally Challenged
As spoken by a Texan, it is not “ig-nor-ant,” but “ig-nernt,”
thus altering the meaning from “unlearned” to “too stupid
to live.” Our exploration of euphemisms for ignorance will
be specific to the second definition.
Stupidity is the deliberate cultivation of ignorance.
William Gaddis
Obtuse, dull, imperceptive, opaque, stolid, unintelligent
—in other words, a peckerhead, one whose intellect is rivaled
only by garden tools, got off the Clue Bus a couple
137
They say that the difference between
genius and stupidity is that
genius has its limits.
of stops early, is dumber than a box of hair and couldn’t
pour water out of a boot with instructions on the heel.
The cerebrally challenged can occasionally be identified
by physical characteristics: narrow between the eyes,
green as a gourd, room temperature IQ, wanting in the
upper story, more nostril hair than sense, numb nuts,
mouth-breather, and flat Peter (trampled penis syndrome).
138
Statistics say that one out
of every four Americans suffers from
some form of mental illness. If your
three best friends look okay,
then it’s you.
If one has too much yardage between the goal posts, one
is likely smart as bait, not the sharpest tool in the shed,
the brightest crayon in the box, nor shiniest bulb on the
Christmas tree. If one is as fat as a hen in the forehead
one is in want of understanding, thick as a plank, dense
as a post, dumber than a bag of hammers, experiencing a
leak in the think-tank, or suffering a crop failure and is
definitely officer material.
w
Whiff of the March Hare
Insanity doesn’t only run in my family, it actually gallops.
Anon.
w
Non Compos Mentis
Although lunatic is a perfectly good word to describe
someone who is absolutely crackers, this loss of reason is
rarely addressed head-on. Circumlocution often implies the
139
Daft, mentally strange, barmy, unzipped, batty,berserk,
afflicted is not properly wound, as in wandered, unhinged,
or unglued.
When someone is dotty, it is not unusual to allude to something
lacking; therefore they are—
A few bricks shy of a load.
Couple of bubbles off plumb.
Several fries short of a happy meal.
One midget shy of a Fellini movie.
Two clowns short of a circus.
One Fruit Loop shy of a full bowl.
One taco short of a combination plate.
A few feathers short of a whole duck.
A few beers shy of a six-pack.
A few peas short of a casserole.
Or:
Both oars aren’t in the water.
Only 50 cards in the deck.
Wants for some pence in the shilling.
Cheese slid off one’s cracker.
All one’s dogs aren’t barking.
One’s elevator doesn’t go all the way to the top.
Lights are on but no one is at home.
No seeds in the pumpkin.
Doesn’t have all his cornflakes in one box.
The wheel’s spinning, but the hamster’s dead.
Her sewing machine’s out of thread.
His antenna doesn’t pick up all the channels.
His belt doesn’t go through all the loops.
Missing a few buttons on the remote control.
140
No grain in the silo.
Receiver is off the hook.
All foam, no root beer.
w
A Stranger to Reason
If absolutely nuts, one is playing
with the squirrels, has walnut
storage disease, or is several nuts
short of a full pouch. In the pinball
game of life, if one’s flippers
are a little further apart than
most, one is dicked in the nob,
blinky (milk about to sour), off
one’s napper, has a slate loose, is
damp in the attic, one’s slinky is
in a kink, one’s skylight leaks, or
one’s drawers are left open.
Of course, if one is wealthy anything
queer one says or does is
merely eccentric.
141
insane, bonkers, cracked, loony, crazed, cuckoo,
142
VCautionv
Even a fool can be right
once in a while.
’N What?
2 Or 5
Ode to Dan Rather
Lower’n the rent on a burning building
Jumpier’n virgin at a prison rodeo
Emptier’n a eunuch’s underpants
Colder’n a well digger’s ass
Stiffer’n a preacher’s prick at a wedding
Tighter’n the bark on a tree
Smoother’n snot on a doorknob
Happier’n a coon on an ear of corn
Awkward’n a cow on skates
Lower’n a snake’s belly
Slicker’n owl shit
Clumsier’n a pig on ice
Smaller’n a bar of soap after a hard day’s wash
Colder’n a copper toilet seat in the Klondike
Deafer’n an adder
Fuller’n a tick
Hotter’n a fresh fucked fox in a forest fire
Happier’n a man who spent the day sorting
out his concubine collection
Sicker’n a pizzened pup
Finer’n bee’s wings
Noisier’n skeletons fucking on a tin roof
Uselesser’n pantyhose on a pig
Panickier’n a pig in a packing plant
Jittery’n than a long-tailed cat in a room
full of rockers
Grinnin’ like a possum eatin’ cactus
Happier’n a baby in barrel of tits
Busier’n a dildo in a harem
Icier’n the shady side of a banker’s heart
Madder’n a wet hen
Slowr’n a wet week
Happier’n clams in high water
Happier’n a puppy with two peters
6
143
demented, deranged, peculiar, erratic, flaky, fruity
The author acknowledges the Dover Publications Pictorial
Archive series, and the satirical graphics of Cruikshank,
Gillray, Hogarth, and Rowlandson.
problems. They use the past to reflect the present in hopes of
resolving its crises. Their novels explore how political history
is shaped by individuals or how it shapes them in turn.
Related Historical Events: Like the American Revolution,
the French Revolution was launched in the spirit of rational
thought and political liberty. But these ideals of the 18thcentury
Enlightenment period were soon compromised when
the French Revolution devolved into the “Terror”—a violent
period of beheadings by the very citizens who overthrew the
tyrannous French monarchy. The French Revolution cast a
long shadow into 19th-century Britain, as industrialization
seemed to divide the English population into the rich and
poor. Many people feared the oppressed working class
would start an English Revolution, but a series of political
compromises and wake-up calls like Dickens’s A Tale of Two
Cities helped to avert the potential crisis.
Extra Credit
Serial fiction: Like many of Dickens’s novels, A Tale of Two
Cities was first published in installments in his magazine All
the Year Round. Many Victorian novels were first published in
serial parts and then later collected into books.
American favorite: Since its publication, A Tale of Two Cities
has always been Dickens’s most popular work in America.
Background Info
Key Facts
Full Title: A Tale of Two Cities
Genre: Historical novel
Setting: London and Paris
Climax: Sydney Carton’s rescue of Charles Darnay from
prison
Protagonist: Charles Darnay
Antagonist: French revolutionaries; Madame Defarge
Point of View: Third person omniscient
Historical and Literary Context
When Written: 1859
Where Written: Rochester and London
When Published: 1859
Literary Period: Victorian era
Related Literary Works: Sir Walter Scott pioneered the
genre of historical fiction. In novels like Waverley, Scott
places fictionalized characters against a war-time historical
tableau. Scott also uses a narrator who alternately explains,
editorializes, preaches, and jokes, like Dickens’s own
characteristic narrative voice. Historical fiction evolved with
works like George Eliot’s Middlemarch with its multiple
plot lines and realistic psychological detail. Scott, Dickens,
and Eliot all use historical fiction to examine contemporary
Author Bio
Full Name: Charles Dickens
Date of Birth: 1812
Place of Birth: Portsmouth, Hampshire, England
Date of Death: 1870
Brief Life Story: Born to a naval clerk, Dickens moved
with his family to London at age 10. When his father was
briefly imprisoned for debt, Charles worked long days at a
warehouse. He left school at age 15, but read voraciously
and acquired extensive knowledge through jobs as a law
clerk, court reporter, and journalist. As a novelist, Dickens
was successful from the start and quickly became the most
famous writer in Victorian England for his unforgettable
characters, comic ingenuity, and biting social critique. He also
enjoyed huge popularity in America where he made several
reading tours. He worked tirelessly, producing a magazine
Household Words (later All the Year Round) and cranking out
still-famous novels including Oliver Twist, Bleak House, Great
Expectations, and David Copperfield. Dickens had ten children
with his wife Catherine Hogarth, but their marriage was never
happy and Catherine left him after Dickens had an affair with
the actress Ellen Ternan. Dickens died in 1870 and is buried in
Poets’ Corner of Westminster Abbey.
The year is 1775. On a mission for his employer, Tellson’s Bank,
Mr. Jarvis Lorry travels to Dover to meet Lucie Manette. On
his way, Mr. Lorry receives a mysterious message and replies
with the words “Recalled to life.” When they meet, Mr. Lorry
reveals to Lucie that her father, Dr. Alexandre Manette, who
she thought was dead, is still alive. Dr. Manette had been secretly
imprisoned for 18 years in the Bastille, but his former servant
Monsieur Defarge, who now owns a wine shop in Paris that
is a center of revolutionary activities, has smuggled Dr. Manette
out of prison and hidden him in the store’s attic. Meanwhile, Defarge’s
wife, Madame Defarge, secretly encodes the names of
the Revolution’s enemies into her knitting. Mr. Lorry and Lucie
arrive in Paris to find Manette compulsively making shoes in a
dark corner—prison has left him insane. Lucie lovingly restores
him to himself and they return to London.
The year is 1780. In London, Charles Darnay stands trial for
treason as a spy. Lucie and Dr. Manette attend, having met Darnay
during their return from France. The defense lawyer is Mr.
Stryver, but it is his bored-looking associate, Sydney Carton,
who wins the case. Carton points out how much he himself resembles
Darnay in order to ruin the main witness’s credibility.
In France, the wealthy aristocracy wallows in luxury and
ignores the suffering poor. Marquis St. Evrémonde recklessly
runs over and kills a child with his carriage. At his castle,
he meets his nephew Charles Evrémonde (a.k.a. Darnay) who
has returned to France to renounce his family. That night, the
Marquis is murdered in his sleep.
Back in England, Charles, Stryver, and Sydney Carton all
frequently visit Dr. Manette and Lucie. Mr. Stryver plans to
propose to Lucie, but Mr. Lorry warns him that his proposal is
unlikely to be accepted. Carton also admires Lucie; he tells her
how she makes him believe that, despite his ruined past, he still
has a shred of goodness deep within him. Charles obtains Dr.
Manette’s permission to marry Lucie, but Manette refuses to
learn Charles’s real name until the wedding day. On the wedding
day, Dr. Manette relapses into his shoe-making madness after
discovering that Charles is an Evrémonde. Mr. Lorry helps him
recover. Charles and Lucie soon have a daughter of their own.
The year is 1789. Defarge leads the peasants in destroying
the Bastille. He searches Dr. Manette’s old cell and finds a letter
hidden in the chimney. The new Republic is declared, but its
citizens grow extremely violent, imprisoning and killing aristocrats.
Charles’s former servant, Gabelle, writes a letter from
prison asking for help. Charles secretly leaves for Paris and is
immediately taken prisoner. Mr. Lorry travels to Paris on bank
business and is soon joined by Lucie and Dr. Manette. Because
of his imprisonment, Dr. Manette is a local hero. He uses his
influence to get Charles a trial, but it takes over a year. Every day
Lucie walks near the prison hoping Charles will see her. Charles
is finally freed after Dr. Manette testifies. But that very night, he
is arrested again on charges brought by Monsieur and Madame
Defarge.
Miss Pross and Jerry Cruncher have come to Paris to
help. On the street, they run into Miss Pross’s brother, Solomon
Pross, whom Jerry recognizes from Charles’s English trial as
John Barsad. Sydney Carton also shows up and, threatening to
reveal Barsad as a spy, forces his cooperation to help Charles.
At Charles’s second trial, Defarge produces Dr. Manette’s
letter from the Bastille, which explains how the twin Evrémonde
brothers—Charles’s father and uncle—brutalized a peasant
girl and her brother, then imprisoned Manette to protect themselves.
Charles is sentenced to death and sent back to prison.
Realizing his letter has doomed Charles, Dr. Manette loses his
mind. That night, Carton overhears Madame Defarge at her wine
shop plotting against Lucie and her daughter in order to exterminate
the Evrémonde line. It is revealed that Madame Defarge
was the sister of the peasants the Evrémondes killed.
Carton conspires with Mr. Lorry to get everyone in a carriage
ready to flee for England. With Barsad’s help, Carton gets into
Charles’s prison cell, drugs him, and swaps clothes with him.
Barsad drags the disguised Charles back to Mr. Lorry’s carriage,
which bolts for England. Madame Defarge shows up at Lucie’s
apartment, but Miss Pross blocks her way. The two scuffle.
When Madame Defarge tries to draw her pistol, she accidentally
shoots herself. The blast deafens Miss Pross for life.
On his way to the guillotine in place of Charles, Carton
promises to hold hands with a young seamstress, who has
been wrongly accused. He dies knowing that his sacrifice was
the greatest thing he’s ever done.
Plot Summary
Characters
Charles Darnay (a.k.a. Charles Evrémonde) – Renouncing
the terrible sins of his family, the Evrémondes, Charles
abandons his position in the French aristocracy to make his own
way in England. Charles believes in the revolutionary ideal of
liberty, but is not a radical revolutionary. Instead, he represents
a rational middle ground between the self-satisfied exploitation
practiced by the old aristocracy and the murderous rage
exhibited by the revolutionaries. Charles has a heroic sense of
justice and obligation, as shown when he arranges to provide for
the oppressed French peasantry, and later endangers himself
in coming to Gabelle’s aid. However, Charles is also deluded
in thinking he can divert the force of history and change the
Revolution for the better. Similarly, Charles constantly overlooks
Sydney Carton’s potential and must learn from his wife, Lucie,
to have faith in Carton. Charles represents an imperfect but
virtuous humanity in whose future we must trust.
Dr. Alexandre Manette – An accomplished French physician
who gets imprisoned in the Bastille, and loses his mind. In his
madness, Manette embodies the terrible psychological trauma of
persecution from tyranny. Manette is eventually “resurrected”—
saved from his madness—by the love of his daughter, Lucie.
Manette also shows how suffering can become strength when
he returns to Paris and gains a position of authority within the
Revolution. Manette tries to return the favor of resurrection when
he saves Charles Evrémonde at his trial. However, Manette
is ultimately a tragic figure: his old letter from the Bastille seals
Charles’s fate. Falling once more into madness, Manette’s story
implies that individuals cannot escape the fateful pull of history.
Lucie Manette – The daughter of Dr. Manette, and
Charles’s wife. With her qualities of innocence, devotion, and
abiding love, Lucie has the power to resurrect, or recall her
father back to life, after his long imprisonment. Lucie is the
novel’s central figure of goodness and, against the forces of
history and politics, she weaves a “golden thread” that knits together
the core group of characters. Lucie represents religious
faith: when no one else believes in Sydney Carton, she does.
Her pity inspires his greatest deed.
L I T C H A R T S GET LIT www. L i tChar t s . com
TM
TM
A Tale of Two Cities
Sydney Carton – In his youth, Sydney Carton wasted his
great potential and mysteriously lost a woman he loved. Now
he’s a drunk and a lawyer who takes no credit for his work.
Carton has no hope for his life. Only Lucie understands his
potential for goodness. In his selfless dedication to her and her
family, Carton represents the transformative power of love. His
self-sacrifice at the end of the novel makes him a Christ figure.
By saving Lucie’s family, Carton redeems himself from sin and
lives on in their grateful memory.
Monsieur Defarge – The former servant of Dr. Manette,
Defarge uses his Paris wine shop as a place to organize French
revolutionaries. Like his wife, Madame Defarge, Defarge
is fiercely committed to overthrowing tyranny and avenging
injustice. Yet Defarge always retains a shred of mercy, and
does not participate in his wife’s plot to kill Lucie. This quality
of mercy makes Defarge a symbol for the failed Revolution,
which ultimately loses sight of its ideals and revels in the
violence it causes.
Madame Defarge – The wife of Monsieur Defarge, Madame
Defarge assists the revolutionaries by stitching the names of
their enemies into her knitting. Madame Defarge wants political
liberty for the French people, but she is even more powerfully
motivated by a bloodthirsty desire for revenge, hoping to
exterminate anyone related to the Evrémondes. Where Lucie
Manette is the embodiment of pity and goodness, Madame
Defarge is her opposite, a figure of unforgiving rage. Over the
course of the novel she emerges as a kind of anti-Christ, completely
devoid of mercy, and as such comes to symbolize the
French Revolution itself, which soon spun out of control and
descended into extreme violence.
Marquis St. Evrémonde – Charles’s uncle and a cruel
French aristocrat committed to preserving the power of the
French nobility. He and his twin brother exemplify the tyrannical
and uncaring aristocracy. When the Marquis is murdered,
his corpse is a symbol of the people’s murderous rage.
Mr. Jarvis Lorry – An older gentleman who works for
Tellson’s bank, Lorry is a model of loyalty and discretion. Lorry
hides his emotions under the cover of “business,” but he works
hard to save the Manettes and to encourage Charles to become
Lucie’s husband.
Mr. Stryver – A lawyer who defends Charles Darnay.
Stryver, as his name implies, only cares about climbing the
professional ladder.
Jerry Cruncher – By day, an odd-job man for Mr. Lorry.
By night, a “resurrection man”—robbing graves to sell body
parts to sketchy doctors. He complains about his wife’s praying
because it makes him feel guilty about his secret activities,
but by the end of the novel he decides to give up his secret job
and endorses praying, a sign that he hopes to be resurrected
himself through the power of Christ.
John Barsad (a.k.a Solomon Pross) – Barsad was born
Solomon Pross, brother to Miss Pross, but then became a
spy, first for the English, then later for the French government.
He is an amoral opportunist. In England, he accuses Charles
Darnay of treason.
Jacques Three – “Jacques” is the code name for every male
revolutionary; they identify themselves by number. Jacques
Three is a cruel, bloodthirsty man who represents the corruption
of the Revolution’s ideals. He controls the jury at the
prison tribunals.
The Vengeance – A peasant woman from Paris and Madame
Defarge’s ultraviolent sidekick. Like Madame Defarge
and Jacques Three, The Vengeance enjoys killing for its own
sake, not for any reasonable political purpose.
The mender of roads (the wood-sawyer) – A French
working man who represents how average people become seduced
by the worst, most violent qualities of the Revolution.
Gabelle – A servant of Charles Evrémonde who carries
out Charles’s secret charities. Gabelle is jailed simply by association
with the aristocracy, showing how justice flies out the
window during the Revolution.
Roger Cly – A spy and colleague of John Barsad who faked
his death to escape prosecution.
Miss Pross – The long-time, devoted servant of Lucie Manette.
She is Solomon Pross’s sister, and hates the French.
Monseigneur – A powerful French aristocrat.
Tyranny and Revolution
Much of the action of A Tale of Two Cities takes place in Paris
during the French Revolution, which began in 1789. In A Tale
of Two Cities, Dickens shows how the tyranny of the French
aristocracy—high taxes, unjust laws, and a complete disregard
for the well-being of the poor—fed a rage among the commoners
that eventually erupted in revolution. Dickens depicts this
process most clearly through his portrayal of the decadent
Marquis St. Evrémonde and the Marquis’ cruel treatment of
the commoners who live in the region under his control.
However, while the French commoners’ reasons for revolting
were entirely understandable, and the French Revolution was
widely praised for its stated ideals of “Liberty, Equality, and Fraternity,“
Dickens takes a more pessimistic view. By showing how
the revolutionaries use oppression and violence to further their
own selfish and bloodthirsty ends, in A Tale of Two Cities Dickens
suggests that whoever is in power, nobles or commoners, will
fall prey to the temptation to exercise their full power. In other
words, Dickens shows that while tyranny will inevitably lead to
revolution, revolution will lead just as inevitably to tyranny. The
only way to break this cycle is through the application of justice
and mercy.
Secrecy and Surveillance
Everybody in A Tale of Two Cities seems to have secrets:
Dr. Manette’s forgotten history detailed in his secret letter;
Charles’s secret past as an Evrémonde; Mr. Lorry’s tightlipped
attitude about the “business” of Tellson’s Bank; Jerry
Cruncher’s secret profession; and Monsieur and Madame
Defarge’s underground activities in organizing the Revolution.
In part, all this secrecy results from political instability. In the
clash between the French aristocracy and revolutionaries, both
sides employ spies to find out their enemies’ secrets and deal
out harsh punishments to anyone suspected of being an enemy.
In such an atmosphere, everyone suspects everyone else, and
everyone feels that they must keep secrets in order to survive.
Through the secrets kept by different characters, A Tale of
Two Cities also explores a more general question about the
human condition: what can we really know about other people,
including those we’re closest to? Even Lucie cannot fathom
the depths of Dr. Manette’s tortured mind, while Sydney
Carton remains a mystery to everybody. Ultimately, through
Lucie’s example, the novel shows that, in fact, you can’t ever
know everything about other people. Instead, it suggests that
love and faith are the only things that can bridge the gap between
two individuals.
Fate and History
Madame Defarge with her knitting and Lucie Manette
weaving her “golden thread” both resemble the Fates, goddesses
from Greek mythology who literally controlled the
“threads” of human lives. As the presence of these two Fate
figures suggests, A Tale of Two Cities is deeply concerned with
human destiny. In particular, the novel explores how the fates
of individuals are shaped by their personal histories and the
broader forces of political history. For instance, both Charles
and Dr. Manette try to shape and change history. Charles
seeks to escape from his family’s cruel aristocratic history
and make his own way in London, but is inevitably drawn “like
a magnet” back to France where he must face his family’s
past. Later in the novel, Dr. Manette seeks to use his influence
within the Revolution to try to save Charles’s life from the
revolutionaries, but Dr. Manette’s own forgotten past resurfaces
in the form of an old letter that dooms Charles. Through
these failures of characters to change the flow of history or to
escape their own pasts, A Tale of Two Cities suggests that the
force of history can be broken not by earthly appeals to justice
or political influence, but only through Christian self-sacrifice,
such as Carton’s self-sacrifice that saves Charles at the end
of the novel.
Sacrifice
A Tale of Two Cities is full of examples of sacrifice, on both a
personal and national level. Dr. Manette sacrifices his freedom
in order to preserve his integrity. Charles sacrifices his family
wealth and heritage in order to live a life free of guilt for his family’s
awful behavior. The French people are willing to sacrifice
their own lives to free themselves from tyranny. In each case,
Dickens suggests that, while painful in the short term, sacrifice
leads to future strength and happiness. Dr. Manette is reunited
with his daughter and gains a position of power in the French
Revolution because of his earlier incarceration in the Bastille.
Charles wins the love of Lucie. And France, Dickens suggests
at the end of the novel, will emerge from its terrible and bloody
revolution to a future of peace and prosperity.
Yet none of these sacrifices can match the most important
sacrifice in the novel—Sydney Carton’s decision to sacrifice his
life in order to save the lives of Lucie, Charles, and their family.
The other characters’ actions fit into the secular definition of
“sacrifice,” in which a person gives something up for noble reasons.
Carton’s sacrifice fits the Christian definition of the word.
In Christianity, God sacrifices his son Jesus in order to redeem
mankind from sin. Carton’s sacrifice breaks the grip of fate and
history that holds Charles, Lucie, Dr. Manette, and even, as the
novel suggests, the revolutionaries.
Resurrection
Closely connected to the theme of sacrifice is the promise of
resurrection. Christianity teaches that Christ was resurrected
into eternal life for making the ultimate sacrifice (his death)
for mankind. Near the end of A Tale of Two Cities, Carton
remembers a Christian prayer: “I am the resurrection and the
life.” As he goes to the guillotine to sacrifice himself, Carton
has a vision of his own resurrection, both in heaven and on
earth through Lucie and Charles’s child, named Sydney Carton,
whose life fulfills the original Carton’s lost potential. Yet
Carton’s is not the only resurrection in the novel. After having
been imprisoned for years, Dr. Manette is “recalled to life” by
Lucie’s love. Jerry Cruncher, meanwhile, works as a “resurrection
man” stealing body parts from buried corpses, but by
the end of the novel he gives it up in favor of praying for a holier
resurrection of his own.
Imprisonment
In the novel, the Bastille symbolizes the nobility’s abuse of
power, exemplified by the unjust imprisonment of Dr. Manette
by Marquis St. Evrémonde. Yet the Bastille is not the
only prison in A Tale of Two Cities. The revolutionaries also
unjustly imprison Charles in La Force prison. Through this parallel,
Dickens suggests that the French revolutionaries come to
abuse their power just as much as the nobility did.
The theme of imprisonment also links to the theme of history
and fate. For instance, when Charles is drawn back to
Paris because of his own past actions, each checkpoint he
passes seems to him like a prison door shutting behind him.
Themes
In LitCharts, each theme gets its own corresponding color,
which you can use to track where the themes occur in the
work. There are two ways to track themes:
Refer to the color-coded bars next • to each plot point
throughout the Summary and Analysis sections.
• Use the ThemeTracker section to get a quick overview of
where the themes appear throughout the entire work.
www. L i t C h a r t s . c om 2 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Summary and Analysis
Book 1, Chapter 1: The Period
“It was the best of times, it was the worst of
times…” The year is 1775, a time that the narrator
describes through a set of contradictions: wisdom
and foolishness, belief and disbelief, optimism and
doubt, light and darkness, hope and despair. The
narrator compares this historical era to his own
present moment in Victorian England.
The contradictions listed in the
opening of the novel portray
1775 as an age of profound
transition, full of promise and
threat. The comparison to Dickens’s
Victorian times establishes
the novel’s use of the past to
comment on the present.
In France, the government spends wildly and hands
out harsh sentences to anyone connected with a
crime, no matter how minor. In England, burglars
infest the cities—even the Mayor of London gets
robbed—and not even frequent hangings can stop
the wave of crime.
The narrator extends the
potential similarities between
revolutionary France and England.
Because of their injustices,
both governments are sowing
the seeds of discontent and
political radicalism.
The narrator tells an allegory of the Woodman and
the Farmer—figures of the coming revolution who are
silently at work. But the royalty in both England and
France believe in their divine right to rule and don’t
notice the gathering storm.
The Woodman stands for Death
and the Farmer for Fate. Both,
the narrator implies, will harvest
the awful products of the monarchy’s
political mistakes.
Book 1, Chapter 2: The Mail
On a stormy night in late November 1775, the mail
coach from London slogs its way toward Dover. Three
passengers sit in the carriage. Everyone is suspicious
of each other. When he hears an approaching horse,
the coach driver stops the carriage: it’s a messenger
seeking one of the passengers, Mr. Jarvis Lorry of
Tellson’s Bank. Mr. Lorry recognizes the man as Jerry
Cruncher, who works odd-jobs for Tellson’s.
The port city of Dover was the
main port for passage between
England and France. The road
from London to Dover, battered
by storm and fraught with
suspicion and highwaymen, represents
the worsening political
conditions in both countries.
Jerry gives Mr. Lorry a note that reads “Wait at
Dover for Mam’selle.” In reply, Mr. Lorry tells Jerry
to return to Tellson’s with the message: “Recalled
to life.” The coach drivers overhear the mysterious
message but can make nothing of it. Neither can
Jerry, though he worries that “recalling to life” would
be bad for his other work.
“Recalled to life” sets up the
theme of resurrection. At both
ends of the book, someone
liberates another person from
prison and saves them from
the grave. Jerry’s odd thought
establishes the mystery of what
his other work might be.
Book 1, Chapter 3: The Night Shadows
The narrator reflects on the strangeness of the human
condition: how we are all mysteries to each other. No
matter how close, we always remain alienated from
each other by our unique individualities.
One of the main themes in all
of Dickens’s work is the search
for mutual understanding and
human sympathy.
Half asleep in the mail coach, Mr. Lorry dreams of
wandering through the inner vaults of Tellson’s Bank
and finding everything safe. He also dreams that he
“was on his way to dig someone out of a grave.” In
his dream, he sees a cadaverous man who has been
buried alive for 18 years. Mr. Lorry asks the man if he
cares to live, then also asks over and over if the man
will “come and see her?” Sometimes the man cries
out that seeing “her” would kill him, at other times
that he must see her immediately.
Mr. Lorry’s dream foreshadows
Dr. Manette’s situation. Lorry’s
questions about whether the
man “cares to live” and whether
he wants to see “her,” link the
idea of Manette’s potential return
to life with a woman, suggesting
that it is love that will
return him to life. The dream
of digging up someone from a
grave also foreshadows Jerry’s
other job as a grave robber.
Book 1, Chapter 4: The Preparation
In Dover, Mr. Lorry takes a room at the Royal George
Hotel. The 17-year-old Lucie Manette arrives that
same afternoon, having received vague instructions
to meet a Tellson’s Bank employee at the Royal
George Hotel regarding some business of her “long
dead” father. Though he describes his news as just
a “business matter,” Mr. Lorry struggles with his
emotions as he explains the “story of one of our
customers”—Lucie’s father, Dr. Manette.
Mr. Lorry works like a secret
agent for Tellson’s Bank. He
uses the cover of “business” to
assist in political activities (like
freeing Dr. Manette). But he
also uses “business” rhetoric
to hide his feelings and protect
others’ emotions, even when
explaining a father’s history to
his daughter.
20 years ago, Dr. Manette, a renowned doctor,
married an English woman and trusted his affairs
to Tellson’s Bank. One day, Manette disappeared,
having been jailed by the authorities and taken to a
secret prison. Rather than tell Lucie the truth, Lucie’s
mother told her that her father was dead. Lucie’s
mother herself died soon afterwards, and Mr. Lorry
took Lucie from Paris to London.
Lucie learns her own and her
father’s real history—her father
suffered imprisonment at the
hand of a tyrannical government.
Lucie’s history makes her a
figure who connects the “two cities”
of Paris and London, and in
A Tale of Two Cities, characters
cannot escape their histories.
Mr. Lorry braces Lucie for a shock: her father is not
dead. He has been found, though he’s a shell of his
former self. Manette is now in the care of a former
servant in Paris, and Mr. Lorry tells the astonished
Lucie that he and she are going to go to Paris so that
she can “restore [her father] to life.” Lucie’s servant,
the loud and red-haired Miss Pross, rushes in and
shouts at Mr. Lorry for upsetting Lucie. Mr. Lorry
asks her to travel with them to France.
Though freed from jail, Manette
is still imprisoned by his traumatic
history. It now becomes
clear that Lucie is the woman
whom Lorry in his dream hoped
could save Manette. Miss Pross
is a stereotypical British servant,
brash, devoted to her mistress.
Book 1, Chapter 5: The Wine-shop
Outside a wine shop in the poor Parisian suburb of
Saint Antoine, a cask of wine accidentally falls and
breaks in the street. Everyone in the area scrambles
to drink the runoff: cupping their hands, slurping it out
of gutters, licking it off the fragments of the broken
cask. It turns into a game with dancing and singing in
the streets. The wine has stained the ground, stained
people’s skin and clothes. Someone jokingly uses the
spilled wine to scrawl the word “Blood” on a wall.
This scene is an extended
metaphor for how people
transform into a frenzied mob.
It foreshadows the blood to be
spilled in the Revolution. The
writing on the wall alludes to
the Biblical story (in Daniel)
of Belshazzar’s feast where a
disembodied hand prophesied
the fall of his empire.
The color-coded bars in Summary and Analysis make it easy to track the themes through the
work. Each color corresponds to one of the themes explained in the Themes section. For instance,
a bar of indicates that all six themes apply to that part of the summary.
Wine
Defarge’s wine shop lies at the center of revolutionary Paris,
and throughout the novel wine symbolizes the Revolution’s intoxicating
power. Drunk on power, the revolutionaries change
from freedom fighters into wild savages dancing in the streets
and murdering at will. The deep red color of wine suggests that
wine also symbolizes blood. When the Revolution gets out of
control, blood is everywhere; everyone seems soaked in its
color. This symbolizes the moral stains on the hands of revolutionaries.
The transformation of wine to blood traditionally
alludes to the Christian Eucharist (in which wine symbolizes
the blood of Christ), but Dickens twists this symbolism: he uses
wine-to-blood to symbolize brutality rather than purification,
implying that the French Revolution has become unholy.
Knitting and the Golden Thread
In classical mythology, three sister gods called the Fates controlled
the threads of human lives. A Tale of Two Cities adapts
the classical Fates in two ways. As she knits the names of her
enemies, Madame Defarge is effectively condemning people
to a deadly fate. On the other hand, as Lucie weaves her
“golden thread” through people’s lives, she binds them into
a better destiny: a tightly-knit community of family and close
friends. In each case, Dickens suggests that human destinies
are either predetermined by the force of history or they are tied
into a larger pattern than we as individuals realize.
Guillotine
The guillotine, a machine designed to behead its victims, is
one of the enduring symbols of the French Revolution. In Tale
of Two Cities, the guillotine symbolizes how revolutionary chaos
gets institutionalized. With the guillotine, killing becomes
emotionless and automatic, and human life becomes cheap.
The guillotine as a symbol expresses exactly what Dickens
meant by adding the two final words (“or Death”) to the end
of the French national motto: “Liberty, Equality, Fraternity, or
Death.”
Shoes and Footsteps
At her London home, Lucie hears the echoes of all the footsteps
coming into their lives. These footsteps symbolize fate.
Dr. Manette makes shoes in his madness. Notably, he always
makes shoes in response to traumatic memories of tyranny, as
when he learns Charles’s real name is Evrémonde. For this
reason, shoes come to symbolize the inescapable past.
Symbols
Symbols are shown in red text whenever they appear in the Plot
Summary and Summary and Analysis sections of this LitChart.
www. L i t C h a r t s . c om 3 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
The jubilation fades and the street returns to its sad,
dirty, impoverished condition. The people are sick
and aged, beaten down by hunger.
Hunger and want are the
conditions that fuel the revolutionary
fire.
Monsieur Defarge, the owner of the wine shop,
enters his store. From her position behind the
counter, his wife, Madame Defarge, silently alerts
him to the presence of Mr. Lorry and Lucie. Defarge
ignores them, instead lamenting the condition of the
people with three men, all of whom go by the name
“Jacques” (a code name used by revolutionaries in
France).
The code name “Jacques” does
double service: because it is a
common name, it both hides
identity and also implies that
this revolution is of the people.
Lucie and Lorry’s presence in
Defarge’s wine shop indicates
that Defarge is Manette’s
former servant.
Once the “Jacques” have left, Mr. Lorry speaks with
Monsieur Defarge. Defarge leads Mr. Lorry and
Lucie up to his attic. The room is dark and kept locked
for the sake of the inhabitant, Monsieur Defarge
explains. Lucie leans on Mr. Lorry for support. Defarge
opens the door and they see a white-haired man in
the corner stooped over a bench and making shoes.
Because his mind was unoccupied
in prison, Dr. Manette
compensated by making shoes
to occupy his hands. Now, even
though he is free, he can’t
escape the prison of his own
mind, so he continues to make
shoes.
Book 1, Chapter 6: The Shoemaker
The shoemaker is dressed in tatters. When Defarge
asks him his name, he replies “One Hundred and Five,
North Tower.” Mr. Lorry then asks the shoemaker if
he recognizes anyone. The shoemaker seems as if he
does for a moment, but his face quickly clouds over.
Dr. Manette suffered so greatly
in prison that his identity was
virtually erased. He knows himself
only by the room number in
the Bastille, the prison in which
he was held.
Lucie approaches, with tears in her eyes. The
shoemaker asks who she is. Noticing her blonde hair,
he removes a necklace he wears and reveals a scrap
of paper containing some golden threads of hair—
stray hairs from his wife, which he has kept all these
years as a spiritual escape from his imprisonment.
Overcome by emotion, Manette struggles to
recognize his daughter. Lucie rocks Manette’s head
on her chest like a child. She promises him that his
agony has ended, and gives thanks to God.
Lucie’s golden hair reminds Manette
of his wife’s golden hair.
These hairs, from before and
after Manette’s incarceration,
form a kind of bridge over his
years in prison. These are the
“golden threads” with which Lucie
weaves a better fate for her
family. Cradling Manette, Lucie
is like a mother and Manette
her child—a metaphor for
Manette’s new life ahead.
Mr. Lorry and Defarge arrange for their immediate
departure. Before he leaves, Manette asks to bring
along his shoemaking tools. With Defarge escorting
them, the group is able to get past the barricades
in the street and reach a carriage. Mr. Lorry asks Dr.
Manette if he wants to be recalled to life. Dr. Manette
replies, “I can’t say.”
Dr. Manette’s desire to keep his
tools close at hand indicates
that his emotional trauma still
lies close to the surface. Dr.
Manette’s statement, “I can’t
say,” indicates that he doesn’t
yet totally believe in the possibility
that he could escape his
traumatic past.
Book 2, Chapter 1: Five Years Later
The year is 1780. The narrator describes Tellson’s
Bank in London as an old, cramped building with
ancient clerks. The bank has business interests
connecting England and France. Encrusted by
tradition and unwilling to change, the bank seems
much like England itself.
The bank is a symbol of
England and France. Like the
tradition-encrusted bank, each
of these countries has problems
with the institutions they’ve
inherited, such as the monarchy.
In his cramped apartment in a poor London
neighborhood, Jerry Cruncher yells at his wife for
“praying against” him, which he insists is interfering
with his work as an “honest tradesman.”
Jerry’s dislike of praying and
insistence that it interferes with
his business, implies that his
work as an “honest tradesmen”
makes him feel guilty.
Jerry and his son then go to work—they sit outside
Tellson’s waiting for odd jobs from the bank. On this
day, word emerges from the bank that a porter is
needed. Jerry hurries inside. Jerry’s young son, left
alone outside, wonders why his father’s boots are
muddy and his fingers stained by rust.
The stains of guilt on Jerry’s
conscience are represented
by the mud and rust from his
nocturnal work, which is as of
yet still unrevealed.
Book 2, Chapter 2: A Sight
One day, Jerry Cruncher is sent to await Mr.
Lorry’s orders at the Old Bailey Courthouse, where a
handsome young gentleman named Charles Darnay
stands accused of treason. Jerry enters the court and
pushes through the crowd gathered to see the trial.
The spectators stare at Darnay, and one onlooker
excitedly predicts that the accused will be convicted
and then brutally drawn-and-quartered.
The sadistic appetites of this
English crowd are similar to
those of the French mob in
Book 1, chapter 5. The title of
the chapter, “A Sight,” indicates
that these people come to the
trial for the fun of it, hoping not
for justice but for the spectacle
of violence.
Charles, who stands accused of being a French
spy, is defended by two lawyers: Mr. Stryver and
the insolent and bored-looking Mr. Carton. When
Darnay glances at a young woman and her father
sitting nearby (Lucie and Dr. Manette), word flashes
through the crowd that these two are witnesses
against Darnay. Nonetheless, Lucie’s face radiates a
compassion that awes the spectators.
The compassion in Lucie’s face
indicates that she does not
want to condemn Charles, even
though she is a witness for the
prosecution. This foreshadows
Charles’s final trial in Paris,
when Dr. Manette, contrary to
his intentions, dooms Charles.
Book 2, Chapter 3: A Disappointment
The Attorney General prosecuting the case demands
that the jury sentence Charles to death. He calls
a witness, the “unimpeachable patriot” John
Barsad, whose testimony implicates Charles as a
spy. However, on cross-examination Stryver reveals
Barsad to be a gambler and brawler and a generally
untrustworthy witness. Stryver similarly is able to
raise questions about the motivations of another
witness, Roger Cly, Charles’s former servant.
The prosecuting attorney
foreshadows the later prosecutors
in France who will bend
the truth to seek an execution.
Ironically, Charles is accused
of spying while John Barsad
and Roger Cly (who are later
revealed to be actual English
spies) are presented as “unimpeachable”
witnesses.
Mr. Lorry, Lucie, and Dr. Manette are each called to
testify: they had all met Charles aboard ship on their
way back from Paris five years earlier. Lucie explains
how Charles helped her care for her father, swaying
the jury in Charles’s favor. But she then accidentally
turns the court against Darnay. How? First she admits
that Charles was traveling with other Frenchmen and
carrying lists. Second she mentions Charles’s joking
comment that George Washington’s place in history
might one day match that of England’s King George III.
Another irony: as will be
revealed later, Charles’s “suspicious”
activities are actually his
humanitarian efforts to help his
impoverished tenants in France.
He is putting himself in danger
to help others. His comment
about George Washington
(who was leading the American
Revolution at the time) indicates
that he has revolutionary
sympathies.
Later, while Mr. Stryver is unsuccessfully crossexamining
a witness who has been called to identify
Charles, Carton hands Stryver a note. After reading
from the note, Stryver forces the court to notice the
striking resemblance between Charles and Carton,
shattering the witness’s credibility.
Besides serving an important
role in the plot, the uncanny
resemblance between Carton
and Charles links them and
sets them up as doubles to be
compared and contrasted.
The jury goes to deliberate. Carton continues to look
bored, stirring only to order help when he notices
Lucie start to faint. Finally, the jury returns from its
deliberations with a verdict of not guilty.
Carton’s boredom identifies him
as uninterested in the world
and empty. Only Lucie seems to
interest him.
Book 2, Chapter 4: Congratulatory
After the trial, Charles kisses Lucie’s hands in gratitude
and thanks Stryver for his help. Dr. Manette is now
a distinguished citizen of London. He can still become
gloomy, but this occurs only occasionally because
Lucie serves as a “golden thread” linking him to his
life before and after his imprisonment. Stryver, Dr.
Manette, and Lucie depart in a carriage.
Though Lucie’s love and compassion,
her “golden thread,”
have returned Dr. Manette’s
to life, his grip on sanity is still
tenuous, only as strong as a
thread of hair.
A drunk Sydney Carton emerges from the shadows.
His shabby clothes and impertinent manners offend
Mr. Lorry, who departs. Carton and Charles go out
to dinner at a tavern, where Carton slyly asks Charles
whether being tried for his life is worth the sympathy
and compassion he now gets from Lucie. Annoyed,
Charles comments on Carton’s drinking. In response,
Carton says, “I am a disappointed drudge, sir. I care for
no man on earth, and no man on earth cares for me.”
After Charles leaves, Carton curses his own reflection
in a mirror and then curses Charles, who reminds him
of what he might have been.
Carton’s lack of manners and
shabby looks show that he
doesn’t care much about life.
His bitter comments about the
compassion Charles receives
from Lucie show that Carton
craves Lucie’s pity. His words
also suggest that Carton only
saved Charles because he
wanted to help Lucie. Carton
curses Charles because their
resemblance forces Carton to
consider his own life, which was
ruined by some past experience.
www. L i t C h a r t s . c om 4 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Book 2, Chapter 5: The Jackal
The narrator describes Mr. Stryver as an ambitious
man starting to climb the professional ladder. Due to
his problem distilling information, he partnered with
Sydney Carton, who now secretly does all the work
for Stryver to win his cases. If Stryver is a lion in court,
Carton is a cunning jackal behind the scenes.
As his name implies, Stryver
“strives” to get ahead in the
world. He is uninterested in
sacrifice because he is only out
for himself.
After leaving the tavern where he dined with Charles,
Carton joins Stryver in his apartment. To stay awake,
he wraps a wet towel around his head and works
through a pile of legal documents. Stryver watches.
Carton willingly makes himself
a slave to Stryver’s legal work.
He is sacrificing his potential
for no reason, which is a kind
of suicide.
Afterwards, Stryver and Carton drink and talk.
Stryver comments on Carton’s moodiness and lack
of direction, which have been evident since their days
at university. Carton responds that he lacks Stryver’s
ambition, and must live in “rust and repose.” Stryver
changes the subject to Lucie’s beauty. Carton mocks
her as a “golden-haired doll,” but Stryver senses
Carton’s true feelings might be different.
This exchange reveals an
important part of Carton’s
character and history. He is
always working for others, never
seeking the credit, as Stryver
would. Carton’s denials about
his interest in Lucie don’t even
convince Stryver.
After leaving Stryver, Carton stumbles home
through the grey dawn, imagining for a moment a city
of hope, full of love and grace. But it passes and he
cries into his pillow, resigned to his miserable life.
Carton’s vision is of a celestial
city in heaven. But in his current
state of empty self-pity, he can
only glimpse it for a moment.
Book 2, Chapter 6: Hundreds of People
Four months pass. Mr. Lorry visits Dr. Manette and
Lucie at their home. Lucie has decorated the house
beautifully, but Mr. Lorry notices that Manette’s
shoe-making workbench is still in the house.
The beautiful house symbolizes
the Manettes’ return to life, but
the presence of the workbench
indicates that Manette is not
yet completely free of his past.
Dr. Manette and Lucie are out, though. Mr. Lorry
speaks with Miss Pross, who comments on and
dismisses all the suitors who constantly call on Lucie.
She adds that her brother, Solomon Pross, is the
only man good enough for Lucie. Lorry remains silent,
though he knows Solomon is a cheat and scoundrel.
Mr. Lorry then asks if Dr. Manette ever uses his
workbench or speaks about his imprisonment. Miss
Pross responds that Dr. Manette does not think about
his traumatic years of imprisonment.
Miss Pross’s comments
introduce her brother, while
Lorry’s skepticism establishes
that Solomon is not all that he
seems—he’s really a spy. Dr.
Manette’s silence about his
imprisonment and insistence
on keeping his shoe-making
workbench show that he has
not resolved his traumatic past:
he’s still hiding from it.
Lucie and Manette return. Charles arrives to visit
moments later. Charles tells them of his recent trip
to the Tower of London, where a workman recently
realized that what he had thought were someone’s
initials carved into a wall (“D.I.G.”) were actually
instructions: beneath the floor, they found the ashes
of a letter. Dr. Manette nearly faints at this story.
Charles’s story foreshadows
what will be discovered in Dr.
Manette’s old cell: his carved
initials and a letter telling his
story. Dr. Manette almost faints
because he can’t face his past
and senses the letter’s danger,
whether consciously or not.
Sydney Carton also visits. Sitting out on the veranda
as a storm approaches, Lucie tells him that she
sometimes imagines that the echoes of the footsteps
from the pedestrians below belong to people who will
soon come into their lives. Carton says it must be a
great crowd to make such a sound, and says that he
will welcome these people into his life.
The storm and footsteps
symbolize the oncoming French
Revolution. Carton’s comment
is prophetic: in the end, he
welcomes the Revolution into
his life and sacrifices himself to
the Revolution to save Lucie.
Book 2, Chapter 7: Monseigneur in Town
The scene cuts to Paris and the inner sanctum of
Monseigneur, a powerful French lord. He drinks
some hot chocolate with four richly dressed servants
to help him. Monseigneur is surrounded by luxury, by
state officials who know nothing of state business but
everything about dressing well. Every aristocrat there
seems disfigured by the “leprosy of unreality.”
The hot chocolate exemplifies
the nobility’s self-indulgent and
foolish focus on personal comforts.
They are so out of touch
with the hard realities of the
common people in France that
the narrator compares their
disconnection to a disease.
One sinister lord with a pinched nose, the Marquis
Evrémonde, leaves in a huff that the Monseigneur
did not treat him a bit more warmly. He takes out
his anger by having his carriage speed through the
streets, scattering the commoners in the way.
The Marquis cares only about
power. Feeling snubbed by the
Monseigneur, he makes himself
feel powerful again by taking it
out on the commoners, whom
he clearly cares nothing about.
The carriage runs over and kills a little girl. As a tall man
wails over his dead daughter, the Marquis scolds the
people for not taking care of their children and tosses
the man a gold coin. As his carriage pulls away, the
coin sails back in: Monsieur Defarge threw it back.
Furious, the Marquis screams that he will “exterminate
[the commoners] from the earth.” He drives away
while Madame Defarge looks on, knitting.
The girl’s death is a metaphor
for the brutality of tyranny.
Defarge throwing the coin back
shows how tyranny inspires
revolution, creating a situation
where both sides want to
destroy the other. For his actions
against the commoners, the
Marquis gets his name knitted
into Defarge’s register of death.
Book 2, Chapter 8: Monseigneur in the Country
Returning through the village he rules and has taxed
nearly to death, Marquis Evrémonde stops to
question a mender of roads who the Marquis had
noticed staring at his passing carriage. The man
explains that he saw someone hanging on beneath
the carriage who then ran off into the fields.
The stowaway represents how
the Marquis is bringing his own
troubles home to roost. The
trouble is spreading from the
cities through the country.
The Marquis drives on, passing a shoddy graveyard.
A woman approaches the carriage and petitions the
Marquis for help for her husband who has recently
died of hunger, like so many others. The Marquis
dismissively asks the women if she expects him to
be able to restore the dead man to life or to feed
everyone? The woman responds that all she wants is
a simple grave marker for her husband, so he won’t
be forgotten. The Marquis drives away.
The Marquis fails to realize
that he does have the power
to feed the people. But it would
require sympathizing with them
or even sacrificing some of
his prosperity and power. The
Marquis’s lack of pity contrasts
with Lucie’s compassion. Unlike
the Marquis, she has the power
to restore someone to life.
Book 2, Chapter 9: The Gorgon’s Head
At his luxurious castle, the Marquis Evrémonde waits
for the arrival of his nephew, Charles Evrémonde
(a.k.a. Charles Darnay) from London. Charles explains
he has been questing for a “sacred object,” but that
he’s run into trouble. The Marquis dismisses him, but
complains that the power of the French aristocracy
has waned. They used to hold the right of life and
death, and ruled by fear and repression.
The object of Charles’s sacred
quest is Lucie. Charles’ “trouble”
in winning her love is his
aristocratic background. Notice
also the contrast between Lucie
and the aristocracy: she has the
power to restore life, while the
French nobility rule through the
power of taking life away.
Charles responds that the Evrémondes have lost
their family honor by injuring anyone who stood
between them and pleasure. He adds that when his
mother died, she commanded him to have mercy
on the people. He renounces his family name and
property, which he says is cursed, and explains that
he will work for a living in England. The Marquis
scoffs at his nephew’s “new philosophy,” tells him to
accept his “natural destiny,” and goes to bed.
The “new philosophy” of the
Enlightenment, which inspired
both the American and French
Revolutions, held that all people
are born equal, that no one
has a natural right to rule. Yet
rather than facing his past,
Charles tries to run from it by
renouncing his family and living
and working in England.
As the morning dawns, the expressions on the
castle’s stone faces seem to have changed to shock.
Bells ring and villagers gather to share urgent news:
the Marquis has been found dead with a knife in his
chest and a note signed “Jacques.”
The stone faces represent the
old institution of the nobility,
shocked at the unthinkable: a
challenge to their power. Yet the
murder also shows that despite
their ideals, the revolutionaries
are as bloodthirsty and revengedriven
as the nobles.
Book 2, Chapter 10: Two Promises
A year passes. Charles now makes a passable living
in London as a French teacher. Charles visits Dr.
Manette. During the visit, Charles tells Dr. Manette
of his deep love for Lucie. Dr. Manette at first seems
frightened by the news, but relaxes when Charles
promises that he intends not to separate them, but to
share the Manettes’ home and bind Lucie closer to her
father. Dr. Manette suspects that Stryver and Carton
are also interested in Lucie, but promises to vouch for
Charles’s love for Lucie should Lucie ever ask.
Charles has sacrificed his
wealth and aristocratic heritage
to try to win Lucie’s love. Since
only Lucie’s love keeps Dr. Manette
sane, any threat to their
bond makes him worry. Charles
understands this and promises
that his relationship to Lucie
won’t interfere with Lucie’s
relationship with Manette.
Charles thanks Dr. Manette for his confidence in
him, and wants to return the favor by sharing a secret
of his own: his real name. But Manette suddenly
stops him. He asks Charles to tell him on the morning
of his wedding, not before. That night, Lucie returns
and finds her father again making shoes.
Dr. Manette must have a hunch
that Charles is an Evrémonde.
By stopping Charles from
revealing the truth, he continues
to try to repress his pain. But he
is not entirely successful, as his
return to shoemaking shows.
www. L i t C h a r t s . c om 5 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Book 2, Chapter 11: A Companion Picture
That same night, as Sydney Carton plows through
heaps of legal papers, Mr. Stryver announces
that he intends to get married. He chastises Carton
for acting strangely around people, especially the
Manettes. Stryver explains how he works to get along
with people, which gets him ahead in the world.
Stryver is not an evil character,
but he is selfish. All his actions
are focused on getting ahead.
He would never consider sacrificing
any of his hard-earned
success for any reason.
Because Carton had previously (though insincerely)
insulted Lucie, Stryver breaks the news to him
carefully: he plans to marry her. Stryver thinks she’s
a “charming creature” and will improve his home and
professional standing; besides, she would be lucky to
marry a man of such rising distinction. Carton drinks
harder and says almost nothing. Stryver worries
about Carton and tells him to get married, to settle
down with some wealthy woman.
Stryver wants Lucie for all
the wrong reasons: she’ll be a
trophy wife who will help him
professionally. This contrasts
with the feelings of profound
love that both Charles and
Carton feel for Lucie. Stryver
thinks that Carton can find
redemption on an earthly path,
like getting married for money.
Book 2, Chapter 12: The Fellow of Delicacy
On his way to Lucie Manette’s house to propose,
Mr. Stryver passes Tellson’s Bank and decides
to drop in on Mr. Lorry. When Stryver tells him of
his plans, Mr. Lorry stiffens and advises him not to
proceed. Stryver is stunned and insulted. Mr. Lorry
clarifies that he knows Lucie’s likely answer. But
Stryver cannot believe that any girl could refuse him.
Stryver thinks the world
revolves around him, that
everyone must believe in the
virtue of pursuing earthly
rewards, at which he excels. But
Mr. Lorry has a sense that Lucie
has different goals and a more
profound destiny.
Mr. Lorry asks Stryver to wait while he visits the
Manettes to see about Stryver’s chances. Stryver
agrees and returns home to think it over. When Mr.
Lorry arrives with the expected bad news, Stryver
has already decided to drop it. He explains that Lucie
shares the “vanities and giddiness of empty-headed
girls” and that he’s better off without her.
Stryver convinces himself he
never wanted Lucie. But his
insult about Lucie is so far off
that it shows his foolishness. A
selfish materialist like Stryver
will never deserve or receive the
rewards of love and restored life
that Lucie can provide.
Book 2, Chapter 13: The Fellow of No Delicacy
Although his awkward social skills obscure it, Sydney
Carton loves to visit the Manette house. After
Mr. Stryver informs him that he’s given up his
plans to propose, Carton visits Lucie for a private
conversation.
Carton’s earlier insults of Lucie
were just a show. From his visits,
it is clear that he loves and
admires her for her compassion
and goodness.
Lucie is astonished when Carton breaks into tears
over his wasted life during the visit. She asks if she
can help him, if she can persuade him to live a better
life. Carton says no, that his life was over long ago. But
Lucie responds that she believes he has it in him to live
a much worthier life, and that she can help him.
Carton’s past is a mystery. Not
unlike Dr. Manette, Carton has
been imprisoned in his own
depression since some trauma
in his youth. Even he does not
anticipate the great deeds he is
capable of, but Lucie does.
Carton tells Lucie he loves her, that she is “the last
dream of [his] soul.” But that even if she loved him
back, he would probably just make her miserable.
Carton asks only one thing: for Lucie to confirm that
there is still something in him to pity, some shred of
humanity to sympathize with. She does and Carton
tells Lucie he would do anything, even give his own
life, for her and the family she loves.
Prophetic words. Carton’s soul
dreams of Lucie’s pity, of being
forgiven and welcomed by her
boundless compassion. Carton
sees this compassion as the
most important thing in the
world, and with the strength he
derives from Lucie’s faith, he
would do anything to protect it.
Book 2, Chapter 14: The Honest Tradesman
Outside of Tellson’s Bank, Jerry Cruncher sees an
approaching funeral procession. An angry crowd
harasses the drivers of the hearse with shouts of
“Spies!” Cruncher learns the hearse carries the body
of Roger Cly, a convicted spy against the English.
The English crowd threatening
the spies foreshadows the
French mob that, in later
chapters, will actually lynch its
enemies in public.
Jerry follows the mob, which roughs up the drivers
and takes over the procession. They drive into the
country and bury Roger Cly with mock ceremony.
Then they start carousing, busting up local pubs until
the police intervene.
The mobs’ anger at the spy
Roger Cly escalates into a
general zest for mayhem,
foreshadowing the French
revolutionaries who lose sight
of their ideals in their thirst
for blood.
Back at home, Jerry once again complain’s about his
wife’s praying. His son, Young Jerry, asks his father
about where he goes at night. Jerry tells his son that
he goes fishing, as Mrs. Cruncher knows.
Mrs. Cruncher knows Jerry’s
secret, which is why she prays:
she feels guilty about Jerry’s
secret occupation.
That night, Young Jerry sneaks out after his father,
whose “fishing gear” includes a crowbar and ropes.
He follows his father to the grave of Roger Cly, and
watches his father start digging, then runs in terror,
with visions of Cly’s coffin chasing after him.
Jerry is a grave robber! Jerry,
who “fishes” for dead bodies,
represents a perversion of
Jesus, who was described as a
fisher of men. .
The next morning, frustrated that Cly’s body had
been missing, Jerry Cruncher furiously rebukes
his wife for her praying and intervening in the work
of an “honest tradesman.” Later, Young Jerry asks
his father what a “resurrection man” is and says
he would like to be one when he grows up. Jerry is
worried, but also a little proud.
Cly’s missing body will play an
important part in the plot in
later chapters. A “resurrection
man” (grave robber) perverts
the idea of resurrection. Rather
than bringing the dead back to
life, resurrection men sell stolen
body parts to doctors.
Book 2, Chapter 15: Knitting
One day, Monsieur Defarge enters his shop with
the mender of roads and takes him to the attic
with the three “Jacques.” The mender of roads
tells his story: he had watched a man clinging to the
underside of Marquis Evrémonde’s carriage, and
about a year later saw soldiers escort the same man,
who was accused of killing the Marquis, to prison. A
petition to save the man’s life was presented to the
King and Queen, but to no avail. The man was hung
on a gallows above the village fountain. The mender
of roads explains how the corpse cast a long and
frightening shadow.
In presenting a petition, the commoners
are working within the
established political structure:
accepting the nobles as rulers
and making an appeal to their
mercy. But the nobles squander
their chance to show mercy, and
hang the murderer as a warning.
The effect is the opposite: the
dead man’s shadow represents
the commoner’s desire for revenge
and revolution. By showing
no mercy the nobles give up any
chance of receiving any mercy.
Defarge sends the mender of roads outside and
consults with the Jacques. Jacques Three, hungry
for blood, agrees with Defarge that the Marquis’s
castle and the entire Evrémonde race should be
exterminated. Another Jacques points to Madame
Defarge’s knitting, which lists in its stitching the
names of everyone the revolutionaries mean to kill.
Just as the Marquis would
exterminate the people, those
people would exterminate him.
In other words, the revolutionaries
are just as blood-minded as
the corrupt and brutal aristocracy
they seek to overthrow.
Several days later, Monsieur and Madame Defarge
take the mender of roads to Versailles to see a
procession of the King and Queen. The mender of
roads, overwhelmed with excitement, shouts “Long
live the King!” Defarge thanks the man for helping to
keep the aristocrats unaware of the people’s rage.
The mender of roads exemplifies
the fickle mob, who crave spectacle
above all else. One minute
he’s working for the Revolution,
the next he’s overcome with joy
at seeing the king. The Defarges
exploit people like him.
Book 2, Chapter 16: Still Knitting
When the Defarges return home that evening, they
receive information that an Englishman named John
Barsad has been sent to spy on them. Madame
Defarge promises to add his name to her knitting.
Defarge admits to his wife that he’s tired and
doubts the Revolution will come during their lives.
Madame Defarge counters that the Revolution is like
an earthquake: it builds slowly, but when it comes
it releases catastrophic damage. She says she is
content to wait, and will act when necessary.
For all his revolutionary zeal,
Monsieur Defarge also has
some sympathetic human
attributes. Madame Defarge, on
the other hand, is tireless and
merciless. Her comment suggests
just what the Revolution
will be like when it comes: not
a controlled political action with
rational goals defined by political
ideals, but a vengeful riot.
John Barsad enters the shop the next day. In
conversation with the Defarges, Barsad comments
on the plight of the people, trying to get the Defarges
to reveal their revolutionary sympathies. Wise to his
scheme, the Defarges reveal nothing.
John Barsad the spy has already
been spied upon. Suspicion and
surveillance are in full swing.
Barsad changes tactics. Knowing that Defarge was
once Dr. Manette’s servant, he mentions that Lucie
is now married to Charles Darnay—who is in reality
the nephew of the Marquis Evrémonde. After
watching the impact of this news, Barsad leaves.
Because Charles and Lucie bring
together opposite sides of the
French political divide—nobility
and daughter of a revolutionary
hero—their marriage provokes
anger on both sides.
Defarge is in disbelief. He feels a deep anxiety when
Madame Defarge adds Charles’s name to her
knitting.
To Defarge, human connections
still mean something. To Madame
Defarge, all aristocrats
must die, no matter what.
www. L i t C h a r t s . c om 6 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Book 2, Chapter 17: One Night
Lucie spends the last night before her wedding to
Charles with her father. She asks Dr. Manette if he
believes that her marriage will bring them closer. Dr.
Manette assures her that he wants to see her fulfilled,
and couldn’t live with himself otherwise.
Dr. Manette clings to Lucie for
his emotional security. But he
does the noble thing and risks
his mental health in order to
ensure her happiness.
For the first time, Dr. Manette talks to Lucie about
his imprisonment in the Bastille. He tells her that
while there, he passed the time by imagining how his
unborn daughter would grow up. Would she know
nothing about him, or think about her lost father and
weave his memory into the family of her own?
Manette’s thoughts about living
on in his daughter’s memory
after death hint at Carton’s reward
for his sacrifice at the end
of the novel: a legacy carried on
by Lucie’s future family.
Late that night, Lucie sneaks downstairs to check
on her sleeping father. Dr. Manette’s face is deeply
worn from his trials, but he is peacefully asleep.
Manette’s peaceful face is
“imprisoned” in a worn body,
hinting that he won’t be able to
escape his past quite so easily.
Book 2, Chapter 18: Nine Days
On the day of the wedding, Charles Darnay and Dr.
Manette speak privately. When they emerge, Mr.
Lorry notices that Manette looks deathly pale, though
he had looked perfectly normal before the meeting.
Charles has just revealed his
secret to Dr. Manette: he is
an Evrémonde. Somehow this
means something to Manette.
After the wedding, Charles and Lucie leave for their
honeymoon in Wales. The plan is for Dr. Manette to
join the newlyweds after nine days. But after Lucie
leaves, Mr. Lorry notices that Dr. Manette seems
absent-minded. By that evening, Manette is lost and
incoherent, making shoes again in his room. Mr. Lorry
and Miss Pross keep an anxious watch over him, and
decide not to tell Lucie in hopes that Dr. Manette will
improve. He doesn’t improve for nine days.
The discovery that Lucie has
married an Evrémonde pushes
Manette back into his old shoemaking
mania. These events link
the Evrémondes to Manette’s
years in prison, though just
what role the Evrémondes
played in Manette’s imprisonment
remains unclear.
Book 2, Chapter 19: An Opinion
On the tenth day, Mr. Lorry wakes to find Dr. Manette
reading as if nothing has happened. Discovering that
Dr. Manette has no memory of the past nine days,
Mr. Lorry carefully tries to figure out what caused the
relapse by asking Dr. Manette’s opinion about the
medical case of a “friend” who’s daughter Mr. Lorry
cares about. Nonetheless, Manette quickly seems to
suspect what’s going on.
Ever a model of discretion, Mr.
Lorry avoids mentioning anything
that happened directly. Dr.
Manette is still hiding from his
past, even when discussing it.
Mr. Lorry very discreetly describes Dr. Manette’s
situation, never using Manette’s name. He asks what
might have caused the relapse and how he might help
to prevent another one. Dr. Manette replies that it
would be far too painful for the “patient” to tell anyone
his secrets, but surmises that something must have
recently reminded the patient of his past trauma. He
then assures Mr. Lorry that the worst should be over,
and that only something extraordinary could upset
the patient’s mind again.
Dr. Manette represses his
traumas, which remain hidden
until they violently erupt. This
is a metaphor for the French
Revolution itself—the nobles
suppressed the commoners until
a revolt erupted. Dr. Manette
now knows the truth about
Charles’s past, but doesn’t
entirely remember his own.
Mr. Lorry then explains that this “friend” has a
hobby, “blacksmith work,” that may be associated
with the trauma. He wonders if the blacksmith tools
should be removed. Looking worried, Dr. Manette
answers that if manual labor helped the man get
through the trauma, he should be allowed to keep
the tools. Eventually Dr. Manette agrees that the
tools should be removed, but only if these tools are
removed while the patient is elsewhere at the time.
Dr. Manette needs these tools
like a child needs a security
blanket. His inability to face
losing the tools, or even to be
present when they are taken
away, is another example of
Manette’s persistent avoidance
of his traumatic past, whether
conscious or not. But he is still
willing to sacrifice the tools.
That night, after Manette has left to join Lucie and
Charles, Mr. Lorry and Miss Pross remove the
shoemaker’s tools and destroy the bench. Feeling as
guilty as murderers, they burn or bury everything.
Notice how the burying of Dr.
Manette’s work bench parallels
and contrasts with Jerry’s digging
up of dead bodies.
Book 2, Chapter 20: A Plea
The first person to visit Lucie and Charles after they
return from their honeymoon is Sydney Carton.
Carton apologizes for his drunkenness during past
encounters, and asks for Charles’ friendship. Carton
declares himself a worthless man, but says he has a
favor to ask: would Charles mind if he occasionally
visited his house? Of course not, Charles replies.
The novel foreshadows that
Carton, as the first to meet
the married couple, will be
especially important to Charles
and Lucie’s life as a family. For
his part, Charles is just being
polite, humoring Carton out of
his sense of obligation to him.
At dinner that night, Charles comments to Lucie,
Manette, Mr. Lorry, and Miss Pross about Carton‘s
careless and reckless behavior. Later that night in
their room, Lucie suggests that Charles was too
judgmental toward Carton. She asks Charles to have
faith in Carton, who she believes has a wounded heart
but is nevertheless capable of doing tremendous
good. Charles blesses Lucie for her compassion and
promises to have more sympathy for Carton.
Unlike Charles, Lucie has a
deep sympathy and compassion
for Carton’s pitiful soul. Even
though she hardly understands
his behavior, Lucie has faith.
Her prediction about Carton
foreshadows the incredible
sacrifice that Carton will make
for the Manette family.
Book 2, Chapter 21: Echoing Footsteps
Years pass. Lucie weaves her “golden thread”
of positive influence through the family. She often
sits by the parlor window and ponders the echoing
footsteps rising from the street below. She gives birth
to a daughter, Lucie, who particularly likes Sydney
Carton. Her second child, a son, dies in childhood.
As the political situation starts
to unravel in France, Lucie
weaves her domestic community
more tightly together in
London. Her daughter, like her,
has an innocent belief that
Carton is a good man.
In the year 1789, distressing “echoes” arrive from
France. Mr. Lorry confides in Charles that the Paris
office of Tellson’s Bank has been flooded with anxious
aristocrats trying to save their property.
Charles sacrificed his property
to try to escape his family’s
past. Aristocrats who hung on to
their wealth have now lost it.
The scene cuts to Defarge’s wine shop, now the
center of a revolutionary maelstrom. The streets are
thronged with dingy, angry people, armed with guns,
knives, or any weapon they can get their hands on.
The dirty angry revolutionaries
show that the Revolution will
be more about revenge than
Enlightenment ideals.
Defarge leads this army to the Bastille. Madame
Defarge rallies the women, swearing they can kill
as well as the men. After fierce fighting, the Bastille
surrenders and the people swarm inside to free the
prisoners. Defarge and Jacques Three demand
that an older officer show them “One hundred and
five, North Tower.” There, they find Dr. Alexandre
Manette’s initials “A.M.” and search the room.
The taking of the Bastille was
one of the major early events of
the French Revolution. It’s anniversary
is still celebrated as the
French Independence Day. Note
Madame Defarge’s bloodthirstiness.
Manette’s initials on the
wall recall Charles’s story about
the Tower of London.
Returning to the Bastille courtyard, the crowd swarms
the old officer and stabs him to death. Madame
Defarge takes her long knife and slices off his head.
Seven prisoners are freed. Seven prison guards are
killed and their heads are stuck on pikes.
The exchange of the seven
prisoners with seven guards
suggests that power may have
switched sides, but that nothing
has really changed. Madame
Defarge’s beheading of the
guard foreshadows the guillotine.
Book 2, Chapter 22: The Sea Still Rises
Madame Defarge, now the leader of the female
revolutionaries, sits in the wine shop with her
second-in-command, a stocky woman whose violent
acts have earned her the name The Vengeance. No
spies dare come into this neighborhood anymore.
If Madame Defarge represents
Fate, her assistant reveals
exactly 0what kind of Fate
is in store: angry and violent
vengeance in response to years
of tyranny and oppression.
Monsieur Defarge returns with news that an old
aristocrat, who once said that starving people should
just eat grass, tried to fake his own death but has
now been caught. Anger swells—a revolutionary mob
rushes from the neighborhood to the courts building.
The mob overwhelms the officials, captures the old
aristocrat, then drags, beats, and stuffs his mouth with
straw. Finally, they hang him from a lamppost.
The story of the murdered
aristocrat alludes to the famous
story of Queen Marie Antoinette
who, when told that the
starving people had no bread,
replied “Let them eat cake.”
The statement exemplifies cruel
snobbery, but the response is
out of proportion to the offense.
Afterwards, the commoners return home, eat their
“scanty suppers,” play with their kids, and make
love. Back at the shop, Defarge tells his wife that he
is happy the Revolution has finally come. “Almost,”
Madame Defarge replies.
The scenes of the commoners
at home highlights that the
vicious mob is made up of ordinary
people. Madame Defarge’s
comment shows her insatiable
appetite for revenge.
www. L i t C h a r t s . c om 7 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Book 2, Chapter 23: The Fire Rises
While at work in the ruined countryside of France, the
mender of roads encounters a shaggy but powerful
man. Addressing each other as “Jacques,” they
confirm that something will happen “tonight.”
“Jacques” keeps cropping up
everywhere, suggesting how the
revolutionary cause is taken up
again and again by new people.
In the dark courtyard of the castle of Marquis
Evrémonde, four torch-bearing figures appear.
Soon, fire rages through the castle—its stone faces
look tormented and are lost in flame. The inferno
becomes a pillar of fire surging high into the sky.
The stone faces symbolize the
ancient French nobility, which
gets decimated by the Revolution.
The burning castle is a
symbol of the failing aristocracy
and the commoners’ revenge.
A man from the castle rushes into the village
screaming for help to put out the fire and salvage the
valuables in the castle. The crowd of villagers refuses
to budge.
Now the nobility is asking the
people for help, when for so
long they refused to listen to
the people’s appeals for aid.
Later, the villagers surround the house of Monsieur
Gabelle, the government “functionary” in charge of
the area. He is forced to hide on his roof, but is able
to come down in the morning. The narrator explains
that other functionaries in other areas aren’t so lucky,
and that fires are burning all over France.
Though Gabelle is not an
aristocrat himself, he works for
the government. His association
with the aristocrats is enough
for the revolutionaries to distrust
and want to harm him.
Book 2, Chapter 24: Drawn to the Loadstone Rock
It’s now 1792. In the three years that have passed,
there have been battles and bloodshed. The French
nobility has scattered. Many French aristocrats have
become emigrants, fleeing France for London where
they gather at Tellson’s Bank for news.
Though both London and
Paris teetered on the edge of
revolt at the beginning of the
novel, only France has fallen
into revolution.
Inside the bank, Charles is trying to talk Mr. Lorry
out of his latest mission: going to the Paris branch of
the bank to protect whatever bank documents he can.
The aged Mr. Lorry is apparently the youngest clerk at
the bank, and he plans to take Jerry Cruncher for
protection. He will leave that night.
Charles may have democratic
sympathies, but Tellson’s Bank is
invested in old money and aims
to preserve it. This makes Mr.
Lorry’s political and moral positions
in the book ambiguous.
Just then, Mr. Lorry is given a letter addressed to
the “Marquis St. Evrémonde.” Not knowing such a
person, he asks the assembled French nobles. They
declare the man a coward who betrayed his noble
family. Though insulted, Charles does not respond.
Instead, he tells Mr. Lorry that he is an acquaintance
of the Marquis and will deliver the letter.
Although the nobles are wrong
about him, Charles has not
demonstrated to France what
kind of man he is. Because he
ran from his past rather than
confronting it, the nobles and
the commoners despise him.
The letter is from Gabelle. He was arrested, brought
to Paris, and charged with treason for helping an
emigrant, Charles Evrémonde. Gabelle writes that
the peasants neither know nor care that he in fact
was trying to help them, working on Charles’s orders.
He begs Charles to come save his life.
Gabelle was trying to help the
commoners on Charles’s behalf.
But the revolutionaries no longer
care about the truth. They just
want to kill aristocrats. Charles
now gets an opportunity to
restore Gabelle to life.
Charles realizes that he must go to Paris. His sense
of justice obliges him to help Gabelle. He also thinks
he can do something to stop the Revolution’s terrible
violence and urge the people toward mercy. The
narrator describes Charles as being drawn to Paris as
to a Loadstone Rock (a naturally magnetic rock).
Charles wrongly thinks one man
can influence history, or sway
the mob. In fact, the reference
to the magnetic “loadstone”
suggests that even the choice
to return is not really Charles’s
own, that his past has fated him
to go back.
Charles gives Mr. Lorry a reply to send to Gabelle:
Evrémonde will come. Charles packs secretly, writes
a letter each to Lucie and Dr. Manette, and without
telling them leaves for France the following night.
Charles thinks he can do this
on his own, not realizing that
he will also magnetically pull
Lucie and Dr. Manette back to
Paris as well.
Book 3, Chapter 1: In Secret
Charles arrives in France and finds things very
different from when he left. At each village and
checkpoint, he is subjected to the sneering of
revolutionaries dedicated to what the narrator calls
the new republic of “Liberty, Equality, Fraternity, or
Death.” Charles feels each gate close behind him like
a prison door.
Themes of imprisonment
and fate merge as Charles is
gradually locked into his journey
to Paris. The narrator’s addition
of the words “or death” to the
motto of the Revolution shows
its ideals have been perverted.
Three soldiers accompany Charles to Paris as
his “escort.” Upon arriving in Paris, they deliver
Charles—whom they now call their “prisoner”—to
Monsieur Defarge. Charles demands to know under
what charges he is held, and is told that new laws
against emigrants have been passed. Defarge quietly
asks him why he ever returned to France in this, the
age of “La Guillotine.“ Charles asks Defarge to help
him. Defarge refuses.
As he gets closer to Paris,
Charles goes from free man to
escorted suspect to prisoner,
though he has done nothing.
Defarge refuses to help Charles,
but he shows some sympathy.
The revolutionaries invoke the
guillotine as if it’s a saint: bloodthirsty
violence has replaced
religious compassion.
Defarge conducts Charles to the prison of La Force
with a note for the jailor saying “In secret.” The jail is
full to bursting with aristocrats who welcome Charles
with incredible politeness and sympathize with his
fate. Charles is jailed in a solitary cell in a tower. He
realizes he has been virtually left for dead. Charles
paces off the dimensions of the room again and
again: “five paces by four and a half.”
Defarge helped free Dr.
Manette from his secret
imprisonment, but now Defarge
secretly jails Manette’s son-inlaw.
The Revolution has become
a tyranny. Charles paces to
deal with the isolation of imprisonment,
just as Dr. Manette
turned to making shoes.
Book 3, Chapter 2: The Grindstone
Mr. Lorry arrives at the Paris branch of Tellson’s
Bank. It sits next to the former house of a grand
French noble that has been converted into an armory
for the revolutionaries. In the courtyard there’s a
large grindstone.
The house’s transformation
symbolizes the Revolution:
formerly representing the
excesses of the nobility, now the
house represents the revenge
that excess inspired.
Mr. Lorry is stunned when Lucie and Dr. Manette
rush in. They left London immediately after reading
Charles’s letters. Dr. Manette’s fame as a Bastille
prisoner has granted him access and information,
and he has learned that Charles has been imprisoned
at La Force.
In his return to Paris, Dr.
Manette represents redemption
through suffering. He’s been
restored to his former life, and
suffering has earned him political
power within the Revolution.
Noises outside draw them to the window. Half-naked
men covered in blood are turning the grindstone to
sharpen swords. Frenzied, blood-smeared women
pour wine into the men’s mouths. The mob runs
howling into the streets with their weapons.
The revolutionaries are
described as uncivilized savages,
engaged in some terrible ritual.
Note the wine-blood connection
and the intoxication of violence.
Mr. Lorry whispers to Dr. Manette that the mob
has gone to kill the prisoners at La Force. Horrified,
Manette runs out to the mob. Manette and the
remaining revolutionaries rush to La Force as the mob
cries out, “Help for the Bastille prisoner’s kindred in
La Force!”
It is not enough for the
revolutionaries to imprison their
enemies. They must kill them.
Manette, though, uses the political
power he gained from his
sacrifice to save Charles.
Book 3, Chapter 3: The Shadow
Feeling it necessary to separate Tellson’s Bank from
his own personal business, Mr. Lorry finds an
apartment for Lucie and her family, and leaves Jerry
Cruncher with them to act as guard. On the way
back to Tellson’s Mr. Lorry is stopped by Monsieur
Defarge, who brings news that Charles is safe, a
note for Lucie from Dr. Manette, and instructions for
Lorry to let Defarge in to see Lucie.
Mr. Lorry keeps his two worlds
as separate as possible, but
is deeply committed to both.
It is unclear if Defarge has
tampered with this letter, but
certainly at this moment he is
acting as a secret agent for the
Revolution.
On their way to the apartment, Mr. Lorry and
Defarge are joined by Madame Defarge, who is
knitting, and The Vengeance. Defarge tells Lorry
that, in order to be able to protect Lucie, Madame
Defarge must see and remember Lucie’s face.
That Madame Defarge is
knitting shows that she’s
planning to add Lucie’s name
to her list of victims. “Safety”
and “security” are words the
power-hungry use to mask their
real intentions.
In the apartment, Lucie reads the note from Charles:
he is fine, and under Dr. Manette’s protection.
She gratefully kisses one of Madame Defarge’s
hands, but Madame Defarge coldly withdraws to
her knitting. Lucie pleads for Madame Defarge
to help Charles, to use her influence as a “sisterwoman.”
Madame responds that she has seen so
many women suffering for imprisoned husbands that
Lucie’s predicament doesn’t mean much. After they
leave, Lucie tells Mr. Lorry that Madame Defarge
seems to throw a shadow over all her hopes.
This crucial meeting between
the two key female characters
reveals a lot about each: Lucie
has compassion even for this
terrible woman and asks for
her pity; Madame Defarge
shows she is no “sister-woman”
but is a cold messenger of
death. Madame Defarge is
meant to be a frightening
perversion of femininity, while
Lucie, with her goodness and
compassion, is the model of it.
www. L i t C h a r t s . c om 8 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Book 3, Chapter 4: Calm in the Storm
After four days, Dr. Manette returns. He tells Lorry
that 1100 defenseless prisoners have been murdered,
convicted by a self-appointed Tribunal. The Tribunal
also nearly condemned Charles to death, but Dr.
Manette was able to sway the crowd and Charles was
returned to his cell.
Although Charles’s trial in
England was unfair, the French
Tribunal is depicted as even
more monstrous, a total sham
of justice. Dr. Manette seems
to have brought Charles back
to life.
Dr. Manette has been invigorated by his newfound
authority. He believes his suffering has become
strength and power, capable of breaking Charles
out of prison. Having earned the respect of the
revolutionaries, he has been made the inspecting
physician of a number of prisons, including La Force. In
this new role, he can protect Charles. However, as time
passes, he cannot seem to get Charles freed.
The novel implies that through
suffering comes redemption,
and that faith can empower
people to break the pull of
fate of history. Yet even Dr.
Manette’s political power is not
enough to free Charles.
A year goes by. The Revolution gains in force. The
King and Queen of France are beheaded. As the
revolutionaries grow stronger, their courts zealously
prosecute people, guilty or not. Suspicion reigns. Civil
freedoms disappear.
After the Republic was declared
in France in 1792, the “Reign
of Terror” began: a period of
spying, fear, and escalating
numbers of executions.
The guillotine becomes an institution, and guillotines
can now be found in the streets all over Paris. The
narrator says that in Paris the guillotine has come to
replace the Cross as an idol for worship.
The guillotine, a tool to make
it easier to execute people by
beheading, has become a sacrilegious
idol in place of Christ.
This signals that compassion, in
France, is dead.
Book 3, Chapter 5: The Wood-sawyer
Through it all, Lucie tries to keep a normal English
household to relieve her mind. Dr. Manette reassures
her that he can save Charles. He suggests that she
walk near the prison at a place where Charles might
see her from the window of his cell in order to boost
Charles’s spirits. Lucie does just that, everyday, rain,
shine, or snow.
Lucie fits the classic Victorian
stereotype of female strength
through domesticity (“the angel
in the house”) and selfless
dedication to her husband. Just
as Dr. Manette will unwittingly
doom Charles later, he dooms
Lucie with his advice here.
As Lucie stands at her spot on the street each day,
a wood-sawyer—formerly a mender of roads—
who works nearby always says hello. As he cuts his
wood, the wood-sawyer jokes that he is guillotining a
little family. Though the wood-sawyer unnerves her,
Lucie is always polite and friendly to him.
The mender of roads has
transformed into a man drunk
on the violence of the Revolution.
His sawing represents the
potential executions of Charles,
Lucie, and their daughter.
One snowy day, as Lucie stands outside the prison,
she sees a crowd of people dancing to a popular
revolutionary song. Lucie is horrified by their savage
movements and screams.
Another intense depiction of
revolutionaries as crazed savages
who worship the violence
of the Revolution.
Moments later, Dr. Manette appears. He tells Lucie
that Charles’s trial will be held tomorrow, and
promises her that all will work out well. Lucie kisses
her hand in farewell to Charles as she departs, just
as Madame Defarge comes around the corner.
Manette and Madame Defarge salute each other.
For Lucie, her kiss is a gesture
of love toward her husband.
For Madame Defarge, it’s a
crime of commiserating with an
enemy of the state. But Defarge
is not yet ready to make her
play against Dr. Manette.
Book 3, Chapter 6: Triumph
A rowdy, bloodthirsty crowd gathers for the trial of
“Charles Evrémonde, called Darnay.” Defarge and
Madame Defarge sit in the front row. Madame
Defarge is knitting away. Charles is sentenced
to death as an emigrant, despite the fact that the
law was passed after his imprisonment. The crowd
screams to cut off his head.
This is a court not of justice but
of unchecked political passions.
Charles’s sentence is, in fact,
a travesty of justice—the law
shouldn’t even apply to him.
The crowd does not care about
justice, though. It just wants the
spectacle of his execution.
In his testimony, Charles explains that he actually
isn’t an emigrant: he gave up his aristocratic title and
property, then worked as a French tutor and married
a French woman: Lucie Manette. He says that he
returned to France to save the life of a citizen of the
Republic: Gabelle.
Charles finally explains who
he is to the French people.
By swearing that he is still
a Frenchman, Charles offers
himself as a positive, non-violent
role model for change.
Gabelle, who had been forgotten in prison before the
trial, takes the witness stand and confirms Charles’s
story. Then Dr. Manette testifies, praising Charles’s
character and republican ideals.
Gabelle was left for dead.
Imprisonment is like the grave.
Dr. Manette once again tries
to use political tactics to free
Charles.
The jury votes to acquit Charles. The boisterous
crowd now celebrates Charles as a patriot and carries
him through the streets in celebration.
Charles goes from death row to
a public parade, floating on the
fickle allegiance of the mob.
When she sees Charles, Lucie faints with joy. In their
apartment, she thanks God, then her father, who
declares, “I have saved him.”
Dr. Manette’s political influence
seems to be enough to save
Charles after all.
Book 3, Chapter 7: A Knock at the Door
The next day, Manette remains confident and proud
at having saved Charles, but Lucie continues to fear
for her husband’s safety because so many other
innocent people have been imprisoned and killed. For
safety’s sake, they keep no outside servants, using
only Jerry and Miss Pross. Miss Pross vehemently
and regularly voices her distaste for the French.
Lucie’s worries counter Dr.
Manette’s confidence in his political
power. As Lucie suspects,
everyone in France succumbs to
the Reign of Terror. Miss Pross
embodies the inherent English
distrust of the French.
That afternoon, as Miss Pross and Jerry are out on
errands, Lucie hears footsteps on the stairs outside
the apartment. Then there is a knock at the door. Four
armed revolutionaries enter and declare that Charles
Evrémonde is again the prisoner of the Republic.
In the revolutionary Republic,
laws can change in an instant
as the new people in power
begin to abuse it. The footsteps
in the hall echo the footsteps
Lucie used to hear in England.
Dr. Manette tries to intervene, but the soldiers tell
him that he must make sacrifices if the Revolution
demands it. Still, out of respect for Manette, the men
explain that evidence for the charge comes from
three people: Monsieur and Madame Defarge, and
one other, whom they refuse to name.
The Revolution demands that
the revolutionaries be willing
to sacrifice the lives of others,
even family members, without
question. Manette’s political
power can’t stand up to the
pull of fate and history or to
the Revolution’s all-consuming
desire for blood.
Book 3, Chapter 8: A Hand at Cards
While they’re out on their errands, Miss Pross
screams when she recognizes her brother, Solomon
Pross, disguised as a French republican. Solomon
tells her to be quiet, or else she’ll get him killed. Jerry,
meanwhile, also thinks he recognizes this man, but
can’t quite remember his name.
As an unthinking English patriot,
Miss Pross has never questioned
her brother’s integrity,
but as this chapter will show,
he’s a traitorous opportunist in
an ugly political world.
Sydney Carton, appearing out of nowhere, tells
Jerry the name he is trying to remember: John
Barsad. Having arrived in Paris a day earlier, Carton
explains, Carton chanced upon and recognized
Barsad from Charles Darnay’s English trial. Carton
also learned that Barsad was serving as a French
government spy working in the prisons.
Dickens’s novels are often filled
with extreme coincidences, such
as Carton and Barsad’s sudden
appearances. Though one can
guess that Carton came to
Paris out of concern for Lucie.
Carton and Jerry escort John Barsad to Tellson’s
Bank, where Mr. Lorry also recognizes him. Carton
says he has a plan to help Charles. He then blackmails
Barsad, threatening to reveal him as a spy of the
French government and as a former English spy, both
of which would enrage the revolutionaries. Carton
then reveals that he has seen Barsad associating with
another known English spy: Roger Cly.
Because Carton has nothing to
lose, he can play the dangerous
game of counter-intelligence.
Carton wants to save Charles
in part for Charles’s sake, but
to a larger extent because of
his feelings for Lucie. Recall his
promise to Lucie at the end of
Book 2, Chapter 13.
Barsad grins: Cly is dead, he says. He then takes
out a certificate of burial and says he buried Cly
himself. To everyone’s surprise, Jerry angrily objects
that Barsad had placed “shameful impositions upon
tradesmen,” and then reveals that Cly’s body wasn’t
in his coffin. Barsad realizes he’s caught and agrees
to help. Carton takes him into an adjoining room
to talk.
Jerry’s secret job as a “resurrection
man” saves the day!
But note that it takes being
caught in a lie to get Barsad to
help Charles. There is no honor
among spies. And Barsad has
no concept of sacrificing himself
to a higher cause.
www. L i t C h a r t s . c om 9 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Book 3, Chapter 9: The Game Made
After a while, Barsad leaves and Carton explains
to Mr. Lorry that if Charles is convicted, Barsad
will smuggle Carton into Charles’s cell. Refusing to
explain anything more, Carton asks that Lucie be
told nothing about the plan. He then asks if Mr. Lorry
is satisfied with his long life. Mr. Lorry replies that,
nearing the end, he feels closer again to his life’s
beginning. Carton says he knows the feeling. Mr.
Lorry gains a new respect for Carton.
Carton’s exchange with Lorry
suggests that Carton plans to
sacrifice himself and expects
to die. As always, he works for
other people without taking
credit, but this time he works
for a greater cause. Mr. Lorry’s
sense of returning to the beginning
takes on a religious tone
with Carton: he will be reborn
in heaven.
Carton visits a pharmacy and buys a mysterious
packet of drugs that the chemist warns are very
potent. All night, Carton wanders the streets of Paris.
As he walks, he remembers a prayer the priest spoke
at his father’s funeral: “I am the resurrection and the
life, saith the Lord: he that believeth in me, though he
were dead, yet shall he live: and whosoever liveth and
believeth in me, shall never die.”
The prayer Carton remembers
comes from the story of Jesus
and Lazarus, whom Jesus
resurrects in the Bible (John
11:25). The line says that Jesus
will resurrect and give eternal
life not only to Lazarus, but to
anyone who believes in him.
As he continues to walk, he encounters a young girl,
whom he helps across the street. She kisses him, and
once more Carton remembers the prayer.
Carton is showing compassion
to others, and receiving blessings
(the kiss) in return.
Carton arrives at the courthouse the next morning
for Charles’s trial, where Jacques Three is the
head of the jury. As the trial begins, the prosecutor
announces who brought the charges: Defarge,
Madame Defarge, and Dr. Alexandre Manette.
Like the wood-sawyer, Jacques
Three enjoys political executions.
As in Charles’s first trial,
Manette is again forced by
fate and history to serve as a
witness for the prosecution.
The court erupts in chaos. Manette objects that he
never denounced Charles. The judge silences him.
Defarge then takes the stand and explains how,
during the storming of the Bastille, he searched
Manette’s old cell and found a letter hidden in the
chimney. The judge asks that it be read aloud.
Manette’s hidden letter recalls
Charles’s story about the Tower
of London. It represents all
the trauma and revenge that
Dr. Manette has repressed,
consciously or unconsciously.
Book 3, Chapter 10: The Substance of the Shadow
Defarge explains that Dr. Manette wrote the letter
while in the Bastille to explain how he ended up in
prison. He then reads the letter. Walking home one
night in 1757, Dr. Manette was taken into a carriage
by two men, identical twins. From their coat of arms,
he learned that they were Evrémondes: Charles’s
father (who was then the Marquis) and his uncle (who
became the Marquis after Charles’s father died, and
was murdered in Book 2, Chapter 9).
The letter tells the story of
Manette’s imprisonment. The
twin Evrémonde brothers
epitomize the selfishness and
cruelty of aristocratic power.
They take what they want,
when they want, by whatever
means necessary.
The men took the doctor to see two patients: one,
a beautiful young woman deliriously calling out for
her family, and the other, a peasant boy with a stab
wound in his chest. As Manette treated the boy,
the boy told him that the young woman was his
sister. After she married, the two aristocrats decided
they wanted her for themselves. So they forced her
husband to endure impossibly hard work until he
died. Then they took her away and raped her.
The Evrémondes don’t
recognize the individual rights
of peasants, the sovereignty of
marriage, or the sacredness
of female sexuality, which was
a huge deal in Dickens’s time.
They are the worst example
of aristocratic tyranny, and, as
such, they embody many of
the reasons the commoners
revolted.
The peasant boy and young woman’s father died
upon hearing the news. The boy then sent his
younger sister to a distant, secret place, and, seeking
revenge, snuck into the Evrémondes’ castle. He
confronted one of the Evrémondes, who stabbed
him. The boy soon died, but before he did he cursed
the Evrémondes by marking the air with a cross of his
own blood. The young woman died within a week.
The nobles then offered Dr. Manette some gold in
return for his silence, but he declined and returned
home, disgusted with all he had seen.
The curse seals the fate of the
Evrémonde brothers. While
Charles did not know this story,
he sensed his family’s dark
past when he renounced it in
Book 2, Chapter 9. Dr. Manette
refused to be bought off by the
Evrémondes, despite the danger
of such an action. He sacrificed
his freedom to preserve his
integrity.
The next day, the wife of the Marquis (and Charles’s
mother) visited Dr. Manette. Hearing what had
happened, she hoped to find and help the surviving
sister of the abused peasant family. She told her little
boy Charles that he must someday repay this injured
girl. Unfortunately, Manette didn’t know where the
girl was.
That surviving sister, as future
events in the novel will show,
is Madame Defarge. Ironically,
Charles has pledged himself to
help this girl, while she blindly
seeks revenge and does everything
in her power to kill him.
Dr. Manette soon sent a letter to the authorities
detailing the crimes of the Evrémonde brothers.
But the Marquis intercepted and burned Manette’s
letter. He then sent Manette in secret to the Bastille.
Manette ends his letter from prison with a curse on
the Evrémondes.
Manette tried to condemn
the Evrémondes officially and
failed—just as he does now,
having tried to use his political
influence to save Charles. Both
governments are corrupt. His
curse seals Charles’s fate.
Incensed at the actions of the Evrémondes, the jury
sentences Charles to death. The crowd goes wild.
Just days before the crowd
cheered Charles as a patriot.
Book 3, Chapter 11: Dusk
As the crowd celebrates Charles’s conviction in the
streets, John Barsad, who is escorting Charles back
to his cell, lets Lucie her embrace her husband for
the last time. Charles says farewell and asks her to
kiss their daughter. Lucie tells him she feels that they
will not be long separated and will meet in heaven.
Lucie has some kind of serene
connection to the next world.
If their love isn’t possible in
the world, it will be renewed
in heaven. Note how well
positioned Barsad is to smuggle
Carton into Charles’s cell.
Devastated, Dr. Manette tries to apologize to
Charles. But Charles stops him, and instead thanks
him, acknowledging all that Dr. Manette must have
suffered to offer his own daughter back into the
Evrémonde family he justifiably hates.
Like Dr. Manette, Charles also
had a horrific secret past, of
which he was unaware, come
back to haunt him. He cannot
escape the curse on his family.
Lucie faints. Carton carries her to a carriage and
escorts her home. There, he instructs Dr. Manette
to use any remaining influence to try to save Charles.
Dr. Manette hurries away. However, once he’s gone,
Carton and Mr. Lorry confess they have no hope.
Carton is just distracting Dr.
Manette; he knows that politics
are no longer of any use.
Something stronger is necessary
to break the grip of fate, history,
and the Revolution.
Lucie’s daughter begs Carton to help. Carton
embraces her and, before he leaves, kisses the
unconscious Lucie and whispers, “A life you love.”
As his farewell implies, Carton’s
goal is to give Lucie and her
family a happy life. He is willing
to sacrifice himself for that.
Book 3, Chapter 12: Darkness
Sydney Carton decides to make sure he is seen
around Paris. He eventually wanders into a wine
shop—Defarge’s wine shop. Defarge and Madame
Defarge marvel at his physical resemblance to
Charles, but have no idea who he is.
Carton wants to make sure
that it is known that there is
someone who looks just like
Darnay walking free on the
streets of Paris.
Carton eavesdrops on a conversation between
Defarge, Madame Defarge, The Vengeance, and
Jacques Three, in which Madame Defarge plots to
exterminate the Evrémonde line—including Lucie and
Lucie’s daughter. She says that she and the woodsawyer
will testify against Lucie for sympathizing
with a prisoner. Jacques Three promises a conviction.
Monsieur Defarge, however, hesitates, and suggests
that poor Dr. Manette has suffered enough.
The bloodthirsty juries of
the Revolution need only the
slightest suspicion to convict
someone. Jacques Three’s promise
indicates that there is no
justice, and that the trials are
shams. Monsieur Defarge’s pity
for Manette makes Madame
Defarge’s utter mercilessness
stand out even more starkly.
Madame Defarge responds by revealing her history
with the Evrémondes: she is the missing sister of
the peasant family whom the Evrémonde brothers
abused and killed. She vows to carry out her brother’s
dying curse. She barks at Defarge that he can tell
wind and fire where to stop, “but don’t tell me.”
Jacques Three and The Vengeance are thrilled.
Madame Defarge exceeds the
forces of nature. She is a the
terrifying product of tyrannous
cruelty. She symbolizes all
of the people abused by the
aristocrats, and her vengeance
is the embodiment of the
Revolution.
Carton hurries home. Soon, Dr. Manette returns
too, begging for his shoemaker’s bench. Shocked,
Carton and Mr. Lorry realize that Dr. Manette has
lost his mind. Carton instructs Mr. Lorry to gather
everyone’s passports, including Carton’s, and leave
the next day before Madame Defarge’s accusations
make it impossible for them to leave France. Then
Carton says farewell, blesses Lucie, and leaves.
A key tipping point: the curse
against Charles cannot be
stopped, and Dr. Manette’s
insanity is now permanent. After
failing to save Charles, Manette
reverts to his own fate as a
traumatized prisoner. Carton
takes control of things, setting
up his final plan.
www. L i t C h a r t s . c om 10 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Book 3, Chapter 13: Fifty-two
In the prison, 52 people, including Charles, await
execution that day. Charles writes a final letter to
Lucie, in which he says that he did not know about
her father’s history and that he believes Dr. Manette
was unaware of his damning letter. Charles writes
much the same to Dr. Manette. He also writes to Mr.
Lorry, but never thinks to write to Carton.
Neither Charles nor Dr.
Manette were aware of their
real legacies. The don’t control
their own destinies. Charles
has underestimated Carton
before. The fact that Carton is
under no obligation to make
his sacrifice only increases its
symbolic power.
Suddenly John Barsad opens the cell door and lets in
Carton. Carton tells Charles to start changing clothes
with him. Then Carton dictates a letter for Charles to
write, in which he asks “someone” to remember him
and is grateful to have the chance to prove himself.
In Book 2, Chapter 4 Carton
envied Charles. Now he
becomes Charles by literally
sacrificing his identity to save
Charles’s life. The “someone” in
the letter is Lucie.
As Charles writes, Carton waves the packet of drugs
under his nose. Charles passes out. Carton finishes
swapping their clothes and Barsad carries Charles,
now disguised as Sydney Carton, back to Mr. Lorry.
Charles has been helpless to
stop history, and is not just passive,
but actually unconscious,
during his escape.
Soon the guards arrive and take Carton, whom they
think is Charles Evrémonde, out to join the other
condemned prisoners. A young woman, who was
wrongly accused and convicted, asks him if she can
hold his hand. Suddenly, the women realizes that
he is not Evrémonde. “Are you dying for him?” she
asks. “And his wife and child,” Carton replies. Carton
promises to hold the woman’s hand until the end.
The young girl reveals how
corrupt and merciless the
republic’s tribunals are. Her innocence
also lets her recognize
Carton for who he is: a figure
of Christ, giving his life to save
others. Holding Carton’s hand
suggests how the girl’s faith will
sustain her.
At the Paris barricade, guards check the papers of the
passengers in a carriage: Mr. Lorry, Dr. Manette,
Lucie, and “Sydney Carton,” who is unconscious.
They wave the carriage through.
Just as Mr. Lorry smuggled the
infant Lucie out of Paris, he now
transports these mostly helpless
passengers to safety.
Book 3, Chapter 14: The Knitting Done
At the shop of the wood-sawyer, Madame Defarge
holds a secret conference with Jacques Three and The
Vengeance. Madame says that she no longer trusts
Monsieur Defarge, and that they must exterminate
the Evrémondes themselves. Jacques Three swears
that his jury will condemn Lucie, and fantasizes about
the blond hair and blue eyes of Lucie’s beheaded child
at the guillotine. The wood-sawyer and Madame
Defarge promise to testify against Lucie.
Lucie kissed her hand to
the prison as a gesture of
loyalty and compassion. But the
revolutionaries see it as an act
of treason. The revolutionaries
have given up all human feeling
and mercy, as is shockingly
apparent in Jacques Three’s sick
fantasy about murdering an
innocent girl.
Madame Defarge strides through the streets like
a tigress, a woman without pity, armed with a knife
and loaded pistol. She heads to Lucie’s apartment,
hoping to strengthen her case by catching Lucie
insulting the Revolution in her grief.
Madame Defarge combines the
figures of Fate and Death. She
is terrifying and inhuman. She
represents death as opposed to
resurrection, murder as opposed
to sacrifice.
At the apartment, Jerry Cruncher and Miss Pross
get ready to leave in their own carriage. Jerry swears
that he will give up grave robbing, and states that his
opinions about praying have changed. He adds that
he hopes Mrs. Cruncher is praying right then.
Jerry gives up his work as a
“resurrection man” because
that job belongs to Christ. With
death (Madame Defarge) on
the move, Jerry turns to religion
to save him.
Jerry leaves to make arrangements. Soon after,
Madame Defarge arrives at the apartment and
demands that Miss Pross let her see Lucie. Miss
Pross refuses to budge from Lucie’s bedroom door.
Madame Defarge tries to shove her aside, but
Miss Pross grabs her. During the ensuing struggle,
Madame Defarge grabs for her pistol. But as she
grabs the weapon it accidentally goes off, killing her.
Miss Pross flees the apartment in terror. She meets
up with Jerry and discovers that she has permanently
lost her hearing.
Lucie kissed Madame Defarge’s
hands and asked for mercy.
That failed. Now, the faithful
English servant Miss Pross
wrestles with a faithless French
former servant turned revolutionary.
Madame Defarge’s accidental
suicide shows how the
revolutionaries sow the seeds of
their own destruction. In fact, as
the Reign of Terror progressed,
many French revolutionaries
died under their own guillotines.
Book 3, Chapter 15: The Footstep Die Out Forever
Three carts rumble through the Paris streets carrying
the condemned prisoners to the guillotine. Some
onlookers, used to the spectacle, are bored. Others
gather to see Charles Evrémonde and insult him.
This alludes to Christ’s journey
to the crucifixion, during which
Christ was also harassed and
insulted by spectators.
The Vengeance is in the crowd. She has been saving
a front-row seat for Madame Defarge and holding
her knitting. She bitterly regrets that her friend will
miss the festivities.
Madame Defarge is separated
from her knitting: the grip of
fate has been broken.
The young woman is scheduled to be beheaded
by the guillotine just before Carton. She thanks
Carton for helping her stay composed, and says he
must have been sent to her from Heaven. Carton
tells her to focus only on him and to have no fear.
When her time comes, they kiss, and she calmly
goes to the guillotine. Carton is next. He says “I am
the resurrection and the life.” Carton ascends the
platform, his face looking serene and prophetic, and
the guillotine crashes down on his head.
As Christ comforted his fellow
prisoners on the cross, Carton
also comforts the girl, urging
her to look past the suffering of
politics toward a heavenly future.
With such faith, the condemned
have no fear. Carton’s prayer
suggests that they will live
forever. His serene face implies
the certainty of his salvation
and resurrection, brought about
through faith.
The narrator describes Carton’s final thoughts. He
recognizes that Barsad, The Vengeance, and all
the “new oppressors” will die by the guillotine they
now celebrate. Yet he is also sure that Paris will rise
up from its ashes, struggling to be free. He sees a
vision of Lucie with a new son, named after him,
who will live a successful and prosperous life. He also
sees Dr. Manette restored to health, and Mr. Lorry
leaving all his considerable wealth to the Manette’s
and then passing tranquilly away. And Carton knows
he is blessed and treasured by all these people. The
novel ends with Carton’s final thoughts, “It is a far, far
better thing that I do, than I have ever done; it is a far,
far better rest that I go to than I have ever known.”
In Carton’s vision, the revolutionaries
who showed no mercy
will not receive any, just like the
aristocracy before them. The
novel makes the case for mercy,
in particular Christian mercy, as
a vital force to counteract the
tendency of the powerful toward
tyranny, and suggests that
France will eventually find this
balance. For his selfless sacrifice,
which alone could break the
grip of fate and history, Carton
is resurrected not just in heaven
but also through Lucie’s son,
who lives out Lucie’s hope that
Carton would live a better life.
Important Quotes
Book 1, Chapter 1 Quotes
It was the best of times, it was the worst of times, it was the
age of wisdom, it was the age of foolishness, it was the epoch
of belief, it was the epoch of incredulity, it was the season
of Light, it was the season of Darkness, it was the spring of
hope, it was the winter of despair, we had everything before
us, we had nothing before us, we were all going direct to
Heaven, we were all going direct the other way.
Book 1, Chapter 3 Quotes
A wonderful fact to reflect upon, that every human creature is
constituted to be that profound secret and mystery to every
other. A solemn consideration, when I enter a great city by
night, that every one of those darkly clustered houses encloses
its own secret; that every room in every one of them
encloses its own secret; that every beating heart in the hundreds
of thousands of breasts there, is, in some of its imaginings,
a secret to the heart nearest it!
Book 1, Chapter 5 Quotes
The children had ancient faces and grave voices; and upon
them, and upon the grown faces, and ploughed into every
furrow of age and coming up afresh, was the sign, Hunger. It
was prevalent everywhere. Hunger was pushed out of the tall
houses, in the wretched clothing that hung upon poles and
lines; Hunger was patched into them with straw and rag and
wood and paper; Hunger was repeated in every fragment of
the small modicum of firewood that the man sawed off; Hunger
stared down from the smokeless chimneys, and started
up from the filthy street that had no offal, among its refuse,
of anything to eat. Hunger was the inscription on the baker’s
shelves, written in every small loaf of his scanty stock of bad
bread; at the sausage-shop, in every dead-dog preparation
that was offered for sale.
Book 1, Chapter 6 Quotes
If you hear in my voice … any resemblance to a voice that
once was sweet music in your ears, weep for it, weep for it! If
you touch, in touching my hair, anything that recalls a beloved
head that lay on your breast when you were young and free,
weep for it, weep for it! If, when I hint to you of a Home that
is before us, where I will be true to you with all my duty and
with all my faithful service, I bring back the remembrance of a
Home long desolate, while your poor heart pined away, weep
for it, weep for it! — Lucie Manette
Book 2, Chapter 2 Quotes
The sort of interest with which this man was stared and
breathed at, was not a sort that elevated humanity … The
form that was to be doomed to be so shamefully mangled,
was the sight; the immortal creature that was to be so butchered
and torn asunder, yielded the sensation. Whatever gloss
the various spectators put upon the interest, according to
their several arts and powers of self-deceit, the interest was,
at the root of it, Ogreish.
www. L i t C h a r t s . c om 11 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Book 2, Chapter 4 Quotes
Only his daughter had the power of charming this black
brooding from his mind. She was the golden thread that united
him to a Past beyond his misery, and to a Present beyond
his misery: and the sound of her voice, the light of her face,
the touch of her hand, had a strong beneficial influence with
him almost always.
Book 2, Chapter 5 Quotes
Waste forces within him, and a desert all around, this man
stood still on his way across a silent terrace, and saw for
a moment, lying in the wilderness before him, a mirage of
honourable ambition, self-denial, and perseverance. In the
fair city of this vision, there were airy galleries from which the
loves and graces looked upon him, gardens in which the fruits
of life hung ripening, waters of Hope that sparkled in his sight.
A moment, and it was gone. Climbing to a high chamber in a
well of houses, he threw himself down in his clothes on a neglected
bed, and its pillow was wet with wasted tears.
Book 2, Chapter 7 Quotes
But, the comfort was, that all the company at the grand hotel
of Monseigneur were perfectly dressed. If the Day of Judgment
had only been ascertained to be a dress day, everybody there
would have been eternally correct. Such frizzling and powdering
and sticking up of hair, such delicate complexions artificially
preserved and mended, such gallant swords to look at, and
such delicate honour to the sense of smell, would surely keep
anything going, for ever and ever. … with the rustle of silk and
brocade and fine linen, there was a flutter in the air that fanned
Saint Antoine and his devouring hunger far away.
Book 2, Chapter 8 Quotes
Expressive signs of what made them poor, were not wanting;
the tax for the state, the tax for the church, the tax for the lord,
tax local and tax general, were to be paid here and to be paid
there, according to solemn inscription in the little village, until
the wonder was, that there was any village left unswallowed.
Book 2, Chapter 9 Quotes
“Repression is the only lasting philosophy. The dark deference
of fear and slavery, my friend,” observed the Marquis,
“will keep the dogs obedient to the whip, as long as this roof,”
looking up to it, “shuts out the sky.”
Book 2, Chapter 10 Quotes
He had loved Lucie Manette from the hour of his danger. He
had never heard a sound so sweet and dear as the sound of
her compassionate voice; he had never seen a face so tenderly
beautiful, as hers when it was confronted with his own
on the edge of the grave that had been dug for him.
Book 2, Chapter 13 Quotes
For you, and for any dear to you, I would do anything. If my
career were of that better kind that there was any opportunity
or capacity of sacrifice in it, I would embrace any sacrifice for
you and for those dear to you. Try to hold me in your mind, at
some quiet times, as ardent and sincere in this one thing. The
time will come, the time will not be long in coming, when new
ties will be formed about you […] O Miss Manette, […] when
you see your own bright beauty springing up anew at your feet,
think now and then that there is a man who would give his life,
to keep a life you love beside you! — Sydney Carton
Book 2, Chapter 16 Quotes
Another darkness was closing in as surely, when the church
bells, then ringing pleasantly in many an airy steeple over
France, should be melted into thundering cannon; when the
military drums should be beating to drown a wretched voice,
that night all potent as the voice of Power and Plenty, Freedom
and Life. So much was closing in about the women who
sat knitting, knitting, that they their very selves were closing
in around a structure yet unbuilt, where they were to sit knitting,
knitting, counting dropping heads.
Book 2, Chapter 18 Quotes
Nothing would induce him to speak more. He looked up, for
an instant at a time, when he was requested to do so; but, no
persuasion would extract a word from him. He worked, and
worked, and worked, in silence, and words fell on him as they
would have fallen on an echoless wall, or on the air.
Book 2, Chapter 20 Quotes
My husband, it is so. I fear he is not to be reclaimed; there
is scarcely a hope that anything in his character or fortunes
is reparable now. But, I am sure that he is capable of good
things, gentle things, even magnanimous things. – Lucie
Book 2, Chapter 21 Quotes
The sea of black and threatening waters, and of destructive
upheaving of wave against wave, whose depths were yet unfathomed
and whose forces were yet unknown. The remorseless
sea of turbulently swaying shapes, voices of vengeance,
and faces hardened in the furnaces of suffering until the
touch of pity could make no mark on them.
Book 2, Chapter 22 Quotes
The raggedest nightcap, awry on the wretchedest head, had
this crooked significance in it: “I know how hard it has grown
for me, the wearer of this, to support life in myself; but do
you know how easy it has grown for me, the wearer of this, to
destroy life in you?” Every lean bare arm, that had been without
work before, had this work always ready for it now, that it
could strike. The fingers of the knitting women were vicious,
with the experience that they could tear.
Book 2, Chapter 23 Quotes
With the rising and falling of the blaze, the stone faces
showed as if they were in torment. When great masses of
stone and timber fell, the face with the two dints in the nose
became obscured: anon struggled out of the smoke again, as
if it were the face of the cruel Marquis, burning at the stake
and contending with the fire.
Book 2, Chapter 24 Quotes
Like the mariner in the old story, the winds and streams had
driven him within the influence of the Loadstone Rock, and
it was drawing him to itself, and he must go. Everything that
arose before his mind drifted him on, faster and faster, more
and more steadily, to the terrible attraction. His latent uneasiness
had been … that he who could not fail to know that he
was better than they, was not there, trying to do something to
stay bloodshed, and assert the claims of mercy and humanity.
Book 3, Chapter 1 Quotes
Not a mean village closed upon him, not a common barrier
dropped across the road behind him, but he knew it to be
another iron door in the series that was barred between him
and England. The universal watchfulness so encompassed
him, that if he had been taken in a net, or were being forwarded
to his destination in a cage, he could not have felt his
freedom more completely gone.
Book 3, Chapter 2 Quotes
As these ruffians turned and turned, their matted locks now
flung forward over their eyes, now flung backward over their
necks, some women held wine to their mouths that they
might drink; and what with dropping blood, and what with
dropping wine, and what with the stream of sparks struck out
of the stone, all their wicked atmosphere seemed gore and
fire. The eye could not detect one creature in the group free
from the smear of blood.
Book 3, Chapter 4 Quotes
Above all, one hideous figure grew … the figure of the sharp
female called La Guillotine. It was the popular theme for jests; it
was the best cure for headache, it infallibly prevented the hair
from turning grey, it imparted a peculiar delicacy to the complexion,
it was the National Razor which shaved close: who kissed
La Guillotine, looked through the little window and sneezed into
the sack. It was the sign of the regeneration of the human race.
It superseded the Cross. Models of it were worn on breasts from
which the Cross was discarded, and it was bowed down to and
believed in where the Cross was denied.
Book 3, Chapter 5 Quotes
No fight could have been half so terrible as this dance. It was
so emphatically a fallen sport—a something, once innocent,
delivered over to all devilry—a healthy pastime changed into
a means of angering the blood, bewildering the senses, and
steeling the heart. Such grace as was visible in it, made it the
uglier, showing how warped and perverted all things good by
nature were become.
Book 3, Chapter 6 Quotes
Looking at the Jury and the turbulent audience, he might have
thought that the usual order of things was reversed, and that
the felons were trying the honest men.
Book 3, Chapter 8 Quotes
Miss Pross recalled soon afterwards, and to the end of her
life remembered, that as she pressed her hands on Sydney’s
arm and looked up in his face, imploring him to do no hurt to
Solomon, there was a braced purpose in the arm and a kind
of inspiration in the eyes, which not only contradicted his light
manner, but changed and raised the man.
Book 3, Chapter 9 Quotes
“I am the resurrection and the life, saith the Lord: he that
believeth in me, though he were dead, yet shall he live: and
whosoever liveth and believeth in me, shall never die.”
Before that unjust Tribunal, there was little or no order of procedure,
ensuring to any accused person any reasonable hearing.
There could have been no such Revolution, if all laws,
forms, and ceremonies, had not first been so monstrously
abused, that the suicidal vengeance of the Revolution was to
scatter them all to the winds.
Book 3, Chapter 10 Quotes
The boy’s eyes, which had been fixed on mine, slowly turned
to the looker-on, and I saw in the two faces that all he said
was true. The two opposing kinds of pride confronting one
another, I can see, even in this Bastille; the gentleman’s, all
negligent indifference; the peasants, all trodden-down sentiment,
and passionate revenge. — Dr. Manette
Book 3, Chapter 14 Quotes
There were many women at that time, upon whom the time
laid a dreadfully disfiguring hand; but, there was not one
among them more to be dreaded than this ruthless woman,
now taking her way along the streets … imbued from her
childhood with a brooding sense of wrong, and an inveterate
hatred of a class, opportunity had developed her into a
tigress. She was absolutely without pity.
Book 3, Chapter 15 Quotes
Along the Paris streets, the death-carts rumble, hollow and
harsh. Six tumbrils carry the day’s wine to La Guillotine. All the
devouring and insatiate Monsters imagined since imagination
could record itself, are fused in the one realisation, Guillotine.
… Crush humanity out of shape once more, under similar hammers,
and it will twist itself into the same tortured forms. Sow
the same seed of rapacious license and oppression over again,
and it will surely yield the same fruit according to its kind.
www. L i t C h a r t s . c om 12 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Book,
Chapter
Themes
Backstory
–– Dr. Alexandre Manette is secretly imprisoned in the Bastille by Marquis St. Evrémonde and his twin brother.
–– Mr. Jarvis Lorry smuggles Dr. Manette’s daughter, the infant Lucie, to safety in London.
1,1
–– It’s 1775 and the King and Queen of France govern their country harshly. The allegorical figures of Fate and Death
stalk the land.
1,2 –– Mr. Lorry travels to Dover in a mail coach. Jerry Cruncher delivers a note to him, and Mr. Lorry replies with the
words “Recalled to life.”
1,3 –– Mr. Lorry has a dream about digging someone up from the grave.
1,4 –– In Dover, Mr. Lorry meets Lucie Manette and explains that her father, Dr. Manette, has been found.
1,5 –– Mr. Lorry and Lucie meet Monsieur Defarge at his wine shop. He takes them to the attic where Dr. Manette is making shoes in a corner.
1,6 –– Dr. Manette gradually recognizes Lucie. Mr. Lorry helps them all leave Paris.
2,1 –– Jerry Cruncher waits for jobs outside Tellson’s Bank. He complains about his wife’s praying.
2,2 –– In London, Charles Darnay stands trial for treason. His defense lawyers are Mr. Stryver and Sydney Carton. Lucie and Dr. Manette are witnesses for the
prosecution.
2,3 –– Carton undercuts an accusing witness when Carton points out how much he himself looks like Charles. The jury acquits Charles.
2,4 –– Carton takes Charles to a tavern and drunkenly, insultingly prods him about Lucie Manette.
2,5 –– Carton works through the night to do all of Stryver’s legal work.
2,6 –– Dr. Manette and Lucie move into a house. They receive frequent visits from Mr. Lorry, Charles, and Carton.
2,7 –– In Paris, Marquis Evrémonde runs over a little girl with his carriage as the Defarges look on.
2,8 –– A mender of roads tells the Marquis he saw a man clinging onto his carriage. Driving on, the Marquis spurns the petition of a woman wanting a gravestone
for her husband.
2,9
–– Charles Evrémonde visits the Marquis and renounces his family’s name and property.
–– The sleeping Marquis is murdered in his bed; a note on the knife reads “Jacques.”
2,10 –– A year passes. Charles obtains Dr. Manette’s permission to marry Lucie, but Dr. Manette refuses to learn Charles’s real name.
2,11 –– Stryver tells Carton that he will propose marriage to Lucie Manette.
2,12 –– Mr. Lorry strongly advises Stryver not to propose to Lucie, and Stryver changes his mind.
2,13 –– Carton visits Lucie to express his love and his hope that she might pity him. Carton promises his life to her.
2,14 –– Jerry Cruncher watches a funeral procession for the spy Roger Cly. That night, Jerry digs up the coffin to steal the body, but the body is missing.
2,15 –– The mender of roads tells the Defarges about Marquis Evrémonde’s murder, and how the criminal was later caught and hanged.
2,16 –– John Barsad tries to spy on Monsieur and Madame Defarge. The Defarges are shocked to learn that Lucie Manette has married an Evrémonde.
2,17 –– Lucie spends the evening before her wedding with Dr. Manette and promises to become closer to him.
Theme Key
Tyranny and Revolution
Secrecy and Surveillance
Fate and History
Sacrifice
Resurrection
Imprisonment
ThemeTrackerTM
The LitCharts ThemeTracker is a mini-version of the entire LitChart. The ThemeTracker provides a quick timeline-style rundown of all the important plot points and allows you to track the themes throughout
the work at a glance.
www. L i t C h a r t s . c om 13 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
2,18 –– Charles privately tells Dr. Manette his real name. When the couple leaves for a honeymoon, Dr. Manette relapses into making shoes.
2,19 –– Dr. Manette snaps out of it. That night, Mr. Lorry and Miss Pross destroy the shoemaker’s bench and bury the tools.
2,20 –– Carton meets Charles and Lucie on their return. Later, Charles notes that Carton is awkward and strange, but Lucie demands that her husband give Carton
a chance.
2,21
–– Time passes. Lucie gives birth to a daughter (“Lucie”) and a son who doesn’t survive.
–– In 1789, Defarge leads the people to destroy the Bastille. He searches Dr. Manette’s old cell. Madame Defarge beheads the prison warden with a knife.
2,22 –– The Defarges lead another mob to seize and execute an aristocrat who insulted the people.
2,23
–– The castle of Marquis Evrémonde is burned down. No one helps. More arson and fighting occur across the nation.
–– A mob pursues Gabelle who hides on his roof.
2,24 –– The year is 1792. Mr. Lorry receives a letter for Evrémonde from Gabelle who has been imprisoned and asks for help. Charles leaves for Paris the next night.
3,1 –– After arriving in France, Charles is escorted by soldiers to Paris, taken prisoner, and jailed in secret.
3,2 –– Mr. Lorry, Lucie, and Dr. Manette arrive in Paris. Bloodthirsty revolutionaries are on a rampage killing their prisoners. Dr. Manette rushes out and saves
Charles.
3,3 –– Mr. Lorry gets Lucie an apartment. The Defarges bring a note from Dr. Manette. The cold Madame Defarge terrifies Lucie.
3,4 –– Dr. Manette’s reputation in Paris grows, but Charles is not freed. A year passes and the guillotine becomes a popular form of capital punishment.
3,5 –– Every day, Lucie walks near the prison where Charles might see her. She is watched by the wood-sawyer and Madame Defarge.
3,6 –– At Charles’s trial, Gabelle and Dr. Manette testify in his favor. Charles is freed and celebrated as a patriot.
3,7 –– Charles is reunited with Lucie, but that night he is arrested again on charges brought by Monsieur and Madame Defarge, as well as one other unnamed
person.
3,8 –– Jerry Cruncher and Miss Pross run into Solomon Pross in the streets. Sydney Carton shows up and identifies him as John Barsad. Carton threatens to
reveal him as a spy unless he cooperates to help Charles.
3,9
–– Carton wanders the Paris streets and buys a packet of drugs. A prayer runs through his head: “I am the resurrection and the life.”
–– At Charles’s trial, the prosecutor brings charges from the Defarges and Dr. Alexandre Manette.
3,10
–– Monsieur Defarge reads from Dr. Manette’s letter he discovered in the Bastille. The Marquis Evrémonde and his twin brother secretly imprisoned Manette
to hide their crimes against a peasant family.
–– Charles is convicted and sentenced to be killed within 24 hours.
3,11 –– Lucie and Charles say their goodbyes. Dr. Manette freaks out. Carton and Mr. Lorry quietly confess they have no hope for a political solution, but Carton
implies that he has a plan.
3,12
–– At the wine shop, Carton overhears Madame Defarge plotting to convict Lucie. Madame Defarge is the missing daughter of the peasant family persecuted
by the Evrémondes.
–– Carton instructs Mr. Lorry to get a carriage ready to leave for England.
3,13
–– John Barsad lets Carton into Charles’s prison cell. Carton drugs Charles, swaps clothes with him, and makes Barsad carry Charles back to Mr. Lorry, who
immediately leaves with everyone.
–– As Carton is taken to the guillotine, another prisoner, an innocent girl, asks to hold Carton’s hand until the end.
3,14 –– Madame Defarge goes to Lucie’s apartment. She scuffles with Miss Pross and accidentally shoots herself.
3,15 –– Carton is executed by the guillotine. Before he dies, he realizes that his sacrifice is the greatest thing he’s ever done and has a vision of his resurrection
through Lucie’s son, who will one day be born and named after him.
www. L i t C h a r t s . c om 14 Copyright © 2009 LitCharts. All rights reserved.
L I T C H A R T S GET LIT TM
TM
Installation Guide
Sun™ ONE Application Server
Version 7, Enterprise Edition
817-2146-10
September 2003
Sun Microsystems, Inc.
4150 Network Circle
Santa Clara, CA 95054 U.S.A.
Copyright © 2003 Sun Microsystems, Inc. All rights reserved.
THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND TRADE SECRETS OF SUN MICROSYSTEMS, INC. USE,
DISCLOSURE OR REPRODUCTION IS PROHIBITED WITHOUT THE PRIOR EXPRESS WRITTEN PERMISSION OF SUN
MICROSYSTEMS, INC. U.S. Government Rights - Commercial software. Government users are subject to the Sun Microsystems, Inc.
standard license agreement and applicable provisions of the FAR and its supplements. Use is subject to license terms.
This distribution may include materials developed by third parties.
Sun, Sun Microsystems, the Sun logo, Java, Sun™ ONE, the Java Coffee Cup logo and the Sun™ ONE logo are trademarks or
registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
UNIX is a registered trademark in the U.S. and other countries, exclusively licensed through X/Open Company, Ltd.
This product is covered and controlled by U.S. Export Control laws and may be subject to the export or import laws in other
countries. Nuclear, missile, chemical biological weapons or nuclear maritime end uses or end users, whether direct or indirect, are
strictly prohibited. Export or reexport to countries subject to U.S. embargo or to entities identified on U.S. export exclusion lists,
including, but not limited to, the denied persons and specially designated nationals lists is strictly prohibited.
________________________________________________________________________________________
Copyright © 2003 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara, California 95054, Etats-Unis. Tous droits réservés.
CE LOGICIEL CONTIENT DES INFORMATIONS CONFIDENTIELLES ET DES SECRETS COMMERCIAUX DE SUN
MICROSYSTEMS, INC. SON UTILISATION, SA DIVULGATION ET SA REPRODUCTION SONT INTERDITES SANS
L’AUTORISATION EXPRESSE, ÉCRITE ET PRÉALABLE DE SUN MICROSYSTEMS, INC. Droits du gouvernement américain,
utlisateurs gouvernmentaux - logiciel commercial. Les utilisateurs gouvernmentaux sont soumis au contrat de licence standard de
Sun Microsystems, Inc., ainsi qu aux dispositions en vigueur de la FAR (Federal Acquisition Regulations) et des suppléments à
celles-ci. L’utilisation est soumise aux termes de la Licence.
Cette distribution peut comprendre des composants développés pardes tierces parties.
Sun, Sun Microsystems, le logo Sun, Java, Sun™ ONE, le logo Java Coffee Cup et le logo Sun™ ONE sont des marques de fabrique ou
des marques déposées de Sun Microsystems, Inc. aux Etats-Unis et dans d’autres pays.
UNIX est une marque déposée aux Etats-Unis et dans d’autres pays et licenciée exlusivement par X/Open Company, Ltd.
Ce produit est soumis à la législation américaine en matière de contrôle des exportations et peut être soumis à la règlementation en
vigueur dans d’autres pays dans le domaine des exportations et importations. Les utilisations, ou utilisateurs finaux, pour des armes
nucléaires, des missiles, des armes biologiques et chimiques ou du nucléaire maritime, directement ou indirectement, sont
strictement interdites. Les exportations ou réexportations vers les pays sous embargo américain, ou vers des entités figurant sur les
listes d’exclusion d’exportation américaines, y compris, mais de manière non exhaustive, la liste de personnes qui font objet d’un
ordre de ne pas participer, d’une façon directe ou indirecte, aux exportations des produits ou des services qui sont régis par la
législation américaine en matière de contrôle des exportations et la liste de ressortissants spécifiquement désignés, sont
rigoureusement interdites.
3
Contents
About This Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
Who Should Use This Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
How This Guide is Organized . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
Using the Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
Documentation Conventions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
General Conventions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
Conventions Referring to Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
Product Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
For More Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
Chapter 1 Preparing to Install . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
Installation Roadmap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
Installation Components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
Application Server . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
Administration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
Administration Client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
Java 2 Software Development Kit (J2SE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
Sun ONE Message Queue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
Sample Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
Always-On Technology Components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
High-Availability Database (HADB) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
HADB Management Client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
Load Balancer Plug-in . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Installation Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Graphical Interface Method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Command-Line Interface Method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Silent Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Distribution of the Product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Installation Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Platform Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
4 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Configuration 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
Configuration 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
Configuration 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
Solaris Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
Solaris 8 Patch Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
Shared Message Queue Broker Requirement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
Hardened Solaris Operating Environment Requirement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
General Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
High-Availability Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
Topology Planning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
Space Considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
Web Server Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
Shared Memory Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
Remote Access Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
Accessing the Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
Chapter 2 Installing Enterprise Edition Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
About Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
Installation Components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
Installation Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
Installation Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
Installing Application Server Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36
Installing the Load Balancer Plug-in . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
Installing in Silent Mode (Non-Interactive) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
Creating the Installation Configuration File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
Syntax for Creating the Installation Configuration File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
Example Installation Configuration File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
Modifying the Installation Configuration File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
Installing in Silent Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
Chapter 3 Preparing for HADB Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
Configuring Shared Memory and Semaphores . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
Setting Up Host Communication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
Setting up RSH for HADB Administration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
Setting Up SSH for HADB Administration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
SSH Requirements and Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
Installing SSH for Solaris 8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
Configuring SSH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
Setting Up the User Environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
Setting Up Administration for Non-Root . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64
Using the clsetup Command . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
How the clsetup Command Works . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
5
How the Input Files Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
What the clsetup Command Accomplishes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
Commands Used by the clsetup Command . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68
clsetup Requirements and Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68
Editing the clsetup Input Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
The clinstance.conf File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
The clpassword.conf File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
The clresource.conf File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72
Running the clsetup Command . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
Cleanup Procedures for the clsetup Command . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
Chapter 4 Post-installation Tasks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
Starting and Stopping the Server . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
Using the Command-line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
Using start-domain and stop-domain . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
Using start-instance and stop-instance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
Getting Helpful Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
Using the Administration Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
Creating Domains and Instances . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
Web Services Client Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
Stopping and Starting the HADB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
Stopping the HADB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
Starting the HADB After Stopping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
Chapter 5 Uninstalling the Enterprise Edition Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
About Uninstalling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
Components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
Uninstallation Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
Uninstalling the Application Server Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
Uninstalling in Silent Mode (non-interactive) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
Chapter 6 Troubleshooting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
About Logs and Messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
J2SE Installation/Upgrade Issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
Incompatible J2SE version---cannot upgrade. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
Failure to install J2SE reported through install log file. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
Forgotten User Name or Password . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
Forgotten Admin Server Port Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
Connection Refused for Administration Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
Server Won’t Start: CGI Error Occurs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
Set Limits on File Descriptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
On Solaris: Change Kernel Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
6 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Uninstallation Failure Cleanup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
Appendix A Installation Cheatsheet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
1. Fulfill the installation requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
2. Install the software components. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
3. Complete the high-availability installation tasks. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
4. Complete the post-installation tasks. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
7
About This Guide
This Installation Guide provides instructions for installing the Sun™ Open Net
Environment (Sun ONE) Application Server 7, Enterprise Edition product.
The following topics are addressed here:
• Who Should Use This Guide
• How This Guide is Organized
• Using the Documentation
• Documentation Conventions
• Product Support
• For More Information
Who Should Use This Guide
This manual is intended for system administrators, network administrators,
evaluators, application server administrators, and developers who want to install
the Sun ONE Application Server software.
This guide assumes you are familiar with the following:
• Installation of enterprise-level software products
• UNIX® operating system
• Client/server programming model
• Internet and World Wide Web
• High-availability and clustering concepts
How This Guide is Organized
8 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
How This Guide is Organized
This guide contains the following documentation components:
• Chapter 1, “Preparing to Install” on page 15—Provides information on the
installation components, installation methods, and requirements for installing
Sun ONE Application Server 7, Enterprise Edition software
• Chapter 2, “Installing Enterprise Edition Software” on page 31—Provides
instructions for installing the Sun ONE Application Server 7, Enterprise
Edition software components. Includes instructions for performing a
non-interactive silent installation.
• Chapter 3, “Preparing for HADB Setup” on page 53—Provides instructions for
configuring shared memory, and setting up host communications and the user
environment for the high-availability configuration.
• Chapter 4, “Post-installation Tasks” on page 81—Describes additional tasks
you may need to perform during or after installing the Sun ONE Application
Server software.
• Chapter 5, “Uninstalling the Enterprise Edition Software” on
page 87—Provides instructions for uninstalling the Sun ONE Application
Server 7 software. Includes instructions for performing a non-interactive silent
uninstallation.
• Chapter 6, “Troubleshooting” on page 93—Provides information on logging as
well as solutions to problems you may encounter during or after installation or
uninstallation.
• Appendix A, “Installation Cheatsheet” on page 101—Provides a checklist of
the summarized tasks of installing the Sun ONE Application Server Version 7,
Enterprise Edition software.
Using the Documentation
The Sun ONE Application Server 7, Enterprise Edition manuals are available in
Portable Document Format (PDF) and Hypertext Markup Language (HTML) on
the documentation CD that is distributed with the product.
The following table lists tasks and concepts described in the Sun ONE Application
Server manuals. The left column lists the tasks and concepts, and the right column
lists the corresponding manuals.
Using the Documentation
About This Guide 9
Application Server Documentation Roadmap
For information about See the following
Late-breaking information about the software and the documentation Release Notes
Comprehensive, table-based summary of supported hardware, operating system, JDK,
and JDBC/RDBMS.
Platform Summary
Sun ONE Application Server 7 overview, features available with each
product edition
Product Overview
Diagrams and descriptions of server architecture, benefits of the Sun ONE
Application Server architectural approach
Server Architecture
New enterprise, developer, and operational features of Sun ONE
Application Server 7
What’s New
How to get started with the Sun ONE Application Server 7 product. Includes
new features, architectural overview, and sample application tutorial.
Getting Started Guide
Installing the Sun ONE Application Server software and its components, such as
sample applications, the Administration interface, and the high-availability
components. Instructions for implementing a basic high-availability configuration are
included.
Installation Guide
Evaluating your system needs and enterprise to ensure that you deploy Sun
ONE Application Server in a manner that best suits your site. General issues
and concerns that you must be aware of when deploying an application
server are also discussed.
System Deployment Guide
Best practices for HTTP session availability that application architects and
developers can use
Application Design Guidelines
for Storing Session State
Creating and implementing J2EE applications intended to run on the
Application Server 7 that follow the open Java standards model for servlets,
Enterprise JavaBeans™ (EJBs™), JavaServer Pages (JSPs), and other J2EE
components. Includes general information about application design,
developer tools, security, assembly, deployment, debugging, and creating
lifecycle modules. A comprehensive Application Server glossary is included.
Developer’s Guide
Creating and implementing J2EE web applications that follow the Java™
Servlet and JavaServer Pages™ (JSP™) specifications on the Application
Server 7. Discusses web application programming concepts and tasks, and
provides sample code, implementation tips, and reference material. Topics
include results caching, JSP precompilation, session management, security,
deployment, SHTML, and CGI.
Developer’s Guide to Web
Applications
Using the Documentation
10 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Creating and implementing J2EE applications that follow the open Java
standards model for enterprise beans on the Sun ONE Application Server 7.
Discusses Enterprise JavaBeans™ (EJB™) programming concepts and tasks,
and provides sample code, implementation tips, and reference material.
Topics include container-managed persistence, read-only beans, and the XML
and DTD files associated with enterprise beans.
Developer’s Guide to
Enterprise JavaBeans
Technology
Creating Application Client Container (ACC) clients that access J2EE
applications on the Application Server 7
Developer’s Guide to Clients
Creating web services in the Sun ONE Application Server environment Developer’s Guide to Web
Services
Java™ Database Connectivity (JDBC™), transaction, Java Naming and
Directory Interface™ (JNDI), Java™ Message Service (JMS), and JavaMail™
APIs
Developer’s Guide to J2EE
Services and APIs
Creating custom NSAPI plugins Developer’s Guide to NSAPI
Information and instructions on the configuration, management, and deployment of
the Sun ONE Application Server subsystems and components, from both the
Administration interface and the command-line interface. Topics include cluster
management, the high-availability database, load balancing, and session persistence.
A comprehensive Application Server glossary is included.
Administrator’s Guide
Editing Sun ONE Application Server configuration files, such as the server.xml
file
Administrator’s Configuration
File Reference
Configuring and administering security for the Sun ONE Application Server
operational environment. Includes information on general security,
certificates, and SSL/TLS encryption. HTTP server-based security is also
addressed.
Administrator’s Guide to
Security
Configuring and administering service provider implementation for J2EE™
Connector Architecture (CA) connectors for the Sun ONE Application
Server 7. Topics include the Administration Tool, Pooling Monitor, deploying
a JCA connector, and sample connectors and sample applications.
J2EE CA Service Provider
Implementation
Administrator’s Guide
Migrating your applications to the new Sun ONE Application Server 7
programming model, specifically from iPlanet Application Server 6.x and from
Netscape Application Server 4.0. Includes a sample migration.
Migrating and Redeploying
Server Applications Guide
How and why to tune your Sun ONE Application Server to improve
performance
Performance Tuning Guide
Information on solving Sun ONE Application Server problems Troubleshooting Guide
Application Server Documentation Roadmap (Continued)
For information about See the following
Documentation Conventions
About This Guide 11
Documentation Conventions
This section describes the types of conventions used throughout this guide:
• General Conventions
• Conventions Referring to Directories
General Conventions
The following general conventions are used in this guide:
• File and directory paths are given in UNIX® format (with forward slashes
separating directory names).
• URLs are given in the format:
http://server.domain/path/file.html
In these URLs, server is the server name where applications are run; domain is
your Internet domain name; path is the server’s directory structure; and file is
an individual filename. Italic items in URLs are placeholders.
• Font conventions include:
? The monospace font is used for sample code and code listings, API and
language elements (such as function names and class names), file names,
path names, directory names, and HTML tags.
? Italic type is used for code variables.
Messages that you may encounter while running Sun ONE Application
Server 7. Includes a description of the likely cause and guidelines on how to
address the condition that caused the message to be generated.
Error Message Reference
Utility commands available with the Sun ONE Application Server; written in
manpage style
Utility Reference Manual
Using the Sun ONE Message Queue software. The Sun ONE Message
Queue documentation at:
http://docs.sun.com/db?p
=prod/s1.s1msgqu
Application Server Documentation Roadmap (Continued)
For information about See the following
Product Support
12 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
? Italic type is also used for book titles, emphasis, variables and placeholders,
and words used in the literal sense.
? Bold type is used as either a paragraph lead-in or to indicate words used in
the literal sense.
• Installation root directories for most platforms are indicated by install_dir in
this document.
• Instance root directories are indicated by instance_dir in this document, which
is an abbreviation for the following:
default_config_dir/domains/domain/instance
Conventions Referring to Directories
By default, when using the Solaris 8 and 9 package-based installation, the
application server files are spread across several root directories. These directories
are described in this section.
• install_dir refers to /opt/SUNWappserver7, which contains the static portion of
the installation image. All utilities, executable files, and libraries that make up
the application server reside in this location.
• default_config_dir refers to /var/opt/SUNWappserver7/domainswhich is the
default location for any domains that are created.
• install_config_dir refers to /etc/opt/SUNWappserver7/, which contains
installation-wide configuration information such as licenses and the master list
of administrative domains configured for this installation.
Product Support
Use your early access support process for any product or documentation issues
and for submitting defects.
If you have general feedback on the product or documentation, please send this to
appserver-feedback@sun.com.
If you have problems with your system, contact customer support using one of the
following mechanisms:
• The online support web site at:
http://www.sun.com/supportraining/
For More Information
About This Guide 13
• The telephone dispatch number associated with your maintenance contract
Please have the following information available prior to contacting support. This
helps to ensure that our support staff can best assist you in resolving problems:
• Description of the problem, including the situation where the problem occurs
and its impact on your operation
• Machine type, operating system version, and product version, including any
patches and other software that might be affecting the problem
• Detailed steps on the methods you have used to reproduce the problem
• Any error logs or core dumps
For More Information
Useful information can be found at the following Internet locations:
• Sun ONE products and services information
http://www.sun.com/service/sunps/sunone/index.html
• Sun ONE developer information
http://wwws.sun.com/software/product_categories/application_development.html
• Sun ONE learning solutions
http://wwws.sun.com/software/training/
• Sun ONE product data sheets
http://wwws.sun.com/software/
• Sun Microsystems product documentation
http://docs.sun.com/
For More Information
14 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
15
Chapter 1
Preparing to Install
This chapter explains the Sun Open Net Environment (Sun ONE) Application
Server 7, Enterprise Edition software components, the scope and limitations of
your installation choices, and the system requirements for the Application Server
environment.
The following topics are addressed here:
• Installation Roadmap
• Installation Components
• Installation Methodology
• Distribution of the Product
• Installation Requirements
• Accessing the Documentation
Read the Sun ONE Application Server Release Notes for any late-breaking installation
information.
For more information about configuring the Sun ONE Application Server software
after installation, refer to the Sun ONE Application Server Administrator’s Guide.
The following location contains helpful information, including Technical Notes,
Forum discussions, tools and utilities, and product downloads:
http://wwws.sun.com/software/products/appsrvr/home_appsrvr.html
Installation Roadmap
16 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Installation Roadmap
Implementing the functionality of the Enterprise Edition of Sun ONE Application
Server 7 is not a simple process. The complexities of the high-availability database
(HADB), clustering, failover, and load balancing are different for each possible
scenario and for each installation.
The roadmap in Table 1-1describes the high-level tasks that are required to fully
implement the Sun ONE Application Server 7, Enterprise Edition software. The
right column provides the location of instructions for the task.
In addition to this high-level roadmap, the summarized installation steps are
presented in a checklist format in Appendix A, “Installation Cheatsheet.”
Table 1-1 Installation Roadmap
Step Description of Task Location of Instructions
1 Decide on your high-availability
configuration and set up your systems.
System Deployment Guide
2 Verify that Enterprise Edition requirements
are met.
“Installation Requirements” on page 23
Platform Summary
3 Install the software components. “Installing Enterprise Edition Software” on page 31
4 Set up shared memory for the HADB hosts. “Configuring Shared Memory and Semaphores” on
page 53
5 Set up communication for the HADB
management client using SSH or RSH.
“Setting Up Host Communication” on page 55
6 Set the environment variables for the HADB
management client.
“Setting Up the User Environment” on page 63
7 Set up a basic cluster. “Using the clsetup Command” on page 65
8 Start the application server instances. “Starting and Stopping the Server” on page 81
9 Install the load balancer plug-in. “Installing the Load Balancer Plug-in” on page 44
10 Set up the loadbalancer.xml file. Administrator’s Guide, Configuring Load Balancing
11 Tailor your high-availability setup. Administrator’s Guide, HADB Configuration
Administrator’s Guide, Session Persistence
12 Administer the installed cluster. Administrator’s Guide, Cluster Management
Installation Components
Chapter 1 Preparing to Install 17
Sun ONE Application Server 7, Enterprise Edition documentation is located on the
documentation CD that accompanies the product.
Installation Components
The Sun ONE Application Server Version 7, Enterprise Edition product is made up
of the following software components that work together to create the Application
Server platform:
• Application Server
• Administration Client
• Sun ONE Message Queue
• Java 2 Software Development Kit (J2SE)
• Sample Applications
• Always-On Technology Components
Application Server
This component includes the core components of the Sun ONE Application Server
software and is dependent on the J2SE component. Refer to What’s New and the
Product Overview documents for a more in-depth explanation of the features of Sun
ONE Application Server 7, Enterprise Edition.
Administration
The Administration interface and the command-line interface are automatically
installed when you install the Application Server component. When the
Administration interface has been started, the initial page of the Application Server
graphical interface is displayed.
• Admin Server—Provides administration facilities (one Admin Server per
domain).
• Administration interface—Graphical interface used for performing server
administration tasks. Also called the Admin Console.
Installation Components
18 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
• Command-line interface—Performs the same tasks as the Administration
interface. A number of high-availability commands are available with this
release. Refer to the Application Server Administrator’s Guide for instructions on
using these commands.
• Multiple administrative domains—This mechanism allows different
administrators to create and manage their own sets of application server
instances.
Both the graphical and command-line administration clients allow you to manage
and configure your servers and the applications hosted on them, as well as help
you deploy your applications.
Full instructions for using the administration tools are contained in the Sun ONE
Application Server Administrator’s Guide, the Administration interface online help,
and the asadmin and hadbm man pages.
Administration Client
The administration client is the separate command-line component of the
Application Server. It is installed automatically when the Sun ONE Application
Server component is installed and is dependent on the J2SE component.
You can choose to install the command-line version of this client separately on a
machine where the Application Server is not installed. Do this by selecting the Sun
ONE Administration Client component instead of the Sun ONE Application Server
component during installation.
Java 2 Software Development Kit (J2SE)
The Sun ONE Application Server product requires the J2SE 1.4.1_03 and leverages
the performance and feature improvements that are part of the 1.4 platform.
During an installation, you can choose to reuse a J2SE component that is already
installed on your system as long as the J2SE version is correct.
NOTE The Sun ONE Application Server 7 product is only certified to work
with J2SE 1.4.1_03 from Sun Microsystems. Third-party J2SE
development kits, even with appropriate version numbers, are not
supported.
Installation Components
Chapter 1 Preparing to Install 19
The J2SE is installed here by default: /usr/j2se
Sun ONE Message Queue
The Sun ONE Message Queue, Platform Edition software is a production
implementation of the Java Messaging Service (JMS) 1.0.2 specification. It is
automatically installed when you install the Application Server software.
The Platform Edition of Sun ONE Message Queue differs from the Enterprise
Edition in that Platform Edition does not have the following Message Queue
features:
• Support for multi-broker message services
• HTTP/HTTPS connections
• Secure connection services
• Scalable connection capability
• Multiple queue delivery policies
For further information, the Sun ONE Message Queue has its own documentation
set that can be found at the following location:
http://docs.sun.com/db?p=prod/s1.s1msgqu
Sample Applications
The Sun ONE Application Server Version 7, Enterprise Edition product includes
over sixty sample applications that are available when you install the Application
Server software. This component is dependent on the Application Server
component.
All samples come with the source, schema, Ant build scripts, and EAR files. These
sample applications are categorized as follows:
• Technology samples—Introduce you to various technical aspects of the Java™
2 Platform, Enterprise Edition (J2EE™) specification as well as the value added
features of the Sun ONE platform. High-availability samples are included.
• Interoperability samples—Provide more detailed views on how these
technologies come together on the Application Server platform.
The sample applications are installed here:
Installation Components
20 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
install_dir/samples
More information about the samples can be found here:
install_dir/samples/index.html
Always-On Technology Components
The Sun ONE Application Server 7, Enterprise Edition includes the Always-On
Technology, which supports multi-tiered, multi-machine, clustered application
server deployments. In Enterprise Edition, the web tier supports load balancing
and application traffic partitioning using a web server plug-in.
Various topologies for the Always On Technology are discussed in the Sun ONE
Application Server System Deployment Guide. For instructions on configuring and
administering high availability for the Application Server, refer to the Sun ONE
Application Server Administrator’s Guide.
The following installation components provide the basis for the Always-On
Technology:
• High-Availability Database (HADB)
• HADB Management Client
• Load Balancer Plug-in
High-Availability Database (HADB)
The Application Server provides a transactional, highly-available and
highly-scalable session state persistence infrastructure. Application Server uses the
HADB to store session information.
For additional information on this component, refer to the HADB Configuration
chapter in the Sun ONE Application Server Administrator’s Guide.
HADB Management Client
The HADB management client is the command-line interface for the HADB. A full
set of utilities is available for performing HADB configuration, runtime
management, and monitoring.
Instructions for using the utilities are contained in the Sun ONE Application Server
Administrator’s Guide, the hadbm man pages, and the asadmin session persistence
man pages.
Installation Methodology
Chapter 1 Preparing to Install 21
Load Balancer Plug-in
The load balancer is responsible for taking incoming HTTP requests and
distributing them across the instances in the cluster. The load balancer also makes
it possible for sessions to fail over to new instances when an instance becomes
unavailable, and for a user to quiesce an instance prior to taking it offline.
The Application Server high-availability load balancer plug-in is an enhanced
version of the HTTP reverse proxy plug-in. In addition, third-party load balancers
can be used. This component is dependent on a pre-installed web server.
Supported web servers are listed in the Sun ONE Application Server Platform
Summary.
For additional information on this component, refer to “Installing the Load
Balancer Plug-in” on page 44 and the Configuring Load Balancing in the Sun ONE
Application Server Administrator’s Guide.
Installation Methodology
The Sun ONE Application Server can be installed or uninstalled using the
command-line interface or the graphical interface. You can install interactively
using either the graphical or command-line interfaces, or you can use silent mode
to replicate an installation scenario on one or multiple machines.
Partial and incremental (subsequent) installations are supported. Using either of
the interactive methods, you can do a partial installation which can be followed by
any number of incremental installations. For silent mode, you can do a partial
initial installation, but any subsequent installations must be done using an
interactive method.
The installation program or uninstallation program checks for component
dependencies and does not allow you to install or uninstall components without
their dependent components.
The following sections explain the various installation methods:
• Graphical Interface Method
• Command-Line Interface Method
• Silent Mode
Installation Methodology
22 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Graphical Interface Method
If you choose to use the graphical interface for installation, you are provided with a
set of interactive graphical dialogs.
To invoke the installation program using the graphical (default) method:
./setup
To invoke the uninstallation program using the graphical (default) method:
./uninstall
Command-Line Interface Method
If you choose to the use the command-line interface, the installation steps are the
same as for the graphical-interface installation, but a graphics-capable display is
not provided.
To invoke the installation program using the command-line method:
./setup -console
To invoke the uninstallation program using the command-line method:
./uninstall -console
If you are using Telnet to access a remote server, you can use the command-line
interface to install the product in an interactive fashion.
Silent Mode
You can use silent mode to perform a scripted installation based on the presence of
a parameter file that was created during an interactive installation. In silent mode,
the Application Server software is installed or uninstalled without any interaction
with you. By referring to the installation configuration file, the components that
were installed or uninstalled in the interactive model are automatically installed or
uninstalled on one or multiple servers.
NOTE For a hardened Solaris operating environment, you must use the
command-line method. To start the installation program in a
hardened environment, you will need to perform the steps in
“Hardened Solaris Operating Environment Requirement” on
page 26.
Distribution of the Product
Chapter 1 Preparing to Install 23
Instructions for using silent mode are contained in “Installing in Silent Mode
(Non-Interactive)” on page 48 and “Uninstalling in Silent Mode (non-interactive)”
on page 90.
Distribution of the Product
The Sun ONE Application Server 7, Enterprise Edition software is available on a
CD-ROM. The Enterprise Edition license is automatically installed with the
product and doesn’t expire. No other licenses can be transitioned to the Enterprise
Edition license.
The package-based model installs the components as packages. By default, the
installation locations are spread across three directory roots:
• /opt/SUNWappserver7 contains the static portion of the installation image. All
utilities, executables and libraries of the Application Server software reside in
this location.
• /etc/opt/SUNWappserver7 contains installation-wide configuration
information such as licenses and the master list of administrative domains
configured for this installation.
• /var/opt/SUNWappserver7/domains is the default area under which
administrative domains are created.
Installation Requirements
This section lists the requirements that must be met before installing the Sun ONE
Application Server 7, Enterprise Edition product.
• Platform Requirements
• Solaris Requirements
• General Requirements
• High-Availability Requirements
NOTE Only product patches and upgrades affect /opt/SUNWappserver7.
Installation Requirements
24 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Platform Requirements
Table 1-2 through Table 1-4 summarize the Sun ONE Application Server 7,
Enterprise Edition requirements for the various high-availability configurations.
Configuration 1
Table 1-2 describes a three-machine type of configuration:
• * Machine 1—Web Server
• ** Machine 2—Application Server instance 1, HADB Node 1
• *** Machine 3—Application Server instance 2, HADB Node 2
Configuration 2
Table 1-3 describes a two-machine type of configuration:
• * Machine 1—Web Server/Application Server (1 Admin Server instance, 1
Application Server instance)
• ** Machine 2—Application Server instance 2 (1 Admin Server instance, 1
Application Server instance), 2 HADB Nodes
Table 1-2 Platform Requirements for Configuration 1
Machine Config
uration
Operating
System
Archite
cture
Minimum
Memory
Recommend
ed Memory
Minimum
Disk Space
Recommende
d Disk Space
1 * Solaris 8, 9
for SPARC
32 and
64 bit
96 MB 128 MB 250 MB 500 MB
2 ** Solaris 8, 9
for SPARC
32 and
64 bit
512 MB
(256 MB for
AppServ; 256
MB HADB)
768 MB 500 MB
(250 MB for
AppServ;
250 MB for
HADB)
750 MB
3 *** Solaris 8, 9
for SPARC
32 and
64 bit
768 MB 500 MB
(250 MB for
AppServ;
250 MB for
HADB)
750 MB
Installation Requirements
Chapter 1 Preparing to Install 25
Configuration 3
Table 1-4 describes a single-machine type of configuration:
• * Machine 1—Web Server/Application Server (1 Admin Server instance, 2
Application Server instances), 2 HADB Nodes
You can check your operating system version using the uname or showrev
command. Disk space can be checked using the df -k command. RAM can be
checked using the prtconf or top commands.
For the latest information about supported directory servers, web servers, web
browsers, and so on, refer to the Sun ONE Application Server Platform Summary.
Solaris Requirements
The following Solaris-specific requirements must be met:
• Solaris 8 Patch Requirements
• Shared Message Queue Broker Requirement
• Hardened Solaris Operating Environment Requirement
Table 1-3 Platform Requirements for Configuration 2
Machine Config
uration
Operating
System
Archite
cture
Minimum
Memory
Recommend
ed Memory
Minimum
Disk Space
Recommende
d Disk Space
1 * Solaris 8, 9
for SPARC
32 and
64 bit
352 MB 640 MB 500 MB 1 GB
2 ** Solaris 8, 9
for SPARC
32 and
64 bit
768 MB 1 GB 750 MB 1 GB
Table 1-4 Platform Requirements for Configuration 3
Machine Config
uration
Operating
System
Archite
cture
Minimum
Memory
Recommend
ed Memory
Minimum
Disk Space
Recommende
d Disk Space
1 * Solaris 8, 9
for SPARC
32 and
64 bit
992 MB 1.5 GB 1.128 GB 1.75 GB
Installation Requirements
26 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Solaris 8 Patch Requirements
For Solaris 8 systems, the following Solaris patches must be installed:
• 109326-06
• 108827-26
• 110934-02
These patches are available individually from the patch finder page here:
http://sunsolve.sun.com/pub-cgi/show.pl?target=patches/patch-access
Shared Message Queue Broker Requirement
If your machine has an active installation of the Solaris 9 bundled version of the
Application Server software, and you install the unbundled version of the server,
the Message Queue broker for these application server installations will be shared.
Therefore, if you fail to uniquely name your domains and instances, you may
receive the following errors when starting up the second instance with the same
domain or instance name:
SEVERE: JMS5024: JMS service startup failed
SEVERE: CORE5071: An error occured during initialization
To avoid these errors, see JMS Support in the Sun ONE Application Server
Administrator’s Guide.
Hardened Solaris Operating Environment Requirement
Hardening means customizing existing services or functions so as to improve the
overall security of the platform. The hardening process generally includes tasks
such as disabling unnecessary services, strengthening ownership and permissions
on objects, and enabling miscellaneous security functions such as non-default
logging and auditing. A hardened operating system usually doesn't allow
GUI-based applications to be run in the environment.
NOTE Solaris 8 systems should have the “Sun recommended patch cluster”
installed. The patch cluster includes the three required patches listed
in this section and is available under “Recommended and Security
Patches” here:
http://sunsolve.sun.com/
Installation Requirements
Chapter 1 Preparing to Install 27
The following two libraries are required to install and use Sun ONE Application
Server 7, Enterprise Edition in a hardened Solaris operating environment:
• libC.so.5
• libCrun.so.1
These libraries can be obtained by installing the SUNWlibC (Sun Workshop
Compilers Bundled libC) package which is part of the Solaris distribution in the
end-user package cluster (not in the core).
General Requirements
The following additional requirements should be met before installing the Sun
ONE Application Server 7, Enterprise Edition product:
• Removing previously-installed Sun ONE Application Server 7 software—If
there is previously-installed Sun ONE Application Server 7 software on the
target machine, you must remove it using the uninstallation program before
starting installation.
• Available ports
? You’ll assign one for the Admin Server and another for the HTTP server
default instance during installation.
? The installation program will detect used ports and assign two others for
you: Sun ONE Message Queue (by default, 7676), and IIOP (by default,
3700). If either of these default port numbers are in use, the installation
program will assign the next available port (for example, 7677 or 7678, and
so on).
? Additional ports will be needed for the HADB servers. Refer to the HADB
configuration chapter in the Sun ONE Application Server Administrator’s
Guide for guidelines.
• Root privileges—You must have root privileges on your target machine.
NOTE Solaris 9 bundled installations or non-package-based evaluation
installations do not affect the Enterprise Edition installation
program, so they do not need to be removed from your system.
However, port conflicts must be resolved.
Installation Requirements
28 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
• Single installation—You can have only one installation per machine, however,
you can have multiple instances running within the same installation.
High-Availability Requirements
The following requirements are key to setting up your high-availability
environment:
• Topology Planning
• Space Considerations
• Web Server Installation
• Shared Memory Setup
• Remote Access Setup
Topology Planning
Before you install the Sun ONE Application Server 7, Enterprise Edition software,
you will need to decide on product topology, that is, which component will be
hosted on which available system. The Sun ONE Application Server and the HADB
server can generally be hosted in two ways:
• Application Server and HADB server node hosted on the same system
• Application Server and HADB server node hosted on separate systems
In both cases, at least two systems per component are needed to achieve high
availability.
The installation program enforces explicit component dependencies, but will not
otherwise limit combinations of product components that can be installed on a
particular machine. As a result, the number of possible product topologies is quite
large.
Details on the various topologies that can be implemented for the Always On
Technology are discussed in the Enterprise Edition of the Sun ONE Application
Server Operational Deployment Guide.
Installation Requirements
Chapter 1 Preparing to Install 29
Space Considerations
Data devices should not be filled beyond 50% of capacity because additional space
is needed to refragment the HADB. If refragmentation fails, it might be because
devices are too full and there is not enough space. If devices are running at 80% or
90% of capacity and refragmentation fails, the HADB will need to be cleared,
meaning that all data removed from the database and the session schema.
It is important to monitor the space on the devices using the hadbm deviceinfo
command. When device capacity exceeds 50%, additional nodes should be added.
Refer to the Sun ONE Application Server Administrator’s Guide and the Sun ONE
Performance Tuning Guide for information and instructions.
Web Server Installation
Before you start the installation process, your web server must be installed on any
machine where you are going to install the load balancer plug-in.
Currently-supported versions include the following:
• Sun ONE Web Server 6.0 SP6
• Apache Web Server 1.3.27
For installing the Sun ONE Web Server, refer to the iPlanet WebServer Installation
Guide at this location:
http://docs.sun.com/db/prod/s1websrv
Instructions for installing the plug-in are contained in “Installing the Load Balancer
Plug-in” on page 44.
Shared Memory Setup
You will need to configure shared memory on the HADB hosts before you can set
up the HADB. This can be done before or after installing the high-availability
components. Refer to “Configuring Shared Memory and Semaphores” on page 53
for instructions.
Remote Access Setup
Before you can set up the HADB, you will need to configure remote access on the
HADB hosts to enable the high-availability management client to communicate
among HADB nodes. This can be done before or after installing the
high-availability components. Refer to “Setting Up Host Communication” on
page 55 for instructions on configuring OpenSSH/SSH or RSH.
Accessing the Documentation
30 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Accessing the Documentation
The Sun ONE Application Server documentation is provided in a number of ways:
• Manuals—The Sun ONE Application Server 7, Enterprise Edition manuals and
release notes, in HTML and in printable PDF, are available on the
documentation CD-ROM that comes with the product.
• Online help—Click the Help button in the graphical interface to launch a
context-sensitive help window.
• Man pages—To view man pages at the command line, you must first add
install_dir/man to your MANPATH environment variable (Solaris) and add the
HADB /bin directory to PATH. After setting the variable, you can access man
pages for the Sun ONE Application Server commands by typing man
command_name on the command line. For example:
man asadmin
man hadbm
31
Chapter 2
Installing Enterprise Edition Software
This chapter provides instructions for installing the Sun ONE Application Server 7,
Enterprise Edition product. You can install this version of the product interactively
or you can use silent mode to replicate an installation scenario on multiple
machines. Refer to “Installation Roadmap” on page 16 to see the full sequence of
events for implementing the Sun ONE Application Server 7, Enterprise Edition
product.
The following topics are addressed here:
• About Installation
• Installing Application Server Software
• Installing the Load Balancer Plug-in
• Installing in Silent Mode (Non-Interactive)
You should be familiar with the information in “Preparing to Install” on page 15
before beginning the tasks in this chapter.
For any late-breaking updates to these instructions, check the Sun ONE Application
Server Release Notes. For more information about configuring your application
server after installation, refer to the Sun ONE Application Server Administrator’s
Guide.
The following location contains product downloads in addition to other useful
information:
http://www.sun.com/software/products/appsrvr/home_appsrvr.html
About Installation
32 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
About Installation
Only one Sun ONE Application Server 7 installation can reside on a single
machine. If an installation of Application Server 7 already exists on your system,
the installation program will not overwrite it, but the pre-existing installation will
be detected and you will not be allowed to proceed with the installation until you
have removed the existing Application Server 7 software using the uninstallation
program.
The following topics are addressed in this section:
• Installation Components
• Installation Options
Installation Components
In general, you are installing the basic components that provide the functionality of
the Sun ONE Application Server Version 7, Enterprise Edition product. You can
choose not to install some of the components. Later, if you want to add a
component that you initially chose not to install, you can do an incremental
installation of that component, providing dependencies are met.
Since only one installation of the same component package on the same system is
allowed, the installation program tries to detect components that are already
installed. If a component is already installed, installation of that component is
disabled.
NOTE Solaris 9 bundled installations and non-package-based evaluation
installations do not affect the Enterprise Edition installation
program, so they do not need to be removed from your system.
NOTE Using either of the interactive methods, you can do a partial
installation which can be followed by any number of incremental
(subsequent) installations. For silent mode, you can do a partial
initial installation, but any subsequent installations must be done
using an interactive method.
About Installation
Chapter 2 Installing Enterprise Edition Software 33
The installation program enforces component dependencies as specified for each
component. Once component dependencies are satisfied, component life cycles are
independent. A particular component can be installed or uninstalled dynamically
through incremental installation and partial uninstallation mechanisms without
corrupting other components.
The following installation components are included with the Sun ONE Application
Server 7, Enterprise Edition product:
• Sun ONE Application Server—all of Sun ONE Appserver 7, including its
graphical and command-line administrative tools, the asadmin command, and
Sun ONE Message Queue 3.0.1
• Sun ONE Application Server Administration Client—only the asadmin
command
• Java 2 Software Development Kit (J2SE), Standard Edition 1.4.0_03
• Sample applications (Optional)
• High-Availability Database (HADB)—all of HADB, including the hadbm
command
• HADB Management Client—only the hadbm command
• Load balancer plug-in for web servers
NOTE If you want to install the Application Server and an HADB server
node on the same system, select both components. Otherwise select
only one of them.
The clsetup command must be run from a machine where the
asadmin and the hadbm utilities are available. Instructions for using
the clsetup command to create a basic cluster can be found in
“Using the clsetup Command” on page 65.
NOTE You can choose to install the administration client command-line
version separately on a machine where the Application Server is not
installed. Do this by selecting only the Administration Client
component during incremental installation.
About Installation
34 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
The load balancer plug-in is usually installed in a separate process on a
separate machine. Refer to “Installing the Load Balancer Plug-in” on page 44
for guidelines.
See “Installation Components” on page 17 for further description of the Sun ONE
Application Server components.
Installation Options
There are three ways you can perform the installation:
• Graphical method (interactive)—The installation program prompts you using
a sequence of graphical screens. This is the default method.
• Command-line method (interactive)—The installation program prompts you
using a sequence of command-line prompts and messages.
• Silent mode—The installation program reads installation parameters from a
supplied configuration file and logs all output into a log file.
The setup command allows you to specify the method you want to use for
installation, and allows you to create a configuration file for silent installation.
Use the following syntax when running the setup command:
setup [-console] [-silent config_file] [-savestate]
Table 2-1 describes the setup command options.
NOTE The default installation mode is the graphical method, so if you
don’t specify an option when you run setup, the installation
program presents the graphical screens.
Table 2-1 Options for the setup Command
Option Description
-console Runs the installation using the command-line method.
About Installation
Chapter 2 Installing Enterprise Edition Software 35
Installation Syntax
• To run the installation using the graphical interface, type the following at the
command prompt (no options; this is the default method):
./setup
• To run the installation using the command-line interface, type:
./setup -console
• To run the installation using the graphical interface and create an installation
configuration file for silent mode installation:
./setup -savestate
The file called statefile will be created in install_dir.
• To run the installation using the command-line interface and create an
installation configuration file for silent mode installation:
./setup -console -savestate
The file called statefile will be created in install_dir.
• To run a silent mode installation based on an existing installation configuration
file:
./setup -silent config_file
Refer to “Installing in Silent Mode (Non-Interactive)” on page 48 for further
specifics on silent mode installation and the installation configuration file.
-silent config_file Runs the installation in silent mode. Installation parameters are read from
an existing installation configuration file. This option is mutually exclusive
with the savestate option.
The installation configuration file path must be explicitly provided; there
is no default file path. Refer to “Installing in Silent Mode
(Non-Interactive)” on page 48 for further specifics on silent mode
installation and the installation configuration file.
-savestate Runs the installation using either the graphical or command-line method
and creates an installation configuration file based on this installation. This
option is mutually exclusive with the silent option. If you do not specify
this option, no installation configuration file will be created.
The file will be called statefile and located in install_dir.
Table 2-1 Options for the setup Command (Continued)
Option Description
Installing Application Server Software
36 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
• To display the available command-line arguments for the setup command:
./setup -help
or
./setup -h
Installing Application Server Software
This section provides instructions for installing the Sun ONE Application Server
software using either the graphical-interface or command-line interface. The steps
are identical for both methods. However, for the command-line interface,
text-based screens are displayed instead of graphical screens.
After you have planned the topology, run the installation program on each system,
selecting and installing the appropriate components based on your topology.
1. Uninstall any previous versions of the Sun ONE Application Server 7 software
on the machines where you are going to install the Enterprise Edition of the
Application Server.
2. Verify that all requirements that apply to your installation have been met. See
“Installation Requirements” on page 23 for information on requirements.
3. Log in as root and create a temporary directory for the product distribution
file.
TIP If you are familiar with high availability concepts and installation of
enterprise-level products, you may want to use the summary
checklists in Appendix A, “Installation Cheatsheet.”
NOTE If the previously-installed packages are bundled in the Solaris
operating environment, they need not be removed. However, port
conflicts must be resolved.
Installing Application Server Software
Chapter 2 Installing Enterprise Edition Software 37
4. Start all the processes on your system that use ports and are expected to run at
the same time as the Application Server software. This allows the installation
program to detect what ports are in use and avoid assigning them for other
purposes.
5. For a download, unzip the .gz file as follows:
gunzip sun-appserver7-sol.tar.gz
6. For a download, untar the unzipped file as follows:
tar -xvf sun-appserver7-sol.tar
This process may take a little time. When the files are unpacked, you will see
the sun-appserver7 directory, which contains the setup file and the pkg
directory.
7. Navigate to the sun-appserver7 directory.
8. Select your installation method.
Refer to “Installation Options” on page 34 for guidelines on selecting the
correct options to use with the setup command.
When the installation starts, the Welcome page of the installation program is
displayed.
9. Read the Welcome page and click Next.
The License Agreement page is displayed.
10. Read the License Agreement and click Yes to agree to the terms of the license
(or type Yes at the command line), then click Next.
NOTE If you are installing the load balancer plug-in, your web server
must already be installed on the machines where you are going
to install the load balancer plug-in before you start the
installation process. Refer to “High-Availability Requirements”
on page 28.
NOTE Click the Help button to display context-sensitive information for a
page.
Installing Application Server Software
38 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
After you accept the License Agreement, the Select Installation Directory page
is displayed.
11. Specify the path to your Sun ONE Application Server installation directory
(default is /opt/SUNWappserver7).
If you are installing only the HADB Server component, you can choose /opt as
the installation directory. This will install the HADB packages into their
default location, which is /opt/SUNWhadb.
? Click Browse to browse for a directory (or press Enter at the command line
to accept the default installation directory).
? If you enter a directory name that does not already exist, the Create New
Directory? dialog is displayed.
• Click Create Directory (or type 1 at the command line) to create a new
directory.
• Click Choose New (or type 2 at the command line) to return to the
Select Installation Directory page.
The Component Selection page displays the available components.
12. Choose from the components listed on the Component Selection page (or type
Yes or press Enter to accept a component from the command line).
NOTE You must accept the license agreement to continue with the
installation.
NOTE You must select identical installation directories on all systems
hosting HADB Server nodes.
NOTE When installing the Sun ONE Application Server together with
HADB, if you do not want to use the default installation folder,
you can create alternate directories, then create symlinks (ln -s)
to these directories from the /var/opt and /etc/opt directories.
The standards for packaging Solaris packages require that the
licenses and configuration files are located in the /var/opt and
/etc/opt directories.
Installing Application Server Software
Chapter 2 Installing Enterprise Edition Software 39
? Sun ONE Application Server, with graphical and command-line
interfaces (J2SE and Sun ONE Message Queue are installed along with this
component)
? (Optional) Sample Applications
? Sun ONE Application Server Administration Client (select only this
component to install standalone command-line)
? High-Availability Database
? High-Availability Database Administration Client
? Load Balancer Plug-in
Refer to “Installing the Load Balancer Plug-in” on page 44 for instructions
on installing this component separately.
13. Sun ONE Message Queue—If the installation program detects a version of the
Sun ONE Message Queue preinstalled in your system, you are presented with
one of the following actions:
? If the correct version of the package-based Sun ONE Message Queue is
installed, it will be reused. You can choose to exit at this point. If you don’t
exit, the installation program will use the installed version and proceed to
the next step.
NOTE If some components are disabled on the Component Selection
page (or if a command-line mode installation did not offer them
for installation), this means the disabled component has been
detected as already installed on your system.
NOTE If you want to install Sun ONE Application Server and an
HADB server node on the same system, select them both.
Otherwise, select only one of them.
NOTE If you do not already have your web server installed on the machine
where you are installing the load balancer plug-in, you cannot
continue to install the load-balancer plug-in.
Installing Application Server Software
40 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
? If there is no package-based Sun ONE Message Queue installed, you can
choose to let the installation program install the Sun ONE Message Queue
packages automatically.
? If an incorrect version of the package-based Sun ONE Message Queue is
found, a message is displayed, asking if you want to upgrade your current
version or cancel. Choose one of the following:
• To have the installation program update your current Sun ONE
Message Queue, click Upgrade (or type 1 at the command line).
• To exit the installation program, click Cancel (or type 2 at the
command line).
14. For J2SE—The installation program looks in the /usr/j2se default location to
detect if you have the correct version of the J2SE preinstalled in your machine.
You are presented with one of the following actions (if you have any problems
in this step, refer to “J2SE Installation/Upgrade Issues” on page 94):
? If the correct version of the package-based J2SE is installed, it will be
reused or you can enter the path to another correct version. The installation
program proceeds to the next step.
? If there is no package-based J2SE installed, you can choose to let the
installation program install the J2SE package automatically or reuse an
existing J2SE installation.
? If an incorrect version of the package-based J2SE is found, a message is
displayed asking if you want to upgrade your current version or cancel.
Choose one of the following options:
• To have the installation program update your current J2SE version,
click Upgrade (or type 1 at the command line).
• To exit the installation program, click Cancel (or type 2 at the
command line).
Before continuing with the installation, you must uninstall the J2SE
currently located in /usr/j2se or upgrade it to J2SE 1.4.1_03. Then
restart the Application Server installation.
NOTE Because other applications might be running and using this J2SE
installation, upgrading J2SE is a potentially disruptive process. You
may prefer to cancel the current installation and take care of all
dependencies (such as gracefully shutting down processes).
Installing Application Server Software
Chapter 2 Installing Enterprise Edition Software 41
15. Specify your product configuration directory.
Accept the default (/etc/opt/SUNWappserver7) or enter the path to your Sun
ONE Application Server product configuration directory.
? Click the ellipsis (...) to browse for a directory (or press Enter at the
command line to accept the default installation directory).
? If the directory does not already exist, the Create New Directory? dialog is
displayed.
? Click Create Directory (or type 1 at the command line). You can also click
Choose New (or type 2 at the command line) to select an existing directory.
16. Specify your server configuration directory.
Accept the default (/var/opt/SUNWappserver7) or enter the path to your Sun
ONE Application Server Version 7, Enterprise Edition domains installation
directory.
? Click the ellipsis (...) to browse for a directory (or press Enter at the
command line to accept the default installation directory).
? If the directory does not already exist, the Create New Directory? dialog is
displayed.
? Click Create Directory (or type 1 at the command line). You can also click
Choose New (or type 2 at the command line) to select an existing directory.
If you selected Application Server for installation, the Server Configuration
Information page is displayed. Skip to Step 18.
If you selected the load balancer plug-in, the Web Server Directory page is
displayed. Proceed to Step 17
17. If you selected the load balancer plug-in, identify your web server as follows:
NOTE If your J2SE requires an upgrade, you will need to reboot your
machine after completing the Application Server installation.
NOTE This Sun ONE Application Server 7 software is certified to work
with J2SE 1.4.1_03 from Sun Microsystems. Third-party J2SE
development kits, even with appropriate version number, are not
supported.
Installing Application Server Software
42 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
? Choose which web server you are going to install (Sun ONE Web Server or
Apache Web Server).
? Enter the web server instance path.
Default values will be offered based on web server type. The installation
program checks to see if appropriate configuration files can be found at the
provided location.
Refer to “Installing the Load Balancer Plug-in” on page 44 if you are installing
the load balancer plug-in separately.
18. If you selected the Sun ONE Application Server component, enter the
following:
? Admin User—Name of the user who administers the server (for example,
admin).
? Admin User’s Password—Password to access the Admin Server.
Minimum number of characters is 8. For example, adminadmin. Re-enter
the password to confirm your choice.
? Admin Server Port—Port number to access the Admin Server.
A default port number is displayed (for example 4848, if that port is not in
use on your machine). Change the default number if necessary. The
installation program will check port numbers for validity and availability
when you click Next.
? HTTP Server Port—Port number to access the default server instance.
A default port number is displayed (for example 80, if that port is not in use on
your machine). Change the default number if necessary. The installation
program will check port numbers for validity and availability when you click
Next.
NOTE The installation program automatically detects ports in use and
suggests currently unused ports for the default settings. By default,
the initial default ports are 80 for the HTTP server and 4848 for the
Admin Server.
If these initial default ports are being actively used on your system,
the installation program will suggest alternative port numbers.
Installing Application Server Software
Chapter 2 Installing Enterprise Edition Software 43
19. Click Next.
The installation program proceeds to verify that you have enough disk space
based on the components you selected. The Checking Disk Space progress
indicator bar is displayed.
? If you do not have enough disk space, an error message is displayed.
In this case, you need to exit the installation program, create enough space,
and restart the installation. Information on space requirements is
contained in “Platform Requirements” on page 24.
? If you have enough disk space, the Ready to Install page is displayed.
20. On the Ready to Install page, you have the following choices:
? Click Back if you want to return to the previous page. Disk space is
rechecked if you do this.
? Click Install Now (or type 1 at the command line) to start the installation
process.
? Click Cancel to exit the installation program.
An Installation progress indicator bar is displayed.
When installation finishes, the Installation Summary page is displayed.
21. Check the installation outcome on the Installation Summary page. If
installation failure has occurred, review the following log file:
? /var/sadm/install/logs/Sun_ONE_Application_Server_install.log
Refer to “About Logs and Messages” on page 93 for additional information.
22. Click Finish (or type Finish at the command line) to complete the installation.
The installation components are now installed on your systems.
23. Start the server.
You can start the Sun ONE Application Server software by using the
instructions on “Starting and Stopping the Server” on page 81.
When the Admin Console has been started, the initial page of the Application
Server graphical interface is displayed.
Installing the Load Balancer Plug-in
44 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
24. If you have not already done so, add the HADB bin directory to the PATH
environment variable as described in “Setting Up the User Environment” on
page 63.
25. If you selected the HADB components, verify that you have successfully
installed the HADB software by doing the following on each host:
hadbm --help
The result of this command should be a list of all commands available using
the hadbm command-line utility.
You are now ready to configure your system for high availability. Proceed to
“Preparing for HADB Setup” on page 53 to begin this process.
Installing the Load Balancer Plug-in
This section provides instructions for installing the load balancer plug-in
component separately.
To install the load balancer plug-in component, perform these steps:
1. Check the system that will be hosting the web server and load balancer plug-in
to see if a previously-installed load balancer plug-in or reverse proxy plug-in is
present. If it is, you will need to remove it using the unistallation program.
As root, run the following command:
pkginfo SUNWaspx
On a clean system, the following message will be displayed:
ERROR: information for "SUNWaspx" was not found.
2. Verify that the correct web server is present on the machines were you are
going to install the load balancer plug-in. Currently supported versions
include the following:
? Sun ONE Web Server 6.0 SP6
NOTE The installation program creates an initial domain called domain1
with a single instance called server1. Refer to “Creating Domains
and Instances” on page 84 for instructions on creating additional
domains and instances.
Installing the Load Balancer Plug-in
Chapter 2 Installing Enterprise Edition Software 45
? Apache Web Server 1.3.27
3. Log in as root and create a temporary directory for the product distribution
file.
4. For a download, unzip the .gz file as follows:
gunzip sun-appserver7-sol.tar.gz
5. For a download, untar the unzipped file as follows:
tar -xvf sun-appserver7-sol.tar
This process may take a little time. When the files are unpacked, you will see
the sun-appserver7 directory, which contains the setup file and the pkg
directory.
6. Navigate to the sun-appserver7 installation directory.
7. Select your installation method.
Refer to “Installation Options” on page 34 for guidelines on selecting the
correct options to use with the setup command.
When the installation starts, the Welcome page of the installation program is
displayed.
8. Read the License Agreement and click Yes to agree to the terms of the license
(or type Yes at the command line), then click Next.
After you accept the License Agreement, the Select Installation Directory page
is displayed.
9. Specify the path to your Sun ONE Application Server installation directory
(default is /opt/SUNWappsrver7).
? Click Browse to browse for a directory (or press Enter at the command line
to accept the default installation directory).
NOTE Make a note of the web server installation directory. This
information will be needed during installation.
NOTE You must accept the license agreement to continue with the
installation.
Installing the Load Balancer Plug-in
46 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
? If you enter a directory name that does not already exist, the Create New
Directory? dialog is displayed.
• Click Create Directory (or type 1 at the command line) to create a new
directory.
• Click Choose New (or type 2 at the command line) to return to the
Select Installation Directory page.
The Component Selection page displays the available components.
10. Choose the load balancer plug-in component on the Component Selection page
(or type Yes or press Enter to accept the component from the command line).
If you selected the load balancer plug-in component, the Web Server Directory
page displays.
11. Identify your web server.
? Choose the web server you have installed (Sun ONE Web Server or
Apache Web Server).
? Enter the web server instance path.
Default values will be offered based on server type. The installation
program checks to see if appropriate configuration files can be found at the
specified location.
12. Click Next.
The installation program proceeds to verify that you have enough disk space
based on the components you selected. The Checking Disk Space progress
indicator bar is displayed.
? If you do not have enough disk space, an error message is displayed.
In this case, you need to exit the installation program, create enough space,
and restart the installation. Information on space requirements is
contained in “Platform Requirements” on page 24.
? If you have enough disk space, the Ready to Install page is displayed.
NOTE If some components are disabled on the Component Selection page
(or if a command-line mode installation did not offer them for
installation), this means that disabled component has been detected
as already installed on your system.
Installing the Load Balancer Plug-in
Chapter 2 Installing Enterprise Edition Software 47
13. On the Ready to Install page, you have the following choices:
? Click Back if you want to return to the previous page. Disk space is
rechecked if you do this.
? Click Install Now (or type 1 at the command line) to start the installation
process.
? Click Cancel to exit the installation program.
An Installation progress indicator bar is displayed.
When installation finishes, the Installation Summary page is displayed.
14. Check installation outcome on the Installation Summary page. If installation
failure has occurred, review the following log file:
/var/sadm/install/logs/Sun_ONE_Application_Server_install.log
Refer to “About Logs and Messages” on page 93 for additional information.
15. Click Finish (or type Finish at the command line) to complete the installation.
16. Edit the supplied loadbalancer.xml.example file to include references to
actual application server instances. This file is located in the following location:
For Sun ONE Web Server:
webserver_instance_dir/config/loadbalancer.xml.example
For Apache Web Server:
webserver_instance_dir/conf/loadbalancer.xml.example
17. After you have made your modifications, save the
loadbalancer.xml.example file as loadbalancer.xml in the same directory.
NOTE If you want to configure more than one web server instance, or want
to add additional instances at a later time, you will need to manually
configure them. Instructions for doing this are contained in the
Configuring Load Balancer Plug-in section in the Sun ONE
Application Server Administrator’s Guide.
Refer to the Apache documentation for information on the Apache
Web Server.
Installing in Silent Mode (Non-Interactive)
48 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Installing in Silent Mode (Non-Interactive)
If you choose to install the Sun ONE Application Server Version 7, Enterprise
Edition software in silent mode, the installation program runs without any user
input. This is made possible when the installation program accesses a text file that
provides the installation program with the configuration information it needs.
The following topics are discussed in this section:
• Creating the Installation Configuration File
• Installing in Silent Mode
Creating the Installation Configuration File
The installation configuration file is created when you use the savestate option
with the setup command to start a interactive installation. During the interactive
installation, your input is collected and stored in the configuration file you
specified. This forms the template for silent installation, which you can use later to
install the product on one or more machines.
If needed, you can modify the installation configuration file.
The following topics are addressed in this section:
• Syntax for Creating the Installation Configuration File
• Example Installation Configuration File
• Modifying the Installation Configuration File
Syntax for Creating the Installation Configuration File
The syntax for creating an installation configuration file is as follows:
For graphical method:
./setup -savestate
For command-line method:
./setup -console -savestate
Refer to “Installation Options” on page 34 for more detailed information.
Example Installation Configuration File
An installation configuration file looks similar to the following:
Installing in Silent Mode (Non-Interactive)
Chapter 2 Installing Enterprise Edition Software 49
# Wizard Statefile created: Mon Jan 27 16:25:26 PST 2003
# Wizard path: /tmp/herc/sun-appserver7/./appserv.class
# Install Wizard Statefile section for Sun ONE Application Server
#
[STATE_BEGIN Sun ONE Application Server 108a4222b3a6a8ed98832d45238c7e8bb16c67a5]
defaultInstallDirectory = /opt/SUNWappserver7
currentInstallDirectory = /opt/SUNWappserver7
SELECTED_COMPONENTS = Java 2 SDK, Standard Edition 1.4.1_03#Application
Server#Sun ONE Message Queue 3.0.1#Sample Applications#Load Balancing
Plugin#Uninstall#Startup
USE_BUNDLED_JDK = FALSE
JDK_LOCATION = /usr/j2se
JDK_INSTALLTYPE = PREINSTALLED
AS_INSTALL_DEFAULT_CONFIG_DIR = /etc/opt/SUNWappserver7
AS_INSTALL_CONFIG_DIR = /etc/opt/SUNWappserver7
AS_INSTALL_DEFAULT_VAR_DIR = /var/opt/SUNWappserver7
AS_INSTALL_VAR_DIR = /var/opt/SUNWappserver7
DOMAINS_DIR = /var/opt/SUNWappserver7/domains
WEBSERVER_INSTALL_DEFAULT_DIR = /usr/iplanet/servers
WEBSERVER_INSTALL_DIR = /opt/iplanet/servers/https-tesla.red.iplanet.com
INST_ASADMIN_USERNAME = admin
INST_ASADMIN_PASSWORD = adminadmin
INST_ASADMIN_PORT = 4848
INST_ASWEB_PORT = 81
INSTALL_STATUS = SUCCESS
[STATE_DONE Sun ONE Application Server 108a4222b3a6a8ed98832d45238c7e8bb16c67a5]
Modifying the Installation Configuration File
You can modify the installation configuration file by editing the variables and
values described in Table 2-2.
Table 2-2 Installation Configuration File Variables
Variable Name Valid values (if
applicable)
Content Comments
defaultInstallDirectory Default installation
directory path
Value not actively used by
installation program.
currentInstallDirectory Selected installation
directory path
Installing in Silent Mode (Non-Interactive)
50 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
SELECTED_COMPONEN
TS
List of product
components
selected for
installation
Pound (#') character is used as
list delimiter.
USE_BUNDLED_JDK TRUE
FALSE
Whether to install
J2SE bundled with
the product
JDK_LOCATION J2SE path Preinstalled J2SE path if
USE_BUNDLED_J2SE is set to
false; otherwise installation
location for bundled J2SE.
JDK_INSTALLTYPE PREINSTALLED
CANNOTUPGRADE
UPGRADABLE
CLEANINSTALL
How to handle
existing J2SE
installation
Only PREINSTALLED and
CLEANINSTALL are valid
values for silent installation
configuration file.
AS_INSTALL_DEFAULT_
CONFIG_DIR
Default
configuration files
directory path
Value not actively used by
installation program.
AS_INSTALL_CONFIG_DI
R
Selected
configuration file
directory path
AS_INSTALL_DEFAULT_
VAR_DIR
Default domains
configuration files
directory path
Value not actively used by
installation program.
AS_INSTALL_VAR_DIR Selected domains
configuration file
directory path
DOMAINS_DIR Selected domains
configuration file
directory path, plus
domains
subdirectory
AS_INSTALL_VAR_DIR and
DOMAINS_DIR are generally
redundant. However, both
entries are needed by legacy
installation program code.
WEBSERVER_INSTALL_D
EFAULT_DIR
Default web server
instance directory
path
Value not actively used by
installation program.
WEBSERVER_INSTALL_D
IR
Selected web server
instance directory
path
Table 2-2 Installation Configuration File Variables (Continued)
Variable Name Valid values (if
applicable)
Content Comments
Installing in Silent Mode (Non-Interactive)
Chapter 2 Installing Enterprise Edition Software 51
Installing in Silent Mode
To install the Sun ONE Application Server software in non-interactive silent mode,
perform these steps:
1. With a text editor, examine the current installation configuration file and verify
that it contains what you want to use for your silent installation.
2. Save your config_file with any name. For example:
cp statefile my_silent_config
3. Copy your installation configuration file to each machine where you plan to
install the Sun ONE Application Server Version 7, Enterprise Edition software.
4. Copy the Sun ONE Application Server installation files to each machine where
you plan to install the Application Server software.
INST_ASADMIN_USERN
AME
Administrator
username for initial
domain
INST_ASADMIN_PASSW
ORD
Administrator
password for initial
domain
INST_ASADMIN_PORT 0 - 65535 Administration
server port number
for initial domain
INST_ASWEB_PORT 0 - 65535 Server port number
for initial server
instance
INSTALL_STATUS SUCCESS
FAILURE
Installation
outcome
Mandated by installer
implementation. Value not
actively used by installation
program.
NOTE For silent mode, you can do a partial initial installation, but any
incremental (subsequent) installations must be done using an
interactive method.
Table 2-2 Installation Configuration File Variables (Continued)
Variable Name Valid values (if
applicable)
Content Comments
Installing in Silent Mode (Non-Interactive)
52 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
5. If you are not in the directory already, navigate to the directory where you
copied the installation files and your installation configuration file.
6. As superuser, start silent installation at the command line using the following
command format:
./setup -silent config_file
The installation program reads the specified config_file, checks for adequate disk
space, then installs the product based on the data in config_file.
When the prompt is returned, the silent installation is complete and the
installation components are now installed on your systems.
7. You can start the Application Server software by using the instructions on
“Starting and Stopping the Server” on page 81.
When the Admin Console has been started, the initial page of the Application
Server graphical interface is displayed.
You are now ready to configure your system for high availability. Proceed to
“Preparing for HADB Setup” on page 53 to begin this process.
53
Chapter 3
Preparing for HADB Setup
After the high-availability components have been installed on the servers that will
be part of an cluster, perform the tasks in this chapter to prepare for setting up high
availability. Refer to “Installation Roadmap” on page 16 to see the full sequence of
events for implementing the Sun ONE Application Server 7, Enterprise Edition
product.
The following topics are addressed here:
• Configuring Shared Memory and Semaphores
• Setting Up Host Communication
• Setting Up the User Environment
• Setting Up Administration for Non-Root
• Using the clsetup Command
After you have done the tasks here, proceed to the Sun ONE Application Server
Administrator’s Guide for comprehensive instructions on configuring and
managing the cluster, the load balancer plug-in, and the high-availability database
(HADB).
Information on high-availability topologies is available in the Sun ONE Application
Server System Deployment Guide.
Configuring Shared Memory and Semaphores
You will need to configure shared memory for the HADB host machines before
beginning to work with the HADB.
1. Log in as root.
Configuring Shared Memory and Semaphores
54 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
2. Add lines similar to the following to the /etc/system file if they do not
already exist:
For shared memory:
set shmsys:shminfo_shmmax=0x80000000
set shmsys:shminfo_shmseg=20
This example sets maximum shared memory shmmax to 2GB (hexadecimal
0x80000000) which is sufficient for most configurations.
The shmsys:shminfo_shmmax setting is calculated as 10,000,0000 per 256 MB
and should set to be identical to the memory size for the host. To determine
your host’s memory, run this command:
prtconf | grep Memory
Then plug the value into the following formula:
((<host> MB / 256 MB) * 10,000,000)
For semaphores:
Your /etc/system file may already contain semmni, semmns, and semmnu
entries. For example:
set semsys:seminfo_semmni=10
set semsys:seminfo_semmns=60
set semsys:seminfo_semmnu=30
NOTE If necessary, make sure permissions are set correctly to
administer the HADB as non-root user. See “Setting up RSH for
HADB Administration” on page 56, Step 5.
Setting Up Host Communication
Chapter 3 Preparing for HADB Setup 55
If the entries are present, increment the values by adding 16, 128, and 1000
respectively, as follows:
set semsys:seminfo_semmni=26
set semsys:seminfo_semmns=188
set semsys:seminfo_semmnu=1030
If your /etc/system file does not contain the above mentioned entries, add the
following entries at the end of the file:
set semsys:seminfo_semmni=16
set semsys:seminfo_semmns=128
set semsys:seminfo_semmnu=1000
This is sufficient to run up to 16 HADB nodes on the computer.
3. Reboot the machine for changes to take effect.
For an explanation of HADB nodes, see Configuring the High Availability
Database in the Sun ONE Application Server Administrator’s Guide.
Setting Up Host Communication
To implement remote access for HADB administration, all machines that will be
used for running HADB servers and the HADB management client must be
configured for Remote Shell (RSH) or Secured Shell (OpenSSH/SSH).
RSH is a simple remote shell command and does not have any security features.
The SSH communication channel provides a level of security by encrypting the
data that passes between the HADB nodes.
NOTE Your original /etc/system file may or may not contain all of these
entries.
Setting Up Host Communication
56 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
This section contains instructions for the following tasks:
• Setting up RSH for HADB Administration
• Setting Up SSH for HADB Administration
Setting up RSH for HADB Administration
If you want to use RSH instead of SSH, you must explicitly specify RSH using the
set managementProtocol option. Refer to Table 3-3 on page 72 for guidelines on
setting this parameter in the clresource.conf file.
To implement RSH, perform these steps:
1. Log in as root.
2. Edit the /etc/hosts file to contain entries for all the selected HADB hosts,
including the host name of the local host. Use localhost format. For example:
computer1.xbay.company.com
computer99.zmtn.company.com
3. Append this file to the /etc/hosts file of all selected installation hosts.
NOTE For Solaris 9, it is recommended that you use the default installation
of SSH. However, you can use RSH if preferred by following the
instructions in “Setting up RSH for HADB Administration” on
page 56 and then editing the clresource.conf file to specific RSH as
described in “Running the clsetup Command” on page 77.
On Solaris 8, by default SSH is not installed. Follow the instructions
in “Installing SSH for Solaris 8” on page 59 if SSH is not on your
Solaris 8 system.
If you want to use SSH, but it is not configured or not available, you
will not be able to use the hadbm command. Refer to “SSH
Requirements and Limitations” on page 58 to verify that SSH is
recognized.
NOTE SSH is the strongly recommended default for the hadbm create
command because SSH is more secure than RSH.
Setting Up Host Communication
Chapter 3 Preparing for HADB Setup 57
4. Create a .rhosts file in the $HOME directory of the HADB user, if one does
not already exist.
vi .rhosts
5. Verify that permissions are set to Read Only for group and other. For example:
rw-r--r--
6. Add the host name of each HADB host, including the name of your local host,
followed by the name of your database user. For example, if the database user
is Jon:
computer1.xbay.company.com Jon
computer99.zmtn.company.com Jon
mine456.red.mycompany.com Jon
7. Append this file to the .rhosts file of each HADB host.
8. Check host communication for each host. For example:
rsh computer99.zmtn.company.com uname -a
If all is well, the identity will be returned from the other host.
Setting Up SSH for HADB Administration
SSH is strongly recommended for using the hadbm create command because SSH
is more secure than RSH.
This section contains the following sections:
• SSH Requirements and Limitations
• Installing SSH for Solaris 8
• Configuring SSH
NOTE From a security perspective, the DSA-based version 2 protocol is
recommended instead of the RSA-based version 1 protocol. The
version you select depends on the SSH client software in use at your
site.
Setting Up Host Communication
58 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
SSH Requirements and Limitations
You may need to take action on any or all of the following requirements during
your SSH setup:
• Location of the SSH binaries—The high-availability management client expects
to find the ssh and scp binaries in the following location on each HADB host:
/usr/bin
? If the binaries are on your system but this location is not correct, you will
need to make a symbolic link from /usr/bin to the correct location.
? If you are on a Solaris 8 system, the SSH binaries are not installed by
default and so may not be present. If this is the case, follow the instructions
in “Installing SSH for Solaris 8” on page 59.
• Support—The only tested support is for SunSSH and OpenSSH. If you are
using another version of SSH, it is best to refer to the setup instructions in that
product’s documentation to ensure that your SSH communications work
correctly.
• OpenSSH clients and daemons—If you are running in an environment with
OpenSSH clients and daemons, you should name the key file as follows:
~/.ssh/authorized_keys2 or ~/.ssh/authorized_keys.
• Running as root—If you are running the HADB admin clients as root, make
sure that the sshd configuration (/etc/ssh/sshd_config) on all machines has
the PermitRootLogin parameter set to yes.
NOTE Although SSH is installed by default on Solaris 9 systems, on Solaris
8, by default SSH is not installed. Instructions for installing SSH for
Solaris 8 are contained in “Installing SSH for Solaris 8” on page 59.
NOTE By default, Sun SSH does not permit root login; it is set to no. If the
sshd configuration is changed, sshd must be restarted. Type the
following to restart the service:
/etc/init.d/sshd stop/start
Setting Up Host Communication
Chapter 3 Preparing for HADB Setup 59
• No SSH protocol version 2 support—If your SSH clients and daemons do not
support SSH protocol version 2, you will need to run ssh-keygen without
options. The key file will then be named identity.pub instead of id_dsa.pub.
This file must be appended to ~/.ssh/authorized_keys.
• Mixed SSH environment—If you are operating in a mixed SSH environment,
you will need to create both files ~/.ssh/authorized_keys2 and
~/.ssh/authorized_keys; the latter may contain both version 1 and version 2
keys.
• Co-location—If the Sun ONE Application Server and the HADB are co-located
on the same machine, you will need to create a known_hosts file under the
.ssh directory by running one of the following commands:
ssh localhost
or
ssh hostname
Installing SSH for Solaris 8
The ssh and scp binaries are not installed by default on Solaris 8 systems. If the
binaries are not on your Solaris 8 system, perform these steps:
1. Go to the following site:
http://www.sunfreeware.com/openssh8.html
On this site, you may receive a message similar to the following:
===PLEASE NOTE!!!............ make a note of some of the mirror
sites so that if the servers are down, you can still download
from a mirror site.
If you receive such a message, try one of the many mirror sites listed in the
FTP/Mirror Sites link. For example:
http://sunfreeware.secsup.org/
2. On this site, follow the instructions in the Installation Steps to download and
install all the necessary OpenSSH packages and patches.
3. After you have installed OpenSSH, proceed to the next section on Configuring
SSH.
Configuring SSH
To set up SSH on a system where the ssh and scp binaries are already installed,
perform the steps in one of the following sections:
Setting Up Host Communication
60 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
• SSH for Non-Mounted Home Directories
• SSH for Mounted Home Directories
SSH for Non-Mounted Home Directories
To implement SSH in systems with home directories that are not mounted,
perform these steps:
1. Verify that SSH requirements have been understood and met as specified in
“SSH Requirements and Limitations” on page 58.
2. Log in to the host as the HADB user.
3. Generate your keys by running the following:
ssh-keygen -t dsa
For SSH1 and OpenSSH/1, you normally do not need to give any parameters
to the ssh-keygen command.
4. For the next three prompts, accept the default options by pressing Enter.
5. Repeat steps 1, 2, and 3 for all machines in your cluster.
A file called identity.pub or id_dsa.pub (depends on whether you are using
SSH version 1 or version 2) located in your ~/.ssh directory holds the public key.
To connect to a machine without being asked for a password, the content of this file
must be appended to a file called authorized_keys on all the machines.
6. To set up login identity, go to your user directory:
~/.ssh.
For SSH1, OpenSSH/1:
a. Copy the identity.pub file and name it authorized_keys.
b. For each of the other machines in the cluster, copy the content of the
identity.pub file and append it to the local authorized_keys file.
OpenSSH/2:
a. Copy the id_dsa.pub file and name it authorized_keys2.
b. For each of the other machines in the cluster, copy the content of the
id_dsa.pub file and append it to the local authorized_keys2 file.
7. Copy the authorized_keys file to the ~/.ssh directory on all the HADB
machines.
Setting Up Host Communication
Chapter 3 Preparing for HADB Setup 61
8. Verify that the .ssh directory, HADB user’s home directory, and the
.ssh/authorized_keys file do not have write permissions for group and
other.
If needed, disable these group/other write permissions as follows:
chmod og-w ~/.ssh
chmod og-w ~/.ssh/authorized_keys
chmod og-w $HOME
Replace $HOME with the home directory of the HADB user. For example:
chmod og-w ~/johnsmith
9. To enable login without any user input, at initial SSH usage (after the SSH
environment is set up) you need to add the node machine name to the
known_hosts file under the /.ssh directory as follows:
a. Type the following:
ssh machine_name
You will be prompted with a Yes/No question whether to add
machine_name to the known_hosts file.
b. Answer Yes.
You will now be able to log in without any input.
10. To verify that SSH is set up correctly, SSH to each host in the cluster before
trying to run the management tool for HADB.
You are automatically logged in without a password requirement.
SSH for Mounted Home Directories
To implement SSH in systems with mounted home directories, perform these
steps:
1. Verify that SSH requirements have been understood and met as specified in
“SSH Requirements and Limitations” on page 58
NOTE If the files under the ~/.ssh directory have even read permission
given to group/other, you cannot set up an automatic SSH login
identity. In this case, if you try ssh machine_name, the system
complains about the incorrect permissions and asks for a password.
In other words, it is best not to give any permissions at all for
group/other if you want to enable automatic login.
Setting Up Host Communication
62 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
2. Log in to host as the HADB user.
3. Generate your keys by running the following:
ssh-keygen -t dsa
For SSH1 and OpenSSH/1, you normally do not need to give any parameters
to the ssh-keygen command.
4. For the next three prompts, accept the default options by pressing Enter.
A file called identity.pub or id_dsa.pub (depends on whether you are using
SSH version 1 or version 2) located in your ~/.ssh directory holds the public
key. To connect to a machine without being asked for a password, the content
of this file must be appended to a file called authorized_keys2 on all the
machines. This can be done as follows:
5. To set up login identity, go to your user directory:
~/.ssh.
For SSH1, OpenSSH/1—Copy the identity.pub file and name it
authorized_keys.
For OpenSSH/2—Copy the id_dsa.pub file and name it authorized_keys.
6. Verify that the .ssh directory and the .ssh/authorized_keys file do not have
write permissions for group and other.
If necessary, disable these group/other write permissions as follows:
chmod og-w ~/.ssh
chmod og-w ~/.ssh/authorized_keys
chmod og-w /$HOME
Replace HOME with the home directory of the HADB user. For example:
chmod og-w ~/johnsmith.
NOTE If the files under the ~/.ssh directory have even read permission
given to group/other, you cannot set up an automatic SSH login
identity. In this case, if you try to run ssh machine_name, the system
complains about =incorrect permissions and asks for a password. In
other words, it is best not to give any permissions for group/other if
you want to enable automatic login.
Setting Up the User Environment
Chapter 3 Preparing for HADB Setup 63
7. To enable login without any user input, at initial SSH usage (after the SSH
environment is set up) you need to add the node machine name to the
known_hosts file under the /.ssh directory
a. Type the following:
ssh machine_name
You will be queried about whether or not to add machine_name to the
known_hosts file.
b. Answer Yes.
You will now be able to log in without any input.
8. To verify that SSH is set up correctly, SSH to each host in the cluster before
trying to run the management tool for HADB.
You are automatically logged in without a password requirement.
Setting Up the User Environment
After you have set up host communication, you can run the hadbm command from
the install_dir/SUNWhadb/4/bin directory location as follows:
./hadbm
However, it is much more convenient to set up your local environment to use the
high-availability management client commands from anywhere. To set this up,
perform the following steps.
1. Set the PATH variable as follows.
setenv PATH ${PATH}:install_dir/bin:install_dir/SUNWhadb/4/bin
2. Verify that the PATH settings are correct by running the following commands:
which asadmin
which hadbm
NOTE The examples in this section apply to using csh. If you are using
another shell, refer to the man page for your shell for instructions on
setting variables.
Setting Up Administration for Non-Root
64 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
3. If multiple Java versions are installed on your system, you must ensure that the
JAVA_HOME environment variable points to the correct Java version (1.4.1_03
for Enterprise Edition).
setenv JAVA_HOME java_install_dir
setenv PATH ${PATH}:${JAVA_HOME}/bin
Setting Up Administration for Non-Root
By default, during the initial installation or setup of the Sun ONE Application
Server, write permissions of the files and paths created for Sun ONE Application
Server are given to root only. For a user other than root to create or manage the Sun
ONE Application Server, write permissions on the associated files must be given to
that specific user, or to a group to which the user belongs. The files that are affected
are the following (with their default locations):
• Sun ONE Application Server configuration files—install_config_dir/cl*.conf
• Sun ONE Application Servers setup and administration scripts—
install_dir/bin/cl*
• HADB binaries—install_dir/SUNWhadb
• HADB configuration—/etc/opt/SUNWhadb
You can create a user group for managing the Sun ONE Application Server as
described in the following procedure. (An alternate approach is to set permissions
and ownership for the specific user.)
To create a Sun ONE Application Server user group and set permissions on the
installation root directory, repeat the following process for each affected file:
1. Log in as root.
2. From the command prompt, create the Sun ONE Application Server user
group. For example:
# groupadd s1asuser
You can type groupadd at the command line to see appropriate usage.
3. Change the group ownership for each affected file to the newly-created group.
For example:
chgrp -R s1asuser install_config_dir/cl*.conf
Using the clsetup Command
Chapter 3 Preparing for HADB Setup 65
4. Set the write permission for the newly-created group:
chmod -R g+rw install_config_dir/cl*.conf
5. Repeat steps 3 and 4 for each affected file.
6. Make the clsetup and cladmin commands executable by the newly-created
group. For example:
chmod -R g+x install_dir/bin/cl*
7. Delete and recreate the default domain, domain1, using the --sysuser option.
The sysuser must also belong to the newly-created group. For example:
asadmin delete-domain domain1
asadmin create-domain --sysuser bleonard --adminport 4848
--adminuser admin --adminpassword password domain1
Using the clsetup Command
The purpose of the clsetup command is to automate the process of setting up a
basic cluster in a typical configuration. The clsetup command is located in
install_dir/bin, where install_dir is the directory where the Sun ONE Application
Server software is installed.
The clsetup command is bundled with the Sun ONE Application Server software
along with the cladmin command.
The following topics are addressed in this section:
• How the clsetup Command Works
• clsetup Requirements and Limitations
• Editing the clsetup Input Files
NOTE The cladmin command is used to streamline the process of
configuring and administering the cluster after all installation and
configuration tasks are complete, and is not documented here.
When you have completed the tasks in this Installation Guide, refer
to the Sun ONE Application Server Administrator’s Guide for
instructions on creating the HADB and on using on the cladmin
command.
Using the clsetup Command
66 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
• Running the clsetup Command
• Cleanup Procedures for the clsetup Command
How the clsetup Command Works
The clsetup command is a set of Sun ONE Application Server commands that are
gathered together in a script that allows a cluster to be configured automatically,
based on prepopulated input files. As part of cluster setup, an HADB is created,
but you will still need to set up your working cluster using the hadbm commands
as described in the Sun ONE Application Server Administrator’s Guide.
The following topics are addressed in this section:
• How the Input Files Work
• What the clsetup Command Accomplishes
• Commands Used by the clsetup Command
How the Input Files Work
Three input files are used by the clsetup command to configure the cluster:
• clinstance.conf—This file is pre-populated with information about
application server instances server1 and server2. Refer to “The clinstance.conf
File” on page 70 for information on the contents of this file.
• clpassword.conf—This file is pre-populated with the Admin Server
password for domain1, which you provided when you installed the Sun ONE
Application Server 7, Enterprise Edition software. Refer to “The
clpassword.conf File” on page 71 for information on the contents of this file.
• clresource.conf—This file is pre-populated with information about the
cluster resources: HADB, JDBC connection pool, JDBC resource, and session
store and persistence. Refer to “The clresource.conf File” on page 72 for
information on the contents of this file.
NOTE The clsetup command interface is unstable. An unstable interface
may be experimental or transitional, and may therefore change
incompatibly, be removed, or be replaced by a more stable interface
in the next release.
Using the clsetup Command
Chapter 3 Preparing for HADB Setup 67
You can use the clsetup configuration parameters as they are preconfigured to set
up a typical cluster configuration. To support a different configuration, you can
make edits to any or all of the configuration files.
What the clsetup Command Accomplishes
Using the pre-populated values in the clsetup input files, the clsetup command
accomplishes the following:
• Creates a new server instance named server2 in the default domain named
domain1. The HTTP port number for server2 is the next sequential number
after the HTTP port number specified for server1 during installation (for
example, if port number 80 is provided for server1 during installation, the port
number for server2 is 81).
• Creates the HADB named hadb with two nodes on the local machine. The port
base is 15200, and the database password is password.
• Creates the HADB tables required to store session information in the HADB.
• Creates a connection pool named appservCPL in all the instances listed in the
clinstance.conf file (server1, server2).
• Creates a JDBC resource named jdbc/hastore in all the instances listed in the
clinstance.conf file (server1, server2).
• Configures the session persistence information in all the instances listed in the
clinstance.conf file (server1, server2).
• Enables high availability in all the instances listed in the clinstance.conf file
(server1, server2).
NOTE The configuration parameters required to set up the cluster are
always read from the input files, and cannot be supplied through
the command line.
NOTE Because the clresource.conf and clpassword.conf input files
store passwords, they are access-protected with 0600 permissions.
Using the clsetup Command
68 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Commands Used by the clsetup Command
The clsetup command uses a number of hadbm and asadmin commands to
perform the steps for setting up the cluster. In Table 3-1, the clsetup task is
described in the left column and the command used to accomplish the task is listed
in the right column.
clsetup Requirements and Limitations
The following requirements and limitations apply to the clsetup command:
• The install paths, device paths, configuration paths, and so on must be the
same on all machines that are of the cluster.
• Before you can use the clsetup command, the asadmin and hadbm commands
must be available on the local machine. Therefore, this command can only be
run on a machine where the following are installed:
? The Sun ONE Application Server component or the Sun ONE Application
Server Administration Client component
? The HADB component or the HADB Management Client component
• Before you can use the clsetup command, you must have configured shared
memory as described in “Configuring Shared Memory and Semaphores” on
page 53. The clsetup command does not set any shared memory values.
Table 3-1 hadbm and asadmin Commands Used by the clsetup Command
Task Performed by clsetup Command
Checks to see if database exists. hadbm status
Creates and starts the HADB. hadbm create
Gets the JDBC URL. hadbm get jdbcURL
Creates the session store. asadmin create-session-store
Checks the instance status. asadmin show-instance-status
Creates the instance. asadmin create-instance
Creates the JDBC connection pool. asadmin create-jdbc-connection-pool
Registers the data source. asadmin create-jdbc-resource
Configures the persistence type asadmin configure-session-persistence
Reconfigures the instance. asadmin reconfig -u admin
Using the clsetup Command
Chapter 3 Preparing for HADB Setup 69
• Before you can use the clsetup command, you must have set up the HADB
cluster host communication for SSH or RSH as described in “Setting Up Host
Communication” on page 55.
• If you are using RSH (which is not the default), you will need to uncomment
the following line in the clresource.conf file (remove the # sign):
#set managementProtocol
• If you are co-locating the Application Server and the HADB on the same
machine using SSH, a known_hosts file must exist under the .ssh directory. If
it does not, run either the ssh localhostor the ssh hostname command before using
the clsetup command.
• Before running the clsetup command, you must start the Admin Servers of all
the Sun ONE Application Server instances that are part of the cluster.
• The administrator password must be the same for all domains that are part of
the cluster.
• If the entities to be handled (HADB nodes and Application Server instances)
already exist, the clsetup command does not delete or reconfigure them, and
the respective configuration steps are skipped.
• The values specified in the input files will be the same for all the instances in a
cluster. The clsetup command is not designed to set up instances with
different values. For example, this command cannot create a JDBC connection
pool with different settings for each instance.
• The clsetup command does not perform any inetd configuration; the HADB
is created with no inetd settings. Instructions for performing inetd
configuration are contained in the Sun ONE Application Server Administrator’s
Guide.
• Host names in the shell initialization files—If prompts are included with host
names in your .cshrc or .login files, the clsetup command may appear to
hang. You will need to remove any prompts and excess output in any remote
command invocations. For example, running the hostname command on hostB
should print hostB without a prompt.
• To run the clsetup command as a user other than root, you'll need to make the
changes as described in “Setting Up Administration for Non-Root” on page 64.
Using the clsetup Command
70 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Editing the clsetup Input Files
The input files that are needed for the clsetup command are installed under the
configuration installation directory, default /etc/opt/SUNWappserver7, as part of
the installation procedure. The installation program pre-populates these files with
the values to set up a typical configuration, but you can edit any or all of them as
needed using a text editor.
This section addresses the following topics:
• The clinstance.conf File
• The clpassword.conf File
• The clresource.conf File
The clinstance.conf File
For the clsetup command to work properly, all application server instances that
are part of a cluster must be defined in the clinstance.conf file. During
installation, the installation program creates a clinstance.conf file with entries
for two instances. If you add more instances to the cluster, you must add
information about these additional instances.
The format of the clinstance.conf file is as follows:
# Comment
instancename instance_name
user user_name
host localhost
port admin_port_number
domain domain_n
instanceport instance_port_number
One set of entries is required for each instance that is part of the cluster. Any line
that starts with a hash mark (#) is treated as a comment.
NOTE The order in which these entries appear in the clinstance.conf file
is important and must not be changed from the order specified here.
If you add information about more application server instances,
entries for these instances must appear in this order.
Comments can be added anywhere in the file.
Using the clsetup Command
Chapter 3 Preparing for HADB Setup 71
Table 3-2 provides information about the entries in the clinstance.conf file. The
left column contains the parameter name, the middle column defines the
parameter, and the right column contains the default value specified by the
installation program.
Example clinstance.conf File
This clinstance.conf file contains information about two instances.
#Instance 1
instancename server1
user admin
host localhost
port 4848
domain domain1
instanceport 80
#Instance 2
instancename server2
user admin
host localhost
port 4848
domain domain1
instanceport 81
The clpassword.conf File
When the clsetup command is run, the asadmin command needs the Admin
Server password, which is specified in the clpassword.conf file during
installation.
The format of the clpassword.conf file is as follows:
Table 3-2 Entries in the clinstance.conf File
Parameter Definition Default Value
instancename Application Server instance name server1, server2
user Admin Server user name admin
host Host name localhost
port Admin Server port number 4848
domain Administrative domain name domain1
instanceport Application Server instance port 80, 81
Using the clsetup Command
72 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
AS_ADMIN_PASSWORD= password
where password is the Admin Server password.
Permissions 0600 are preset on the clpassword.conf file, which can only be
accessed by the root user.
The clresource.conf File
During installation, the installation program creates the clresource.conf file to
set up a typical configuration. The clresource.conf file contains information
about the following resources that are part of the cluster:
• HADB information
• Session store information
• JDBC connection pool information
• JDBC resource information
• Session persistence information
Permissions 0600 are preset on the clresource.conf file, which can only be
accessed by the root user.
The parameters of the clresource.conf file are described in the following tables.
The left column contains the parameter name, the middle column defines the
parameter, and the right column contains the default value specified by the
installation program.
Table 3-3 describes the HADB parameters in the clresource.conf file.
NOTE Before running the clsetup command, the values specified in the
clresource.conf file can be modified for optimization, or for
setting up a different configuration. If you edit the values, make sure
that the order and format of the file is not changed.
Any line that begins with a hash mark (#) is treated as a comment.
Table 3-3 HADB Parameters in the clresource.conf File
Parameter Definition Default Value
historypath Path for the history files. /var/tmp
devicepath Path for the data and log devices. /opt/SUNWappserver7/SUNWhadb/4
Using the clsetup Command
Chapter 3 Preparing for HADB Setup 73
Table 3-4 describes the session store parameters in the clresource.conf file.
datadevices Number of data devices on each node. 1
portbase Port base number used for node 0.
Other nodes are then assigned port
number bases in increments of 20 from
the number specified here (a random
number in the range 10000 - 63000).
15200
spares Number of spare nodes. 0
set Comma-separated list of database
configuration attributes.
For explanations of valid database
configuration attributes, see Sun ONE
Application Server Administrator’s Guide.
For example, to specify the use of RSH
instead of SSH (the default), uncomment
the following line:
#set managementProtocol=rsh
inetd Indicates if HADB runs with the inet
daemon.
false
inetdsetupdir Directory where theinet daemon
setup files will be put.
/tmp
devicesize Size of device in MB. This size is
applicable to all devices.
512
dbpassword Password for the HADB user. password
hosts All hosts used for all data nodes. Values are populated automatically
based on the hosts specified during
installation.
NOTE The database name is specified at the end of the [HADBINFO] section in the
clresource.conf file.
Table 3-3 HADB Parameters in the clresource.conf File (Continued)
Parameter Definition Default Value
Using the clsetup Command
74 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Table 3-5 describes the JDBC connection pool parameters in the clresource.conf
file.
Table 3-4 Session Store Parameters in the clresource.conf File
Parameter Definition Default Value
storeurl URL of the HADB store REPLACEURL
NOTE: Value is replaced by actual URL at
runtime.
storeuser User who has access to the
session store
appservusr
NOTE: Must match the username property in
Table 3-5.
storepassword Password for the storeuser password
NOTE: Must match the password property in
Table 3-5.
dbsystempassword Password for the HADB system
user
password
Table 3-5 JDBC Connection Pool Parameters in the clresource.conf File
Parameter Definition Default Value
steadypoolsize Minimum and initial number of
connections maintained in the pool.
8
maxpoolsize Maximum number of connections that
can be created.
32
datasourceclass
name
Name of the vendor-supplied JDBC
datasource.
Name of the vendor-supplied JDBC
datasources capable datasource class
will implement
javax.sql.XADatasource
interface.
Non-XA or Local transactions only
datasources will implement
javax.sql.Datasource interface.
com.sun.hadb.jdbc.ds.HadbDataS
ource
isolationlevel Specifies the transaction isolation level
on the pooled database connections.
repeatable-read
Using the clsetup Command
Chapter 3 Preparing for HADB Setup 75
Table 3-6 describes the JDBC resource parameters in the clresource.conf file.
Table 3-7 describes the session persistence parameters in the clresource.conf file.
validationmetho
d
Specifies the type of validation method. meta-data
property Property used to specify username,
password, and resource configuration.
username=appservusr:password=p
assword:cacheDataBaseMetaData=
false:eliminateRedundantEndTra
nsaction=true:serverList=REPLA
CEURL
NOTE: Make sure that the username and
password properties use the same values
as shown in the Session Store Parameters
table. REPLACEURL is replaced by the
actual URL at runtime.)
NOTE The connection pool name is specified at the end of the
[JDBC_CONNECTION_POOL] section in the clresource.conf file.
Table 3-6 JDBC Resource Parameters in the clresource.conf File
Parameter Definition Default Value
connectionpoolid Name of the connection pool appservCPL
NOTE: Connection pool name is specified in
Table 3-5.
NOTE The JDBC resource name is defined at the end of the [JDBC_RESOURCE] section
in the clresource.conf file.
Table 3-5 JDBC Connection Pool Parameters in the clresource.conf File (Continued)
Parameter Definition Default Value
Using the clsetup Command
76 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Example clresource.conf File
[HADBINFO]
historypath /var/tmp
devicepath /opt/SUNWappserver7/SUNWhadb/4
datadevices 1
portbase 15200
spares 0
#set managementProtocol=rsh
inetd false
inetdsetupdir /tmp
devicesize 512
dbpassword password
hosts machine1,machine1
hadb
[SESSION_STORE]
storeurl REPLACEURL
storeuser appservusr
storepassword password
dbsystempassword password
[JDBC_CONNECTION_POOL]
steadypoolsize 8
maxpoolsize 32
datasourceclassname com.sun.hadb.jdbc.ds.HadbDataSource
isolationlevel repeatable-read
validationmethod meta-data
property
username=appservusr:password=password:cacheDataBaseMetaData=false:e
liminateRedundantEndTransaction=true:serverList=REPLACEURL
appservCPL
Table 3-7 Session Persistence Parameters in the clresource.conf File
Parameter Definition Default Value
type Session persistence type ha
frequency Session frequency web-method
scope Session scope session
store Session store jdbc/hastore
NOTE: Store name is defined at end of the
[JDBC_RESOURCE] section.
Using the clsetup Command
Chapter 3 Preparing for HADB Setup 77
[JDBC_RESOURCE]
connectionpoolid appservCPL
jdbc/hastore
[SESSION_PERSISTENCE]
type ha
frequency web-method
scope session
store jdbc/hastore
Running the clsetup Command
The syntax for running the clsetup command is as follows:
clsetup [--help] [--instancefile instance_file_location] [--resourcefile
resource_file_location] [--passwordfile password_file_location]
If no arguments are specified, the clsetup command assumes the following
defaults:
--instancefile is install_config_dir/clinstance.conf
--resourcefile is install_config_dir/clresource.conf
--passwordfile is install_config_dir/clpassword.conf
You can override these arguments by providing custom input file locations. For
example:
./clsetup --resourcefile /tmp/myappservresource.conf
To run the clsetup command, perform the following steps:
1. Verify that the requirements have been met as described in “clsetup
Requirements and Limitations” on page 68.
NOTE When providing custom input files, follow the required format
found in the input files. For information on doing this, see “Editing
the clsetup Input Files” on page 70.
NOTE If you want to run the clsetup command as a user other than root,
follow the instructions in “Setting Up Administration for Non-Root”
on page 64 to set this up.
Using the clsetup Command
78 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
2. Verify that the input files have the information that is required to set up the
cluster. If necessary, edit the input files following the guidelines in “Editing the
clsetup Input Files” on page 70.
3. If you are using RSH, edit the clresource.conf file to uncomment the
following line (remove the # sign):
#set managementProtocol
4. Go to the Sun ONE Application Server installation /bin directory:
cd install_dir/bin
5. Invoke the clsetup command using the appropriate syntax. For example, to
run the command using the defaults:
./clsetup
The clsetup command displays the welcome message, the prerequisites for
configuring the cluster, and the following message:
Do you want to start configuring your cluster? [Yes/No]
6. To start configuring, type Yes and press Enter.
The clsetup command runs in verbose mode. The various commands are
displayed on the screen as they run, and the output is redirected to the log file,
/var/tmp/clsetup.log.
If a vital error occurs (for example, failure to create a non-existing HADB), the
configuration stops and the error is recorded in the log file. If the log file
already exists, the output is appended to the existing log file.
7. When the clsetup command completes the configuration, you are advised
about the location of the log file. It’s a good idea to scan the log file after each
run.
8. Upon completion, the clsetup command returns the exit codes as described in
Table 3-8:
NOTE If the entities to be handled (HADB nodes and Application
Server instances) already exist, the clsetup command does not
delete or reconfigure them, and the respective configuration
steps are skipped. This type of event is recorded in the log file.
Using the clsetup Command
Chapter 3 Preparing for HADB Setup 79
You can obtain a list of the exit codes by running the following command from the
command line immediately after running the clsetup command:
‘echo $?’
Cleanup Procedures for the clsetup Command
After running the clsetup command, errors that have occurred are logged in the
log file /var/tmp/clsetup.log. Examine the log file after every run of the
clsetup command and correct any significant errors that are reported (for
example, failure to create a non-existing instance).
You can undo all or part of the configuration as follows:
• To delete an Application Server instance, use the following command:
asadmin delete-instance instance_name
Table 3-8 Exit Codes for the clsetup Command
Exit Code Description
0 Successful exit
2 Usage error
3 Instance file not found
4 Instance file cannot be read
5 Resource file not found
6 Resource file cannot be read
7 Password file not found
8 Password file cannot be read
10 Script cannot find asadmin
11 Script cannot find hadbm
12 Cannot create temporary file
13 Session store configuration failed
14 Create HADB failed
15 HADB get jdbcURL failed
16 User exits in welcome message
Using the clsetup Command
80 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
For example:
asadmin delete-instance server1
• To delete the HADB, use the following commands:
a. hadbm stop database_name
For example:
hadbm stop hadb
b. hadbm delete database_name
For example:
hadbm delete hadb
• To clear the session store, use the following command:
cladmin clear-session-store --storeurl URL_information
--storeuser storeUsername --storepassword store_user_name
For example:
cladmin clear-session-store --storeurl
jdbc:sun:hadb:localhost:10005,localhost::10025 --storeuser
appservusr --storepassword password
• To delete the JDBC connection pool, use the following command:
asadmin delete-jdbc-connection-pool connectionpool_name
For example:
asadmin delete-jdbc-connection-pool appservCPL
• To delete the JDBC resource, use the following command:
cladmin delete-jdbc-resource JDBCresource_Name
For example:
cladmin delete-jdbc-resource jdbc/hastore
After you have completed the tasks in this chapter (and the post-installation tasks
in the following chapter, if needed), proceed to the Sun ONE Application Server
Administrator’s Guide for instructions on configuring the HADB and managing the
cluster, the load balancer plug-in, and the HADB.
81
Chapter 4
Post-installation Tasks
This chapter discusses some tasks you may need to perform during or after
installing the Sun ONE Application Server 7, Enterprise Edition software.
The following topics are addressed here:
• Starting and Stopping the Server
• Creating Domains and Instances
• Web Services Client Implementation
• Stopping and Starting the HADB
Starting and Stopping the Server
Because the Sun ONE Application Server is not automatically started during
installation, you will need to start the application server environment yourself
using either of the following methods:
• Using the Command-line Interface
• Using the Administration Interface
Using the Command-line Interface
You can use the asadmin command-line interface to start and stop:
• The entire application server
• A specific administrative domain
• An individual application server instance
Starting and Stopping the Server
82 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
The subcommands of asadmin listed in Table 4-1 are relevant to start and stop
operations.
Using start-domain and stop-domain
If the Application Server is running, use the following command to stop both the
Admin Server as well as the application server instance of the initially-configured
domain:
asadmin stop-domain --domain domain1 --local
where domain1 is the default name of the administrative domain defined during
installation of the Application Server.
As the command completes, you should observe the following results:
asadmin stop-domain --domain domain1 --local
Instance domain1:server1 stopped
Domain domain1 Stopped.
Likewise, you can start the initially-configured administrative domain by running
the following command:
asadmin start-domain --domain domain1
As the command completes, you should observe the following results:
Table 4-1 Start/Stop Subcommands of asadmin
Subcommand Description
start-appserv Starts the entire Application Server.
stop-appserv Stops the Application Server.
start-domain Starts the administrative server and application server
instances of the specified administrative domain
stop-domain Stops the administrative server and the application server
instances of the specified administrative domain.
start-instance Starts the specified application server instance. Can be run in
either a local or remote mode. In local mode, running this
subcommand does not require the administrative server to be
running.
stop-instance Stops the specified application server instance. Similar in
operation to start-instance.
Starting and Stopping the Server
Chapter 4 Post-installation Tasks 83
asadmin start-domain --domain domain1
Instance domain1:admin-server started
Instance domain1:server1 started
Domain domain1 Started.
Using start-instance and stop-instance
To stop a specific application server instance without relying on the presence of an
Admin Server, you can use the following command:
asadmin stop-instance --local server1
where server1 is the default name of the application server instance. If your
environment contains more than one administrative domain, then you need to
specify the administrative domain name when invoking the stop-instance
command. For example:
asadmin stop-instance --local --domain domain1 server1
To start a specific application server instance in local mode, you can use the
following command:
asadmin start-instance --local server1
If you want to start or stop an instance on a remote system, you can specify the
target Admin Server and administrative user name and password on the
start-instance and stop-instance commands.
Getting Helpful Information
If you run either of these subcommands without parameters, usage information is
displayed. For example:
asadmin start-instance
Invalid number of operands received
Command 'start-instance' not executed successfully
USAGE: start-instance [--user admin_user] [--password
admin_password] [--host localhost] [--port 4848] [--local=false]
[--domain domain_name] [--debug=false] [--secure | -s]
instancename
Alternatively, you can issue the subcommands followed by the --help option to
obtain complete usage information.
Creating Domains and Instances
84 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Using the Administration Interface
When the Admin Server is running, you can use the web-based Administration
interface to start and stop application server instances.
To start the Administration interface (also called the Admin Console or the
graphical interface):
1. Open a browser window and specify the location of your Admin Server’s
console application.
During installation, the default port number for the Admin Server is set to
4848. If this port was already in use, or you selected another port number,
specify that port number. For example:
http://localhost:4848
2. Sign into the Administration interface using the administrative user name and
password specified during installation.
After you've been successfully authenticated, the initial screen of the
Administration interface is displayed.
3. Select the server1 node to access the start and stop functions.
The application server instance is either in a Running or Not Running state.
4. Depending on the server instance state, click either Start or Stop to start or stop
the application server instance.
Creating Domains and Instances
The installation program creates an initial domain called domain1 with a single
instance called server1. Create any additional domains and server instances using
following commands:
To create a new domain:
asadmin create-domain --adminport port_number --adminuser admin
--adminpassword password domain_name [--path domain_path][--sysuser
sys_user] [--passwordfile file_name]
To create a new instance:
Web Services Client Implementation
Chapter 4 Post-installation Tasks 85
asadmin create-instance --instanceport instanceportinstance_name
[--user admin_user] [-password admin_password] [--host localhost]
[--port 4848] [--sysuser sys_user] [--domain domain_name]
[--local=false] [--passwordfile filename][--secure|-s]
Refer to the asadmin man pages for additional information on these commands.
Web Services Client Implementation
To install and configure the web services client, refer to the Sun ONE Application
Server Developer's Guide to Clients.
Stopping and Starting the HADB
This section addresses the following topics:
• Stopping the HADB
• Starting the HADB After Stopping
Stopping the HADB
If you are uninstalling, you will need to stop the running HADB on the node where
you are working. The hadbm stop command stops all HADM processes on each
node. It also captures the role of each node and saves this information locally to the
/etc/opt/SUNWhadb/dbdef/mydb/stopstate file. The hadbm start command
references this file so it knows what role to give the nodes when it starts the
database.
To stop a running HADB, perform these steps:
1. Log in as root on the system where the HADB is running.
2. Run the hadbm stop command using the following format:
hadbm stop hadb_name
This command stops the database.
3. Type yes or y to confirm, anything else to cancel. When the HADB is stopped,
the following is displayed:
Database successfully stopped
Stopping and Starting the HADB
86 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
4. Verify the HADB is stopped by running the following command:
hadbm status --nodes hadb_name
The state for all nodes should be Stopped.
Starting the HADB After Stopping
You must issue the hadbm start command from the host where you issued the
hadbm stop command because the stopstate file is on that host and the
stopstate file is needed for the hadbm start command.
To start all active nodes of an HADB after it has been stopped using the hadbm stop
command, perform these steps:
1. Log in as root on the system where the HADB resides.
2. Run the hadbm start command from the host where you issued the hadbm
stop command using the following format:
hadbm start hadb_name
After the HADB has started, the following is displayed:
Database successfully started
NOTE If the inetd process was still running, the clu_nsup_srv process
would be running and the state for the nodes (NodeState) would be
Starting.
87
Chapter 5
Uninstalling the Enterprise Edition
Software
This chapter contains instructions for uninstalling the Sun ONE Application Server
7, Enterprise Edition software from your system.
The following topics are addressed here:
• About Uninstalling
• Uninstalling the Application Server Software
• Uninstalling in Silent Mode (non-interactive)
About Uninstalling
The installation program enforces component dependencies as specified for each
component. Once component dependencies are satisfied, component life cycles are
independent. A particular component can be installed or uninstalled dynamically
through incremental installation and partial uninstallation mechanisms without
corrupting other components.
Uninstallation failure will result in a complete rollback of the installation, requiring
you to reinstall the product.
NOTE If an uninstallation fails, you may need to clean up some leftover
files or processes before attempting a new installation. In this case,
perform the tasks in “Uninstallation Failure Cleanup” on page 98.
Uninstalling the Application Server Software
88 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Components
The following components can be uninstalled separately or as a complete package:
• Sun ONE Application Server, including its graphical and command-line
administrative tools and Sun ONE Message Queue 3.0.1
• Java 2 Software Development Kit (J2SE), Standard Edition 1.4.1_03
• Sun ONE Application Server Administration Client (command-line tool only)
• Sample applications
• High-Availability Database (HADB)
• Load balancer plug-in for web servers
Installation files, configuration files, and all log files are removed from local and
remote hosts during installation.
Uninstallation Requirements
The following must be true for uninstallation to succeed:
• All databases are stopped and disabled prior to uninstalling.
For guidelines on stopping the HADB, refer to the “Stopping the HADB” on
page 85.
• All database hosts are reachable by SSH or RSH for the root user.
For instructions on setting this up HADB communications, refer to “Setting Up
Host Communication” on page 55.
• The uninstallation program is run from the original installation host.
Uninstalling the Application Server Software
The uninstallation program detects any running Sun ONE Application Server
processes and stops them before continuing to uninstall.
Uninstalling the Application Server Software
Chapter 5 Uninstalling the Enterprise Edition Software 89
To uninstall the Application Server software, perform the following steps:
1. Verify that you have met the requirements in “Uninstallation Requirements”
on page 88.
2. Log in as root on the machine where you want to uninstall the Sun ONE
Application Server 7, Enterprise Edition software.
3. Navigate to your machine’s Sun ONE Application Server 7 installation
directory.
4. Select your installation method.
? To run uninstallation using the graphical interface, type the following at
the command prompt (no options; this is the default method):
./uninstall
? To run uninstallation using the command-line interface, type:
./uninstall -console
The Welcome page of the uninstallation program is displayed.
5. Read the Welcome page and click Next (or press Enter at the command line) to
continue.
6. You will be queried about whether you want to do an incremental
uninstallation.
? If you answer No, the Ready to Install page is displayed as shown in
Step 7.
? If you answer Yes, the component selection page is displayed showing the
components that are installed on your system.
NOTE If your J2SE is installed in a directory other than /usr/j2se, you
must use the following command:
./uninstall -javahome valid_j2se_directory
where valid_j2se_directory is the path to your J2SE 1.4.1_03
installation.
Uninstalling in Silent Mode (non-interactive)
90 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
7. Select which components you want to uninstall and click Next (or press Enter
at the command line).
The Ready to Uninstall page is displayed showing a list of the Application
Server components you have selected to uninstall.
8. Click Uninstall Now (or press Enter on the command line) to start the
uninstallation process.
The Uninstallation progress indicator bar is displayed.
When uninstallation finishes, the Uninstall Summary page is displayed.
9. Review the details by clicking Details.
A details listing displays the top portion of the log file. Complete information
on the uninstallation can be found in the uninstallation log file specified at the
end of the details listing:
/var/sadm/install/logs/Sun_ONE_Application_Server_uninstall.log
10. Click Dismiss to close the Details page.
11. Click Close (or press Enter at the command line) to quit the uninstallation
program.
12. Verify that uninstallation succeeded by checking to see that the Application
Server components have been removed from the system.
Uninstalling in Silent Mode (non-interactive)
To uninstall the Sun ONE Application Server software in non-interactive silent
mode, perform these steps:
NOTE If uninstallation is interrupted, or if you have trouble installing the
Application Server software after removing a previous version or a
component, refer to “Uninstallation Failure Cleanup” on page 98.
NOTE The interactive methods allow you to select which components you
want to uninstall; silent mode does not. That is, incremental, or
partial, uninstallation is not available for silent mode.
Uninstalling in Silent Mode (non-interactive)
Chapter 5 Uninstalling the Enterprise Edition Software 91
1. Log in as root on the machine where you want to uninstall the Application
Server 7, Enterprise Edition software.
2. Start silent uninstallation at the command line as follows:
./uninstall -silent
When the prompt is returned, the silent uninstallation is completed.
3. Verify that uninstallation succeeded by checking to see that the Sun ONE
Application Server components have been removed from the system.
4. Repeat this process for each server where you want to uninstall.
Uninstalling in Silent Mode (non-interactive)
92 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
93
Chapter 6
Troubleshooting
This chapter describes how to solve common problems that might occur during
installation of the Sun ONE Application Server 7, Enterprise Edition software.
The following topics are addressed here:
• About Logs and Messages
• J2SE Installation/Upgrade Issues
• Forgotten User Name or Password
• Forgotten Admin Server Port Number
• Connection Refused for Administration Interface
• Server Won’t Start: CGI Error Occurs
• Uninstallation Failure Cleanup
About Logs and Messages
Both the installation and uninstallation programs create log files and log all
installation and uninstallation events to these files. The primary purpose of these
log files is to provide troubleshooting information.
In addition to installation program messages and log files, operating system
utilities such as pkginfo and showrev on Solaris can be used to gather system
information.
Log file entries include information about the attempted action, the outcome of the
action, and, if applicable, the cause of failure. The log files contain the following
types of message entries:
J2SE Installation/Upgrade Issues
94 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
• INFO—These messages mark normal completion of a particular installation
tasks.
• WARNING—These messages mark non-critical failures. Warning messages
generally contain information about the cause and the nature of the failure, and
also provide possible remedies.
• ERROR—These messages mark critical failures that cause installation or
uninstallation status to be reported as Failed. Error messages generally provide
detailed information about the nature and the cause of the problem that
occurred.
For a full listing of the Sun ONE Application Server error messages, refer to the
Enterprise Edition of the Sun ONE Application Server Error Messages Reference.
The following Application Server logs can be useful for troubleshooting:
• For problems you may have with the installation or uninstallation process:
/var/sadm/install/logs/Sun_ONE_Application_Server_install.log
/var/sadm/install/logs/Sun_ONE_Application_Server_uninstall.log
• In addition to these log files, low-level installation and uninstallation log files
are created at these locations:
/var/sadm/install/logs/Sun_ONE_Application_Server_install.<timestamp>
/var/sadm/install/logs/Sun_ONE_Application_Server_uninstall.<timestamp>
• For problems with the clsetup command:
/var/tmp/clsetup.log
• For problems with the cladmin command:
/var/tmp/cladmin.log
J2SE Installation/Upgrade Issues
The installation program can only upgrade your J2SE installation when the
following requirements are met:
1. The following Solaris J2SE packages reside on the machine where you are
performing installation:
? SUNWj3rt
? SUNWj3dev
J2SE Installation/Upgrade Issues
Chapter 6 Troubleshooting 95
? SUNWj3man
? SUNWj3dmo
Verify this by running the pkginfo -i -l command on these packages.
2. The version of the Solaris J2SE packages is greater than or equal to version 1.3
and less than version 1.4.1_03.
3. The /usr/j2se (default) directory is writable by the user performing the
installation.
The following types of errors may occur if you attempt to upgrade your J2SE
during installation:
• Incompatible J2SE version---cannot upgrade.
• Failure to install J2SE reported through install log file.
Incompatible J2SE version---cannot upgrade.
If you receive this type of error, the first or second requirements above have not
been met.
Solution
Resolve your J2SE package or version issues by either fixing the Solaris packages or
completely removing the Solaris packages (only if they are not used by any other
application programs) using the pkgrm command.
If you remove the packages, you can then install the J2SE component using the
installation program by selecting the Install Java 2 SDK (1.4.1_03) option in the Java
Configuration panel.
Failure to install J2SE reported through install
log file.
If you receive this type of error, the third requirement above has not been met.
NOTE The installation program can only upgrade a package-based J2SE
installation, not a file-based J2SE installation.
Forgotten User Name or Password
96 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
Solution
Verify that your /usr/j2se directory is not read-only.
Forgotten User Name or Password
If you do not remember the administrative user name that was supplied during
installation, try these solutions in this order:
1. Enter the user name admin. This is the default user name specified in the server
configuration dialog during installation.
2. If this doesn’t work, look in the following file:
domain_config_dir/domain1/admin-server/config/admpw
This file contains the administrator's user name followed by the encrypted
form of the administrative user's password. Seeing the user name may jog your
memory.
3. If this doesn’t work, delete the administrative domain and recreate it with a
new password.
4. As a last resort, uninstall and reinstall the Sun ONE Application Server.
Forgotten Admin Server Port Number
If you do not remember the HTTP server port number of the Admin Server, you
can inspect the Admin Server's configuration file to determine the HTTP server
port number:
1. Navigate to domain_config_dir/domain1/admin-server/config/ and open the
server.xml file in a text editor.
2. Look for the following element:
http-listener id="http-listener-1" address="0.0.0.0"
port="4848"...
In this case, port 4848 is the HTTP port number in use.
Connection Refused for Administration Interface
Chapter 6 Troubleshooting 97
Connection Refused for Administration Interface
If the connection was refused when attempting to invoke the graphical
Administration interface, it is likely that the Admin Server is not running. The
Admin Server log file may be helpful in determining the reason the Admin Server
is not running.
To start the Admin Server, use the command-line instructions in “Starting and
Stopping the Server” on page 81.
Server Won’t Start: CGI Error Occurs
If the Sun ONE Application Server won’t start, you may receive the following
error:
[05/Aug/2002:01:12:12] SEVERE (21770): cgi_init reports:
HTTP4047: could not initialize CGI subsystem
(Cgistub path /export/home/sun/appserver7/appserv/lib/Cgistub),
err fork() failure [Not enough space]
The system may require additional resources. Possible solutions are described in
the following sections:
• Set Limits on File Descriptions
• On Solaris: Change Kernel Parameters
Set Limits on File Descriptions
You can use the ulimit command to determine the number of available file
descriptors or set limits on the system’s available file descriptors. The ulimit
command displays the limits for the current shell and its descendants.
For the sh shell, the ulimit -a command lists all the current resource limits. The
ulimit -n command lists the maximum file descriptors plus 1.
On Solaris: Change Kernel Parameters
On Solaris, increase the system resources by modifying the /etc/system file to
include the following entries:
Uninstallation Failure Cleanup
98 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
set rlim_fd_max=4086
set rlim_fd_cur=1024
The system will require a reboot for the new kernel parameters to take effect.
After you have set the shell resources, the Sun ONE Application Server should
start.
Uninstallation Failure Cleanup
If an uninstallation fails, you may need to clean up some leftover files or processes
before attempting a new installation.
1. Log in as root.
2. Navigate to your installation directory and check the content of the
/var/sadm/install/productregistry file for installed packages. That is,
check for files having the SUNW string.
cat /var/sadm/install/productregistry | grep SUNW
3. Run pkgrm for the SUNW packages that were found in the product registry file.
For example:
pkgrm SUNWasaco
4. Remove the following files, if they are present:
/tmp/setupSDKNative
/tmp/SolarisNativeToolkit_3.0_1
5. After the packages have been removed, manually remove the Sun ONE
Application Server-specific product registry file itself.
rm /var/sadm/install/productregistry
6. At the command line, find and kill all appservd processes that may be running
by typing the following:
ps -ef | grep appservd
kill -9 PID
7. Remove all remaining files under the Sun ONE Application Server installation
directories.
Uninstallation Failure Cleanup
Chapter 6 Troubleshooting 99
8. If present, remove the following log file:
/var/sadm/install/logs/Sun_ONE_Application_Server_install.log
This is necessary because every iteration of installation appends the log
information to this file if it exists.
Uninstallation Failure Cleanup
100 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
101
Appendix A
Installation Cheatsheet
Sun ONE Application Server 7, Enterprise Edition is a complex product to
implement. However, if you are an experienced installer and are familiar with
configuring high-availability systems, the summarized steps in this appendix may
be useful.
The installation phase of product implementation consists of the following
high-level tasks:
1. Fulfill the installation requirements.
2. Install the software components.
3. Complete the high-availability installation tasks.
4. Complete the post-installation tasks.
When you have finished the tasks listed in this appendix, the installation is
considered complete. You are now ready to proceed to the high-availability
configuration tasks as documented in the Sun ONE Application Server
Administrator’s Guide.
1. Fulfill the installation requirements.
Table A-2 lists the requirements that must be met in order to install the Sun ONE
Application Server Version 7, Enterprise Edition product.
Table A-1 Installation Requirements Tasks
Done Task Location of Full Instructions
Platform and HA configuration—Verify platform
and HA configuration have been met.
“Platform Requirements” on page 24
2. Install the software components.
102 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
2. Install the software components.
Table A-2 lists the tasks for installing the Sun ONE Application Server Version 7,
Enterprise Edition product components.
(if applicable) Solaris 8 patches—Verify the correct
patches are installed.
“Solaris 8 Patch Requirements” on page 26
(if applicable) Solaris 9 bundled, Message Queue
broker—Verify unique naming of domains and
instances.
“Shared Message Queue Broker Requirement”
on page 26
(if applicable) Hardened Solaris operating
system—Verify needed libraries are installed.
“Hardened Solaris Operating Environment
Requirement” on page 26
(if applicable) Existing installations—Remove any
existing Application Servers using uninstallation.
“General Requirements” on page 27
Available ports—Plan your port preferences. “General Requirements” on page 27
Root privileges—Verify that the installation person
has root privileges on target machine.
HA topology—Plan your high-availability topology. “Topology Planning” on page 28
Operational Deployment Guide
HA space—Evaluate your high-availability space
requirements
“Space Considerations” on page 29
“Platform Requirements” on page 24
Web server—Install the Sun ONE Web Server 6.0 SP6 “Web Server Installation” on page 29
iPlanet WebServer Installation Guide
Table A-2 Product Installation Tasks
Done Task Location of Full Instructions
Requirements—Verify that requirements are met. Table A-1 on page 101
Table A-1 Installation Requirements Tasks (Continued)
Done Task Location of Full Instructions
3. Complete the high-availability installation tasks.
Appendix A Installation Cheatsheet 103
3. Complete the high-availability installation
tasks.
Table A-3 lists the high-availability preparation tasks that are part of installing the
Sun ONE Application Server Version 7, Enterprise Edition product.
Start processes—Start processes that use ports and will run at same
time as Application Server.
Procedure starts here:
“Installing Application Server
Software” on page 36
(if applicable) Download the software bundle:
gunzip sun-appserver7-sol.tar.gz
tar -xvf sun-appserver7-sol.tar
Choose your installation method:
To invoke the graphical interface— ./setup
To invoke the command-line interface— ./setup -console
Select installation components (load balancer is usually installed
separately) and respond to all installation program prompts.
Check installation summary and logs.
Set PATH environment variable for HADB /bin.
Start the Application Server.
Verify that asadmin and hadbm commands run.
If a previous load balancer plugin is installed, remove it with the
uninstallation program
Procedure starts here:
“Installing the Load Balancer
Plug-in” on page 44
Verify that the correct web server is installed: Sun ONE 6.0 SP6 or
Apache Web Server 1.3.27
Invoke the Installation program to install the load balancer plugin
and respond to all installation program prompts.
(if applicable) Perform silent installation “Installing in Silent Mode
(Non-Interactive)” on page 48
Table A-3 High-Availability Installation Tasks
Done Task Location of Full Instructions
Configure shared memory for the HADB
hosts.
“Configuring Shared Memory and Semaphores” on
page 53
Table A-2 Product Installation Tasks (Continued)
Done Task Location of Full Instructions
4. Complete the post-installation tasks.
104 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
4. Complete the post-installation tasks.
Table A-4 lists the final tasks required for installing the Sun ONE Application
Server Version 7, Enterprise Edition product.
Set up communication for the HADB
hosts, either using RSH or SSH. (SSH is
Solaris 9 default)
“Setting up RSH for HADB Administration” on page 56
“Setting Up SSH for HADB Administration” on page 57
If needed for Solaris 8, install OpenSSH. “Installing SSH for Solaris 8” on page 59
Set up the user environment for hadbm. “Setting Up the User Environment” on page 63
(If applicable) Set up for running the
clsetup command as non-root.
“Setting Up Administration for Non-Root” on page 64
Verify that clsetup requirements are
met.
“clsetup Requirements and Limitations” on page 68
(If applicable) Edit the clsetup input files
for your configuration.
“Editing the clsetup Input Files” on page 70
Run clsetup to configure a basic cluster. “Running the clsetup Command” on page 77
Scan clsetup logs and correct any errors. “Cleanup Procedures for the clsetup Command” on
page 79
Table A-4 Post-Installation Tasks
Done Task Location of Full Instructions
(If needed) Use asadmin commands to
start or stop the Application Server.
“Creating Domains and Instances” on page 84
(If needed) Create additional domains. “Creating Domains and Instances” on page 84
(If needed) Use hadbm commands to stop
or start the HADB.
“Stopping and Starting the HADB” on page 85
(If needed) Install and configure web
services client.
Developer’s Guide to Clients
Table A-3 High-Availability Installation Tasks (Continued)
Done Task Location of Full Instructions
105
Index
SYMBOLS
.rhosts file 57
/etc/opt/SUNWappserver7/config 23
/etc/ssh/sshd_config 58
/opt/SUNWappserver7 23
/usr/j2se 95
/var/opt/SUNWappserver7/domains 23
A
Admin Console. See Administration interface.
Admin Server, not started 97
administration client 18, 33
Administration interface 17
connection refused 97
starting/stopping 84
administration server port 27, 42
administration tools overview 17
Always-On Technology 20
Apache Web Server 29, 42, 45, 47
AS_ADMIN_PASSWORD 72
asadmin commands 68, 83
asadmin delete-instance 80
asadmin delete-jdbc-connection-pool 80
C
cheatsheet for installation 101
cladmin clear-session-store 80
cladmin command 65
cladmin delete-jdbc-resource 80
cleanup after uninstall failure 98
cleanup after uninstallation failure 98
clinstance.conf file 70, 71
clpassword.conf file 71
clresource.conf file 72–77
clsetup command 65–80
cleanup procedures 79
exit codes 78
input files 70
log 78
non-root setup 64
requirements 68
running 77
syntax 77
command-line command 81
command-line interface method 22
communications setup for HADB 55
configuration directory, specifying 41
configuration file (silent mode) 48
modifying 49
variables 49
console option 34
customer support 12
Section
106 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
D
default port numbers 42
default_config_dir 12
dependencies 32
df -k command 25
directories 12
installation 12
instance root 12
documentation 30
directory conventions 12
font conventions 11
general conventions 11
path formats 11
URL formats 11
domains
creating 84
specifying directory 41
starting and stopping 82
E
Enterprise Edition
license 23
overview 20
environment variables HADB settings 63
error messages 94
exit codes for clsetup 78
F
font conventions 11
freeware 59
G
graphical interface method 22
gunzip 37, 45
H
HADB 69
clsetup parameters 72
communications setup 55
configuring shared memory 53
non-root setup 64
refragmentation 29
setting the environment 63
setting up remote access 55
space considerations 29
starting after stopping 86
stopping 85
HADB management client 20, 29, 63
hadbm 44, 68
hadbm delete 80
hadbm deviceinfo 29
hadbm man pages 20
hadbm start 86
hadbm stopdb 85
hardened operating environment 22, 26
high availability 53–65
commands 18
host communications setup 55
overview 20
requirements 28
HTTP reverse proxy plug-in 21
HTTP server
port 27, 42
I
incremental installation 21, 32, 51
inetd 86
inetd configuration 69
install_config_dir 12
install_dir 12
installation 31–52
cheatsheet 101
incremental 32
J2SE 40
logs 93
methods 21, 35
Section
Index 107
post-install tasks 81
roadmap 16
silent mode configuration file 48
installation root directories 12
instances
creating 84
root directories 12
starting and stopping 83
J
J2SE 40
third-party 18, 41
troubleshooting upgrade 94
Java Messaging Service (JMS) overview 19
JAVA_HOME setting 64
JDBC connection pool 69
JDBC connection pool parameters 74
JMS service startup failure 26
L
licensing 23
limitations on clsetup 68
load balancer plug-in 21, 29, 37
installation 44–47
log files 93
logs
clsetup 78
troubleshooting 94
M
man pages 20, 30
Message Queue broker issue 26
methods of installation 21, 35
N
non-root setup 64, 69
O
OpenSSH 55, 58
options for the setup command 34
P
package-based model 23, 95
parameter-driven installation 48
partial installation 21, 32, 51
password, forgotten 96
patches 23, 26
PATH 44
path formats 11
PATH setting for HADB_ROOT 63
pkginfo 44, 93
platforms, supported 24
plug-ins
HTTP reverse proxy 21
load balancer 21
port number, forgotten 96
ports 42
administration server 27, 42, 96
HTTP server 27, 42
inaccessible 97
requirements 27
ports in use 37
post-installation tasks 81–86
privileges, root 27
prtconf command 25
R
refragmentation of HADB 29
Section
108 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
remote access for HADB 55
Remote Shell (RSH) setup 55
requirements
clsetup 68
high availability 28
ports 27
space 24
system 24
technical 27
roadmap for installation 16
root directories
instance 12
root privileges 27
RSH 55
S
sample applications overview 19
savestate option 35
Secured Shell (SSH) setup 55
semaphores 53
server, starting and stopping 81
session persistence parameters 75
session store parameters 73
set shmsys 54
setenv JAVA_HOME 64
setenv PATH 63
setup command usage 34
setupSDKNative 98
shared memory, configuring for HADB 53
showrev 93
silent installation 22, 48–52
silent mode 90
silent option 35
Solaris 8 56, 58
Solaris 9 26, 56
Solaris J2SE packages 94
space for the HADB 29
space requirements 24
SSH 55
ssh-keygen 62
start-appserv 82
start-domain 82
starting a domain 82
starting an instance 83
starting the server 43, 52, 81
starting/stopping the Administration interface 84
start-instance 83
statefile 35
stop-appserv 82
stop-domain 82
stop-instance 83
stopping a domain 82
stopping an instance 83
stopping the server 81
stopstate file 86
summary of installation tasks 101
Sun ONE Message Queue 27, 39
on Solaris 26
overview 19
Sun ONE Web Server 29, 42, 44
sunfreeware 59
SUNWlibC 27
supported platforms 24
syntax for the setup command 34
system requirements 24
system resources, increasing 97
T
tar 37, 45
tasks summary 101
technical requirements 27
third-party J2SE 18, 41
top command 25
topology requirements for high-availability 28
troubleshooting 93–98
J2SE upgrade 94
logs 93
Sun ONE Message Queue broker 26
Section
Index 109
U
ulimit 97
uname command 25
uninstallation
logs 93
requirements 88
troubleshooting 94
uninstallation failure cleanup 98
uninstalling 87–91
URL formats 11
user name, forgotten 96
W
warning messages 94
web server
requirements for high availability 29, 37, 44
specifying instance path 41
web services client 85
Section
110 Sun ONE Application Server Version 7, Enterprise Edition Installation Guide • September 2003
www.it-ebooks.info
Apache Solr 4
Cookbook
Over 100 recipes to make Apache Solr faster,
more reliable, and return better results
Rafal Kuc
BIRMINGHAM - MUMBAI
www.it-ebooks.info
Apache Solr 4 Cookbook
Copyright © 2013 Packt Publishing
All rights reserved. No part of this book may be reproduced, stored in a retrieval system,
or transmitted in any form or by any means, without the prior written permission of the
publisher, except in the case of brief quotations embedded in critical articles or reviews.
Every effort has been made in the preparation of this book to ensure the accuracy of the
information presented. However, the information contained in this book is sold without
warranty, either express or implied. Neither the author, nor Packt Publishing, and its dealers
and distributors will be held liable for any damages caused or alleged to be caused directly
or indirectly by this book.
Packt Publishing has endeavored to provide trademark information about all of the companies
and products mentioned in this book by the appropriate use of capitals. However, Packt
Publishing cannot guarantee the accuracy of this information.
First published: July 2011
Second edition: January 2013
Production Reference: 1150113
Published by Packt Publishing Ltd.
Livery Place
35 Livery Street
Birmingham B3 2PB, UK.
ISBN 978-1-78216-132-5
www.packtpub.com
Cover Image by J. Blaminsky (milak6@wp.pl)
www.it-ebooks.info
Credits
Author
Rafal Kuc
Reviewers
Ravindra Bharathi
Marcelo Ochoa
Vijayakumar Ramdoss
Acquisition Editor
Andrew Duckworth
Lead Technical Editor
Arun Nadar
Technical Editors
Jalasha D'costa
Charmaine Pereira
Lubna Shaikh
Project Coordinator
Anurag Banerjee
Proofreaders
Maria Gould
Aaron Nash
Indexer
Tejal Soni
Production Coordinators
Manu Joseph
Nitesh Thakur
Cover Work
Nitesh Thakur
www.it-ebooks.info
About the Author
Rafal Kuc is a born team leader and software developer. Currently working as a Consultant
and a Software Engineer at Sematext Inc, where he concentrates on open source technologies
such as Apache Lucene and Solr, ElasticSearch, and Hadoop stack. He has more than
10 years of experience in various software branches, from banking software to e-commerce
products. He is mainly focused on Java, but open to every tool and programming language
that will make the achievement of his goal easier and faster. Rafal is also one of the founders
of the solr.pl site, where he tries to share his knowledge and help people with their
problems with Solr and Lucene. He is also a speaker for various conferences around the
world such as Lucene Eurocon, Berlin Buzzwords, and ApacheCon.
Rafal began his journey with Lucene in 2002 and it wasn't love at first sight. When he
came back to Lucene later in 2003, he revised his thoughts about the framework and saw
the potential in search technologies. Then Solr came and that was it. From then on, Rafal
has concentrated on search technologies and data analysis. Right now Lucene, Solr, and
ElasticSearch are his main points of interest.
www.it-ebooks.info
Acknowledgement
This book is an update to the first cookbook for Solr that was released almost two year ago
now. What was at the beginning an update turned out to be a rewrite of almost all the recipes
in the book, because we wanted to not only bring you an update to the already existing
recipes, but also give you whole new recipes that will help you with common situations
when using Apache Solr 4.0. I hope that the book you are holding in your hands (or reading
on a computer or reader screen) will be useful to you.
Although I would go the same way if I could get back in time, the time of writing this book
was not easy for my family. Among the ones who suffered the most were my wife Agnes
and our two great kids, our son Philip and daughter Susanna. Without their patience and
understanding, the writing of this book wouldn't have been possible. I would also like to
thank my parents and Agnes' parents for their support and help.
I would like to thank all the people involved in creating, developing, and maintaining Lucene
and Solr projects for their work and passion. Without them this book wouldn't have been written.
Once again, thank you.
www.it-ebooks.info
About the Reviewers
Ravindra Bharathi has worked in the software industry for over a decade in
various domains such as education, digital media marketing/advertising, enterprise
search, and energy management systems. He has a keen interest in search-based
applications that involve data visualization, mashups, and dashboards. He blogs at
http://ravindrabharathi.blogspot.com.
Marcelo Ochoa works at the System Laboratory of Facultad de Ciencias Exactas of the
Universidad Nacional del Centro de la Provincia de Buenos Aires, and is the CTO at Scotas.
com, a company specialized in near real time search solutions using Apache Solr and Oracle.
He divides his time between University jobs and external projects related to Oracle, and big
data technologies. He has worked in several Oracle related projects such as translation of
Oracle manuals and multimedia CBTs. His background is in database, network, web, and
Java technologies. In the XML world, he is known as the developer of the DB Generator for
the Apache Cocoon project, the open source projects DBPrism and DBPrism CMS, the
Lucene-Oracle integration by using Oracle JVM Directory implementation, and the Restlet.org
project – the Oracle XDB Restlet Adapter, an alternative to writing native REST web services
inside the database resident JVM.
Since 2006, he has been a part of the Oracle ACE program. Oracle ACEs are known for
their strong credentials as Oracle community enthusiasts and advocates, with candidates
nominated by ACEs in the Oracle Technology and Applications communities.
He is the author of Chapter 17 of the book Oracle Database Programming using Java and
Web Services, Kuassi Mensah, Digital Press and Chapter 21 of the book Professional XML
Databases, Kevin Williams, Wrox Press.
www.it-ebooks.info
www.PacktPub.com
Support files, eBooks, discount offers and more
You might want to visit www.PacktPub.com for support files and downloads related to
your book.
Did you know that Packt offers eBook versions of every book published, with PDF and ePub
files available? You can upgrade to the eBook version at www.PacktPub.com and as a print
book customer, you are entitled to a discount on the eBook copy. Get in touch with us at
service@packtpub.com for more details.
At www.PacktPub.com, you can also read a collection of free technical articles, sign up
for a range of free newsletters and receive exclusive discounts and offers on Packt books
and eBooks.
http://PacktLib.PacktPub.com
Do you need instant solutions to your IT questions? PacktLib is Packt's online digital book
library. Here, you can access, read and search across Packt's entire library of books.
Why Subscribe?
ff Fully searchable across every book published by Packt
ff Copy and paste, print and bookmark content
ff On demand and accessible via web browser
Free Access for Packt account holders
If you have an account with Packt at www.PacktPub.com, you can use this to access
PacktLib today and view nine entirely free books. Simply use your login credentials for
immediate access.
www.it-ebooks.info
www.it-ebooks.info
Table of Contents
Preface 1
Chapter 1: Apache Solr Configuration 5
Introduction 5
Running Solr on Jetty 6
Running Solr on Apache Tomcat 10
Installing a standalone ZooKeeper 14
Clustering your data 15
Choosing the right directory implementation 17
Configuring spellchecker to not use its own index 19
Solr cache configuration 22
How to fetch and index web pages 27
How to set up the extracting request handler 30
Changing the default similarity implementation 32
Chapter 2: Indexing Your Data 35
Introduction 35
Indexing PDF files 36
Generating unique fields automatically 38
Extracting metadata from binary files 40
How to properly configure Data Import Handler with JDBC 42
Indexing data from a database using Data Import Handler 45
How to import data using Data Import Handler and delta query 48
How to use Data Import Handler with the URL data source 50
How to modify data while importing with Data Import Handler 53
Updating a single field of your document 56
Handling multiple currencies 59
Detecting the document's language 62
Optimizing your primary key field indexing 67
www.it-ebooks.info
ii
Table of Contents
Chapter 3: Analyzing Your Text Data 69
Introduction 70
Storing additional information using payloads 70
Eliminating XML and HTML tags from text 73
Copying the contents of one field to another 75
Changing words to other words 77
Splitting text by CamelCase 80
Splitting text by whitespace only 82
Making plural words singular without stemming 84
Lowercasing the whole string 87
Storing geographical points in the index 88
Stemming your data 91
Preparing text to perform an efficient trailing wildcard search 93
Splitting text by numbers and non-whitespace characters 96
Using Hunspell as a stemmer 99
Using your own stemming dictionary 101
Protecting words from being stemmed 103
Chapter 4: Querying Solr 107
Introduction 108
Asking for a particular field value 108
Sorting results by a field value 109
How to search for a phrase, not a single word 111
Boosting phrases over words 114
Positioning some documents over others in a query 117
Positioning documents with words closer to each other first 122
Sorting results by the distance from a point 125
Getting documents with only a partial match 128
Affecting scoring with functions 130
Nesting queries 134
Modifying returned documents 136
Using parent-child relationships 139
Ignoring typos in terms of performance 142
Detecting and omitting duplicate documents 145
Using field aliases 148
Returning a value of a function in the results 151
Chapter 5: Using the Faceting Mechanism 155
Introduction 155
Getting the number of documents with the same field value 156
Getting the number of documents with the same value range 158
www.it-ebooks.info
iii
Table of Contents
Getting the number of documents matching the query and subquery 161
Removing filters from faceting results 164
Sorting faceting results in alphabetical order 168
Implementing the autosuggest feature using faceting 171
Getting the number of documents that don't have a value in the field 174
Having two different facet limits for two different fields in the same query 177
Using decision tree faceting 180
Calculating faceting for relevant documents in groups 183
Chapter 6: Improving Solr Performance 187
Introduction 187
Paging your results quickly 188
Configuring the document cache 189
Configuring the query result cache 190
Configuring the filter cache 192
Improving Solr performance right after the startup or commit operation 194
Caching whole result pages 197
Improving faceting performance for low cardinality fields 198
What to do when Solr slows down during indexing 200
Analyzing query performance 202
Avoiding filter caching 206
Controlling the order of execution of filter queries 207
Improving the performance of numerical range queries 208
Chapter 7: In the Cloud 211
Introduction 211
Creating a new SolrCloud cluster 211
Setting up two collections inside a single cluster 214
Managing your SolrCloud cluster 216
Understanding the SolrCloud cluster administration GUI 220
Distributed indexing and searching 223
Increasing the number of replicas on an already live cluster 227
Stopping automatic document distribution among shards 230
Chapter 8: Using Additional Solr Functionalities 235
Introduction 235
Getting more documents similar to those returned in the results list 236
Highlighting matched words 238
How to highlight long text fields and get good performance 241
Sorting results by a function value 243
Searching words by how they sound 246
Ignoring defined words 248
www.it-ebooks.info
iv
Table of Contents
Computing statistics for the search results 250
Checking the user's spelling mistakes 253
Using field values to group results 257
Using queries to group results 260
Using function queries to group results 262
Chapter 9: Dealing with Problems 265
Introduction 265
How to deal with too many opened files 265
How to deal with out-of-memory problems 267
How to sort non-English languages properly 268
How to make your index smaller 272
Diagnosing Solr problems 274
How to avoid swapping 280
Appendix: Real-life Situations 283
Introduction 283
How to implement a product's autocomplete functionality 284
How to implement a category's autocomplete functionality 287
How to use different query parsers in a single query 290
How to get documents right after they were sent for indexation 292
How to search your data in a near real-time manner 294
How to get the documents with all the query words to the top
of the results set 296
How to boost documents based on their publishing date 300
Index 305
www.it-ebooks.info
Preface
Welcome to the Solr Cookbook for Apache Solr 4.0. You will be taken on a tour through the
most common problems when dealing with Apache Solr. You will learn how to deal with the
problems in Solr configuration and setup, how to handle common querying problems, how
to fine-tune Solr instances, how to set up and use SolrCloud, how to use faceting and
grouping, fight common problems, and many more things. Every recipe is based on
real-life problems, and each recipe includes solutions along with detailed descriptions
of the configuration and code that was used.
What this book covers
Chapter 1, Apache Solr Configuration, covers Solr configuration recipes, different servlet
container usage with Solr, and setting up Apache ZooKeeper and Apache Nutch.
Chapter 2, Indexing Your Data, explains data indexing such as binary file indexing, using Data
Import Handler, language detection, updating a single field of document, and much more.
Chapter 3, Analyzing Your Text Data, concentrates on common problems when analyzing your
data such as stemming, geographical location indexing, or using synonyms.
Chapter 4, Querying Solr, describes querying Apache Solr such as nesting queries, affecting
scoring of documents, phrase search, or using the parent-child relationship.
Chapter 5, Using the Faceting Mechanism, is dedicated to the faceting mechanism in
which you can find the information needed to overcome some of the situations that you can
encounter during your work with Solr and faceting.
Chapter 6, Improving Solr Performance, is dedicated to improving your Apache Solr cluster
performance with information such as cache configuration, indexing speed up, and much more.
Chapter 7, In the Cloud, covers the new feature in Solr 4.0, the SolrCloud, and the setting up
of collections, replica configuration, distributed indexing and searching, and understanding
Solr administration.
www.it-ebooks.info
Preface
2
Chapter 8, Using Additional Solr Functionalities, explains documents highlighting, sorting
results on the basis of function value, checking user spelling mistakes, and using the
grouping functionality.
Chapter 9, Dealing with Problems, is a small chapter dedicated to the most common
situations such as memory problems, reducing your index size, and similar issues.
Appendix, Real Life Situations, describes how to handle real-life situations such as
implementing different autocomplete functionalities, using near real-time search,
or improving query relevance.
What you need for this book
In order to be able to run most of the examples in the book, you will need the Java Runtime
Environment 1.6 or newer, and of course the 4.0 version of the Apache Solr search server.
A few chapters in this book require additional software such as Apache ZooKeeper 3.4.3,
Apache Nutch 1.5.1, Apache Tomcat, or Jetty.
Who this book is for
This book is for users working with Apache Solr or developers that use Apache Solr to build
their own software that would like to know how to combat common problems. Knowledge of
Apache Lucene would be a bonus, but is not required.
Conventions
In this book, you will find a number of styles of text that distinguish between different kinds of
information. Here are some examples of these styles, and an explanation of their meaning.
Code words in text are shown as follows: "The lib entry in the solrconfig.xml file tells
Solr to look for all the JAR files from the ../../langid directory".
A block of code is set as follows:
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
<field name="name" type="text_general" indexed="true" stored="true"/>
<field name="description" type="text_general" indexed="true"
stored="true" />
<field name="langId" type="string" indexed="true" stored="true" />
www.it-ebooks.info
Preface
3
When we wish to draw your attention to a particular part of a code block, the relevant lines
or items are set in bold:
<updateRequestProcessorChain name="langid">
<processor class="org.apache.solr.update.processor.
TikaLanguageIdentifierUpdateProcessorFactory">
<str name="langid.fl">name,description</str>
<str name="langid.langField">langId</str>
<str name="langid.fallback">en</str>
</processor>
Any command-line input or output is written as follows:
curl 'localhost:8983/solr/update?commit=true' -H 'Contenttype:
application/json' -d '[{"id":"1","file":{"set":"New file name"}}]'
New terms and important words are shown in bold. Words that you see on the screen, in
menus or dialog boxes for example, appear in the text like this: "clicking the Next button
moves you to the next screen".
Warnings or important notes appear in a box like this.
Tips and tricks appear like this.
Reader feedback
Feedback from our readers is always welcome. Let us know what you think about this
book—what you liked or may have disliked. Reader feedback is important for us to develop
titles that you really get the most out of.
To send us general feedback, simply send an e-mail to feedback@packtpub.com,
and mention the book title through the subject of your message.
If there is a topic that you have expertise in and you are interested in either writing or
contributing to a book, see our author guide on www.packtpub.com/authors.
www.it-ebooks.info
Preface
4
Customer support
Now that you are the proud owner of a Packt book, we have a number of things to help you
to get the most from your purchase.
Downloading the example code
You can download the example code files for all Packt books you have purchased from
your account at http://www.packtpub.com. If you purchased this book elsewhere,
you can visit http://www.packtpub.com/support and register to have the files
e-mailed directly to you.
Errata
Although we have taken every care to ensure the accuracy of our content, mistakes do happen.
If you find a mistake in one of our books—maybe a mistake in the text or the code—we would be
grateful if you would report this to us. By doing so, you can save other readers from frustration
and help us improve subsequent versions of this book. If you find any errata, please report them
by visiting http://www.packtpub.com/support, selecting your book, clicking on the errata
submission form link, and entering the details of your errata. Once your errata are verified, your
submission will be accepted and the errata will be uploaded to our website, or added to any list
of existing errata, under the Errata section of that title.
Piracy
Piracy of copyright material on the Internet is an ongoing problem across all media. At Packt,
we take the protection of our copyright and licenses very seriously. If you come across any
illegal copies of our works, in any form, on the Internet, please provide us with the location
address or website name immediately so that we can pursue a remedy.
Please contact us at copyright@packtpub.com with a link to the suspected pirated material.
We appreciate your help in protecting our authors, and our ability to bring you valuable content.
Questions
You can contact us at questions@packtpub.com if you are having a problem with any aspect
of the book, and we will do our best to address it.
www.it-ebooks.info
1
Apache Solr
Configuration
In this chapter we will cover:
ff Running Solr on Jetty
ff Running Solr on Apache Tomcat
ff Installing a standalone ZooKeeper
ff Clustering your data
ff Choosing the right directory implementation
ff Configuring spellchecker to not use its own index
ff Solr cache configuration
ff How to fetch and index web pages
ff How to set up the extracting request handler
ff Changing the default similarity implementation
Introduction
Setting up an example Solr instance is not a hard task, at least when setting up the simplest
configuration. The simplest way is to run the example provided with the Solr distribution, that
shows how to use the embedded Jetty servlet container.
If you don't have any experience with Apache Solr, please refer to the Apache Solr tutorial
which can be found at: http://lucene.apache.org/solr/tutorial.html before
reading this book.
www.it-ebooks.info
Apache Solr Configuration
6
During the writing of this chapter, I used Solr version 4.0 and Jetty
version 8.1.5, and those versions are covered in the tips of the following
chapter. If another version of Solr is mandatory for a feature to run, then
it will be mentioned.
We have a simple configuration, simple index structure described by the schema.xml file,
and we can run indexing.
In this chapter you'll see how to configure and use the more advanced Solr modules; you'll
see how to run Solr in different containers and how to prepare your configuration to different
requirements. You will also learn how to set up a new SolrCloud cluster and migrate your
current configuration to the one supporting all the features of SolrCloud. Finally, you will
learn how to configure Solr cache to meet your needs and how to pre-sort your Solr indexes
to be able to use early query termination techniques efficiently.
Running Solr on Jetty
The simplest way to run Apache Solr on a Jetty servlet container is to run the provided
example configuration based on embedded Jetty. But it's not the case here. In this recipe,
I would like to show you how to configure and run Solr on a standalone Jetty container.
Getting ready
First of all you need to download the Jetty servlet container for your platform. You can get your
download package from an automatic installer (such as, apt-get), or you can download it
yourself from http://jetty.codehaus.org/jetty/.
How to do it...
The first thing is to install the Jetty servlet container, which is beyond the scope of this book,
so we will assume that you have Jetty installed in the /usr/share/jetty directory or you
copied the Jetty files to that directory.
Let's start by copying the solr.war file to the webapps directory of the Jetty installation
(so the whole path would be /usr/share/jetty/webapps). In addition to that we need
to create a temporary directory in Jetty installation, so let's create the temp directory in the
Jetty installation directory.
Next we need to copy and adjust the solr.xml file from the context directory of the Solr
example distribution to the context directory of the Jetty installation. The final file contents
should look like the following code:
www.it-ebooks.info
Chapter 1
7
<?xml version="1.0"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.
eclipse.org/jetty/configure.dtd">
<Configure class="org.eclipse.jetty.webapp.WebAppContext">
<Set name="contextPath">/solr</Set>
<Set name="war"><SystemProperty name="jetty.home"/>/webapps/solr.
war</Set>
<Set name="defaultsDescriptor"><SystemProperty name="jetty.home"/>/
etc/webdefault.xml</Set>
<Set name="tempDirectory"><Property name="jetty.home" default="."/>/
temp</Set>
</Configure>
Downloading the example code
You can download the example code files for all Packt books you
have purchased from your account at http://www.packtpub.com.
If you purchased this book elsewhere, you can visit
http://www.packtpub.com/support and register to have the
files e-mailed directly to you.
Now we need to copy the jetty.xml, webdefault.xml, and logging.properties files
from the etc directory of the Solr distribution to the configuration directory of Jetty, so in our
case to the /usr/share/jetty/etc directory.
The next step is to copy the Solr configuration files to the appropriate directory. I'm talking
about files such as schema.xml, solrconfig.xml, solr.xml, and so on. Those files
should be in the directory specified by the solr.solr.home system variable (in my case
this was the /usr/share/solr directory). Please remember to preserve the directory
structure you'll see in the example deployment, so for example, the /usr/share/solr
directory should contain the solr.xml (and in addition zoo.cfg in case you want to
use SolrCloud) file with the contents like so:
<?xml version="1.0" encoding="UTF-8" ?>
<solr persistent="true">
<cores adminPath="/admin/cores" defaultCoreName="collection1">
<core name="collection1" instanceDir="collection1" />
</cores>
</solr>
All the other configuration files should go to the /usr/share/solr/collection1/conf
directory (place the schema.xml and solrconfig.xml files there along with any additional
configuration files your deployment needs). Your cores may have other names than the default
collection1, so please be aware of that.
www.it-ebooks.info
Apache Solr Configuration
8
The last thing about the configuration is to update the /etc/default/jetty file and
add –Dsolr.solr.home=/usr/share/solr to the JAVA_OPTIONS variable of that
file. The whole line with that variable could look like the following:
JAVA_OPTIONS="-Xmx256m -Djava.awt.headless=true -Dsolr.solr.home=/usr/
share/solr/"
If you didn't install Jetty with apt-get or a similar software, you may not have the /etc/
default/jetty file. In that case, add the –Dsolr.solr.home=/usr/share/solr
parameter to the Jetty startup.
We can now run Jetty to see if everything is ok. To start Jetty, that was installed, for example,
using the apt-get command, use the following command:
/etc/init.d/jetty start
You can also run Jetty with a java command. Run the following command in the Jetty
installation directory:
java –Dsolr.solr.home=/usr/share/solr –jar start.jar
If there were no exceptions during the startup, we have a running Jetty with Solr deployed
and configured. To check if Solr is running, try going to the following address with your web
browser: http://localhost:8983/solr/.
You should see the Solr front page with cores, or a single core, mentioned. Congratulations!
You just successfully installed, configured, and ran the Jetty servlet container with Solr deployed.
How it works...
For the purpose of this recipe, I assumed that we needed a single core installation with only
schema.xml and solrconfig.xml configuration files. Multicore installation is very similar
– it differs only in terms of the Solr configuration files.
The first thing we did was copy the solr.war file and create the temp directory. The WAR
file is the actual Solr web application. The temp directory will be used by Jetty to unpack
the WAR file.
The solr.xml file we placed in the context directory enables Jetty to define the context
for the Solr web application. As you can see in its contents, we set the context to be /solr,
so our Solr application will be available under http://localhost:8983/solr/. We
also specified where Jetty should look for the WAR file (the war property), where the web
application descriptor file (the defaultsDescriptor property) is, and finally where the
temporary directory will be located (the tempDirectory property).
www.it-ebooks.info
Chapter 1
9
The next step is to provide configuration files for the Solr web application. Those files should
be in the directory specified by the system solr.solr.home variable. I decided to use the
/usr/share/solr directory to ensure that I'll be able to update Jetty without the need of
overriding or deleting the Solr configuration files. When copying the Solr configuration files,
you should remember to include all the files and the exact directory structure that Solr needs.
So in the directory specified by the solr.solr.home variable, the solr.xml file should be
available – the one that describes the cores of your system.
The solr.xml file is pretty simple – there should be the root element called solr. Inside it
there should be a cores tag (with the adminPath variable set to the address where Solr's
cores administration API is available and the defaultCoreName attribute that says which
is the default core). The cores tag is a parent for cores definition – each core should have
its own cores tag with name attribute specifying the core name and the instanceDir
attribute specifying the directory where the core specific files will be available (such as
the conf directory).
If you installed Jetty with the apt-get command or similar, you will need to update
the /etc/default/jetty file to include the solr.solr.home variable for Solr
to be able to see its configuration directory.
After all those steps we are ready to launch Jetty. If you installed Jetty with apt-get
or a similar software, you can run Jetty with the first command shown in the example.
Otherwise you can run Jetty with a java command from the Jetty installation directory.
After running the example query in your web browser you should see the Solr front page
as a single core. Congratulations! You just successfully configured and ran the Jetty servlet
container with Solr deployed.
There's more...
There are a few tasks you can do to counter some problems when running Solr within the Jetty
servlet container. Here are the most common ones that I encountered during my work.
I want Jetty to run on a different port
Sometimes it's necessary to run Jetty on a different port other than the default one. We have
two ways to achieve that:
ff Adding an additional startup parameter, jetty.port. The startup command would
look like the following command:
java –Djetty.port=9999 –jar start.jar
www.it-ebooks.info
Apache Solr Configuration
10
ff Changing the jetty.xml file – to do that you need to change the following line:
<Set name="port"><SystemProperty name="jetty.port"
default="8983"/></Set>
To:
<Set name="port"><SystemProperty name="jetty.port"
default="9999"/></Set>
Buffer size is too small
Buffer overflow is a common problem when our queries are getting too long and too complex,
– for example, when we use many logical operators or long phrases. When the standard head
buffer is not enough you can resize it to meet your needs. To do that, you add the following
line to the Jetty connector in thejetty.xml file. Of course the value shown in the example
can be changed to the one that you need:
<Set name="headerBufferSize">32768</Set>
After adding the value, the connector definition should look more or less like the
following snippet:
<Call name="addConnector">
<Arg>
<New class="org.mortbay.jetty.bio.SocketConnector">
<Set name="port"><SystemProperty name="jetty.port" default="8080"/></
Set>
<Set name="maxIdleTime">50000</Set>
<Set name="lowResourceMaxIdleTime">1500</Set>
<Set name="headerBufferSize">32768</Set>
</New>
</Arg>
</Call>
Running Solr on Apache Tomcat
Sometimes you need to choose a servlet container other than Jetty. Maybe because your
client has other applications running on another servlet container, maybe because you just
don't like Jetty. Whatever your requirements are that put Jetty out of the scope of your interest,
the first thing that comes to mind is a popular and powerful servlet container – Apache
Tomcat. This recipe will give you an idea of how to properly set up and run Solr
in the Apache Tomcat environment.
www.it-ebooks.info
Chapter 1
11
Getting ready
First of all we need an Apache Tomcat servlet container. It can be found at the Apache Tomcat
website – http://tomcat.apache.org. I concentrated on the Tomcat Version 7.x because
at the time of writing of this book it was mature and stable. The version that I used during the
writing of this recipe was Apache Tomcat 7.0.29, which was the newest one at the time.
How to do it...
To run Solr on Apache Tomcat we need to follow these simple steps:
1. Firstly, you need to install Apache Tomcat. The Tomcat installation is beyond the
scope of this book so we will assume that you have already installed this servlet
container in the directory specified by the $TOMCAT_HOME system variable.
2. The second step is preparing the Apache Tomcat configuration files. To do that we
need to add the following inscription to the connector definition in the server.xml
configuration file:
URIEncoding="UTF-8"
The portion of the modified server.xml file should look like the following
code snippet:
<Connector port="8080" protocol="HTTP/1.1"
connectionTimeout="20000"
redirectPort="8443"
URIEncoding="UTF-8" />
3. The third step is to create a proper context file. To do that, create a solr.xml file
in the $TOMCAT_HOME/conf/Catalina/localhost directory. The contents of
the file should look like the following code:
<Context path="/solr" docBase="/usr/share/tomcat/webapps/solr.war"
debug="0" crossContext="true">
<Environment name="solr/home" type="java.lang.String" value="/
usr/share/solr/" override="true"/>
</Context>
4. The next thing is the Solr deployment. To do that we need the apache-solr-
4.0.0.war file that contains the necessary files and libraries to run Solr that
is to be copied to the Tomcat webapps directory and renamed solr.war.
5. The one last thing we need to do is add the Solr configuration files. The files that you
need to copy are files such as schema.xml, solrconfig.xml, and so on. Those
files should be placed in the directory specified by the solr/home variable (in our
case /usr/share/solr/). Please don't forget that you need to ensure the proper
directory structure. If you are not familiar with the Solr directory structure please take
a look at the example deployment that is provided with the standard Solr package.
www.it-ebooks.info
Apache Solr Configuration
12
6. Please remember to preserve the directory structure you'll see in the example
deployment, so for example, the /usr/share/solr directory should contain
the solr.xml (and in addition zoo.cfg in case you want to use SolrCloud)
file with the contents like so:
<?xml version="1.0" encoding="UTF-8" ?>
<solr persistent="true">
<cores adminPath="/admin/cores" defaultCoreName="collection1">
<core name="collection1" instanceDir="collection1" />
</cores>
</solr>
7. All the other configuration files should go to the /usr/share/solr/collection1/
conf directory (place the schema.xml and solrconfig.xml files there along with
any additional configuration files your deployment needs). Your cores may have other
names than the default collection1, so please be aware of that.
8. Now we can start the servlet container, by running the following command:
bin/catalina.sh start
9. In the log file you should see a message like this:
Info: Server startup in 3097 ms
10. To ensure that Solr is running properly, you can run a browser and point it to an
address where Solr should be visible, like the following:
http://localhost:8080/solr/
If you see the page with links to administration pages of each of the cores defined, that
means that your Solr is up and running.
How it works...
Let's start from the second step as the installation part is beyond the scope of this book.
As you probably know, Solr uses UTF-8 file encoding. That means that we need to ensure
that Apache Tomcat will be informed that all requests and responses made should use that
encoding. To do that, we modified the server.xml file in the way shown in the example.
The Catalina context file (called solr.xml in our example) says that our Solr application
will be available under the /solr context (the path attribute). We also specified the WAR
file location (the docBase attribute). We also said that we are not using debug (the debug
attribute), and we allowed Solr to access other context manipulation methods. The last thing
is to specify the directory where Solr should look for the configuration files. We do that by
adding the solr/home environment variable with the value attribute set to the path to
the directory where we have put the configuration files.
www.it-ebooks.info
Chapter 1
13
The solr.xml file is pretty simple – there should be the root element called solr. Inside
it there should be the cores tag (with the adminPath variable set to the address where
the Solr cores administration API is available and the defaultCoreName attribute describing
which is the default core). The cores tag is a parent for cores definition – each core should
have its own core tag with a name attribute specifying the core name and the instanceDir
attribute specifying the directory where the core-specific files will be available (such as the
conf directory).
The shell command that is shown starts Apache Tomcat. There are some other options of the
catalina.sh (or catalina.bat) script; the descriptions of these options are as follows:
ff stop: This stops Apache Tomcat
ff restart: This restarts Apache Tomcat
ff debug: This start Apache Tomcat in debug mode
ff run: This runs Apache Tomcat in the current window, so you can see the output on
the console from which you run Tomcat.
After running the example address in the web browser, you should see a Solr front page with
a core (or cores if you have a multicore deployment). Congratulations! You just successfully
configured and ran the Apache Tomcat servlet container with Solr deployed.
There's more...
There are some other tasks that are common problems when running Solr on Apache Tomcat.
Changing the port on which we see Solr running on Tomcat
Sometimes it is necessary to run Apache Tomcat on a different port other than 8080, which is
the default one. To do that, you need to modify the port variable of the connector definition
in the server.xml file located in the $TOMCAT_HOME/conf directory. If you would like your
Tomcat to run on port 9999, this definition should look like the following code snippet:
<Connector port="9999" protocol="HTTP/1.1"
connectionTimeout="20000"
redirectPort="8443"
URIEncoding="UTF-8" />
While the original definition looks like the following snippet:
<Connector port="8080" protocol="HTTP/1.1"
connectionTimeout="20000"
redirectPort="8443"
URIEncoding="UTF-8" />
www.it-ebooks.info
Apache Solr Configuration
14
Installing a standalone ZooKeeper
You may know that in order to run SolrCloud—the distributed Solr installation—you need to have
Apache ZooKeeper installed. Zookeeper is a centralized service for maintaining configurations,
naming, and provisioning service synchronization. SolrCloud uses ZooKeeper to synchronize
configuration and cluster states (such as elected shard leaders), and that's why it is crucial to
have a highly available and fault tolerant ZooKeeper installation. If you have a single ZooKeeper
instance and it fails then your SolrCloud cluster will crash too. So, this recipe will show you how
to install ZooKeeper so that it's not a single point of failure in your cluster configuration.
Getting ready
The installation instruction in this recipe contains information about installing ZooKeeper
Version 3.4.3, but it should be useable for any minor release changes of Apache ZooKeeper.
To download ZooKeeper please go to http://zookeeper.apache.org/releases.html.
This recipe will show you how to install ZooKeeper in a Linux-based environment. You also
need Java installed.
How to do it...
Let's assume that we decided to install ZooKeeper in the /usr/share/zookeeper
directory of our server and we want to have three servers (with IP addresses 192.168.1.1,
192.168.1.2, and 192.168.1.3) hosting the distributed ZooKeeper installation.
1. After downloading the ZooKeeper installation, we create the necessary directory:
sudo mkdir /usr/share/zookeeper
2. Then we unpack the downloaded archive to the newly created directory. We do that
on three servers.
3. Next we need to change our ZooKeeper configuration file and specify the servers that
will form the ZooKeeper quorum, so we edit the /usr/share/zookeeper/conf/
zoo.cfg file and we add the following entries:
clientPort=2181
dataDir=/usr/share/zookeeper/data
tickTime=2000
initLimit=10
syncLimit=5
server.1=192.168.1.1:2888:3888
server.2=192.168.1.2:2888:3888
server.3=192.168.1.3:2888:3888
www.it-ebooks.info
Chapter 1
15
4. And now, we can start the ZooKeeper servers with the following command:
/usr/share/zookeeper/bin/zkServer.sh start
5. If everything went well you should see something like the following:
JMX enabled by default
Using config: /usr/share/zookeeper/bin/../conf/zoo.cfg
Starting zookeeper ... STARTED
And that's all. Of course you can also add the ZooKeeper service to start automatically during
your operating system startup, but that's beyond the scope of the recipe and the book itself.
How it works...
Let's skip the first part, because creating the directory and unpacking the ZooKeeper server
there is quite simple. What I would like to concentrate on are the configuration values of the
ZooKeeper server. The clientPort property specifies the port on which our SolrCloud servers
should connect to ZooKeeper. The dataDir property specifies the directory where ZooKeeper
will hold its data. So far, so good right ? So now, the more advanced properties; the tickTime
property specified in milliseconds is the basic time unit for ZooKeeper. The initLimit
property specifies how many ticks the initial synchronization phase can take. Finally, the
syncLimit property specifies how many ticks can pass between sending the request and
receiving an acknowledgement.
There are also three additional properties present, server.1, server.2, and server.3.
These three properties define the addresses of the ZooKeeper instances that will form the
quorum. However, there are three values separated by a colon character. The first part is the
IP address of the ZooKeeper server, and the second and third parts are the ports used by
ZooKeeper instances to communicate with each other.
Clustering your data
After the release of Apache Solr 4.0, many users will want to leverage SolrCloud distributed
indexing and querying capabilities. It's not hard to upgrade your current cluster to SolrCloud,
but there are some things you need to take care of. With the help of the following recipe you
will be able to easily upgrade your cluster.
Getting ready
Before continuing further it is advised to read the Installing a standalone ZooKeeper
recipe in this chapter. It shows how to set up a ZooKeeper cluster in order to be ready
for production use.
www.it-ebooks.info
Apache Solr Configuration
16
How to do it...
In order to use your old index structure with SolrCloud, you will need to add the following
field to your fields definition (add the following fragment to the schema.xml file, to its
fields section):
<field name="_version_" type="long" indexed="true" stored="true"
multiValued="false"/>
Now let's switch to the solrconfig.xml file – starting with the replication handlers. First,
you need to ensure that you have the replication handler set up. Remember that you shouldn't
add master or slave specific configurations to it. So the replication handlers' configuration
should look like the following code:
<requestHandler name="/replication" class="solr.ReplicationHandler" />
In addition to that, you will need to have the administration panel handlers present, so the
following configuration entry should be present in your solrconfig.xml file:
<requestHandler name="/admin/" class="solr.admin.AdminHandlers" />
The last request handler that should be present is the real-time get handler, which should
be defined as follows (the following should also be added to the solrconfig.xml file):
<requestHandler name="/get" class="solr.RealTimeGetHandler">
<lst name="defaults">
<str name="omitHeader">true</str>
</lst>
</requestHandler>
The next thing SolrCloud needs in order to properly operate is the transaction log
configuration. The following fragment should be added to the solrconfig.xml file:
<updateLog>
<str name="dir">${solr.data.dir:}</str>
</updateLog>
The last thing is the solr.xml file. It should be pointing to the default cores administration
address – the cores tag should have the adminPath property set to the /admin/cores
value. The example solr.xml file could look like the following code:
<solr persistent="true">
<cores adminPath="/admin/cores" defaultCoreName="collection1"
host="localhost" hostPort="8983" zkClientTimeout="15000">
<core name="collection1" instanceDir="collection1" />
</cores>
</solr>
And that's all, your Solr instances configuration files are now ready to be used with SolrCloud.
www.it-ebooks.info
Chapter 1
17
How it works...
So now let's see why all those changes are needed in order to use our old configuration files
with SolrCloud.
The _version_ field is used by Solr to enable documents versioning and optimistic locking,
which ensures that you won't have the newest version of your document overwritten by
mistake. Because of that, SolrCloud requires the _version_ field to be present in your
index structure. Adding that field is simple – you just need to place another field definition
that is stored and indexed, and based on the long type. That's all.
As for the replication handler, you should remember not to add slave or master specific
configuration, only the simple request handler definition, as shown in the previous example.
The same applies to the administration panel handlers: they need to be available under the
default URL address.
The real-time get handler is responsible for getting the updated documents right away,
even if no commit or the softCommit command is executed. This handler allows Solr
(and also you) to retrieve the latest version of the document without the need for re-opening
the searcher, and thus even if the document is not yet visible during usual search operations.
The configuration is very similar to the usual request handler configuration – you need to
add a new handler with the name property set to /get and the class property set to solr.
RealTimeGetHandler. In addition to that, we want the handler to be omitting response
headers (the omitHeader property set to true).
One of the last things that is needed by SolrCloud is the transaction log, which enables realtime
get operations to be functional. The transaction log keeps track of all the uncommitted
changes and enables a real-time get handler to retrieve those. In order to turn on transaction
log usage, one should add the updateLog tag to the solrconfig.xml file and specify the
directory where the transaction log directory should be created (by adding the dir property as
shown in the example). In the configuration previously shown, we tell Solr that we want to use
the Solr data directory as the place to store the transaction log directory.
Finally, Solr needs you to keep the default address for the core administrative interface, so
you should remember to have the adminPath property set to the value shown in the example
(in the solr.xml file). This is needed in order for Solr to be able to manipulate cores.
Choosing the right directory implementation
One of the most crucial properties of Apache Lucene, and thus Solr, is the Lucene directory
implementation. The directory interface provides an abstraction layer for Lucene on all the
I/O operations. Although choosing the right directory implementation seems simple, it can
affect the performance of your Solr setup in a drastic way. This recipe will show you how to
choose the right directory implementation.
www.it-ebooks.info
Apache Solr Configuration
18
How to do it...
In order to use the desired directory, all you need to do is choose the right directory
factory implementation and inform Solr about it. Let's assume that you would like to use
NRTCachingDirectory as your directory implementation. In order to do that, you need to
place (or replace if it is already present) the following fragment in your solrconfig.xml file:
<directoryFactory name="DirectoryFactory" class="solr.
NRTCachingDirectoryFactory" />
And that's all. The setup is quite simple, but what directory factories are available to use?
When this book was written, the following directory factories were available:
ff solr.StandardDirectoryFactory
ff solr.SimpleFSDirectoryFactory
ff solr.NIOFSDirectoryFactory
ff solr.MMapDirectoryFactory
ff solr.NRTCachingDirectoryFactory
ff solr.RAMDirectoryFactory
So now let's see what each of those factories provide.
How it works...
Before we get into the details of each of the presented directory factories, I would like to
comment on the directory factory configuration parameter. All you need to remember is that
the name attribute of the directoryFactory tag should be set to DirectoryFactory
and the class attribute should be set to the directory factory implementation of your choice.
If you want Solr to make the decision for you, you should use solr.
StandardDirectoryFactory. This is a filesystem-based directory factory that tries
to choose the best implementation based on your current operating system and Java
virtual machine used. If you are implementing a small application, which won't use many
threads, you can use solr.SimpleFSDirectoryFactory which stores the index file
on your local filesystem, but it doesn't scale well with a high number of threads. solr.
NIOFSDirectoryFactory scales well with many threads, but it doesn't work well on
Microsoft Windows platforms (it's much slower), because of the JVM bug, so you should
remember that.
solr.MMapDirectoryFactory was the default directory factory for Solr for the 64-bit Linux
systems from Solr 3.1 till 4.0. This directory implementation uses virtual memory and a kernel
feature called mmap to access index files stored on disk. This allows Lucene (and thus Solr) to
directly access the I/O cache. This is desirable and you should stick to that directory if near
real-time searching is not needed.
www.it-ebooks.info
Chapter 1
19
If you need near real-time indexing and searching, you should use solr.
NRTCachingDirectoryFactory. It is designed to store some parts of the index
in memory (small chunks) and thus speed up some near real-time operations greatly.
The last directory factory, solr.RAMDirectoryFactory, is the only one that is not
persistent. The whole index is stored in the RAM memory and thus you'll lose your index after
restart or server crash. Also you should remember that replication won't work when using
solr.RAMDirectoryFactory. One would ask, why should I use that factory? Imagine a
volatile index for an autocomplete functionality or for unit tests of your queries' relevancy.
Just anything you can think of, when you don't need to have persistent and replicated data.
However, please remember that this directory is not designed to hold large amounts of data.
Configuring spellchecker to not use its own
index
If you are used to the way spellchecker worked in the previous Solr versions, you may
remember that it required its own index to give you spelling corrections. That approach
had some disadvantages, such as the need for rebuilding the index, and replication between
master and slave servers. With the Solr Version 4.0, a new spellchecker implementation was
introduced – solr.DirectSolrSpellchecker. It allowed you to use your main index to
provide spelling suggestions and didn't need to be rebuilt after every commit. So now, let's
see how to use that new spellchecker implementation in Solr.
How to do it...
First of all, let's assume we have a field in the index called title, in which we hold titles
of our documents. What's more, we don't want the spellchecker to have its own index and
we would like to use that title field to provide spelling suggestions. In addition to that, we
would like to decide when we want a spelling suggestion. In order to do that, we need to do
two things:
1. First, we need to edit our solrconfig.xml file and add the spellchecking
component, whose definition may look like the following code:
<searchComponent name="spellcheck" class="solr.
SpellCheckComponent">
<str name="queryAnalyzerFieldType">title</str>
<lst name="spellchecker">
<str name="name">direct</str>
<str name="field">title</str>
<str name="classname">solr.DirectSolrSpellChecker</str>
<str name="distanceMeasure">internal</str>
<float name="accuracy">0.8</float>
<int name="maxEdits">1</int>
www.it-ebooks.info
Apache Solr Configuration
20
<int name="minPrefix">1</int>
<int name="maxInspections">5</int>
<int name="minQueryLength">3</int>
<float name="maxQueryFrequency">0.01</float>
</lst>
</searchComponent>
2. Now we need to add a proper request handler configuration that will use the
previously mentioned search component. To do that, we need to add the following
section to the solrconfig.xml file:
<requestHandler name="/spell" class="solr.SearchHandler"
startup="lazy">
<lst name="defaults">
<str name="df">title</str>
<str name="spellcheck.dictionary">direct</str>
<str name="spellcheck">on</str>
<str name="spellcheck.extendedResults">true</str>
<str name="spellcheck.count">5</str>
<str name="spellcheck.collate">true</str>
<str name="spellcheck.collateExtendedResults">true</str>
</lst>
<arr name="last-components">
<str>spellcheck</str>
</arr>
</requestHandler>
3. And that's all. In order to get spelling suggestions, we need to run the following query:
/spell?q=disa
4. In response we will get something like the following code:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">5</int>
</lst>
<result name="response" numFound="0" start="0">
</result>
<lst name="spellcheck">
<lst name="suggestions">
<lst name="disa">
<int name="numFound">1</int>
<int name="startOffset">0</int>
<int name="endOffset">4</int>
<int name="origFreq">0</int>
<arr name="suggestion">
<lst>
<str name="word">data</str>
<int name="freq">1</int>
www.it-ebooks.info
Chapter 1
21
</lst>
</arr>
</lst>
<bool name="correctlySpelled">false</bool>
<lst name="collation">
<str name="collationQuery">data</str>
<int name="hits">1</int>
<lst name="misspellingsAndCorrections">
<str name="disa">data</str>
</lst>
</lst>
</lst>
</lst>
</response>
If you check your data folder you will see that there is not a single directory responsible
for holding the spellchecker index. So, now let's see how that works.
How it works...
Now let's get into some specifics about how the previous configuration works, starting
from the search component configuration. The queryAnalyzerFieldType property
tells Solr which field configuration should be used to analyze the query passed to the
spellchecker. The name property sets the name of the spellchecker which will be used in
the handler configuration later. The field property specifies which field should be used
as the source for the data used to build spelling suggestions. As you probably figured out,
the classname property specifies the implementation class, which in our case is solr.
DirectSolrSpellChecker, enabling us to omit having a separate spellchecker index.
The next parameters visible in the configuration specify how the Solr spellchecker should
behave and that is beyond the scope of this recipe (however, if you would like to read more
about them, please go to the following URL address: http://wiki.apache.org/solr/
SpellCheckComponent).
The last thing is the request handler configuration. Let's concentrate on all the properties
that start with the spellcheck prefix. First we have spellcheck.dictionary, which
in our case specifies the name of the spellchecking component we want to use (please
note that the value of the property matches the value of the name property in the search
component configuration). We tell Solr that we want the spellchecking results to be present
(the spellcheck property with the value set to on), and we also tell Solr that we want to see
the extended results format (spellcheck.extendedResults set to true). In addition to
the mentioned configuration properties, we also said that we want to have a maximum of five
suggestions (the spellcheck.count property), and we want to see the collation and its
extended results (spellcheck.collate and spellcheck.collateExtendedResults
both set to true).
www.it-ebooks.info
Apache Solr Configuration
22
There's more...
Let's see one more thing – the ability to have more than one spellchecker defined in a
request handler.
More than one spellchecker
If you would like to have more than one spellchecker handling your spelling suggestions you
can configure your handler to use multiple search components. For example, if you would like
to use search components (spellchecking ones) named word and better (you have to have
them configured), you could add multiple spellcheck.dictionary parameters to your
request handler. This is how your request handler configuration would look:
<requestHandler name="/spell" class="solr.SearchHandler"
startup="lazy">
<lst name="defaults">
<str name="df">title</str>
<str name="spellcheck.dictionary">direct</str>
<str name="spellcheck.dictionary">word</str>
<str name="spellcheck.dictionary">better</str>
<str name="spellcheck">on</str>
<str name="spellcheck.extendedResults">true</str>
<str name="spellcheck.count">5</str>
<str name="spellcheck.collate">true</str>
<str name="spellcheck.collateExtendedResults">true</str>
</lst>
<arr name="last-components">
<str>spellcheck</str>
</arr>
</requestHandler>
Solr cache configuration
As you may already know, caches play a major role in a Solr deployment. And I'm not talking
about some exterior cache – I'm talking about the three Solr caches:
ff Filter cache: This is used for storing filter (query parameter fq) results and mainly
enum type facets
ff Document cache: This is used for storing Lucene documents which hold stored fields
ff Query result cache: This is used for storing results of queries
www.it-ebooks.info
Chapter 1
23
There is a fourth cache – Lucene's internal cache – which is a field cache, but you can't
control its behavior. It is managed by Lucene and created when it is first used by the
Searcher object.
With the help of these caches we can tune the behavior of the Solr searcher instance. In this
task we will focus on how to configure your Solr caches to suit most needs. There is one thing
to remember – Solr cache sizes should be tuned to the number of documents in the index,
the queries, and the number of results you usually get from Solr.
Getting ready
Before you start tuning Solr caches you should get some information about your Solr instance.
That information is as follows:
ff Number of documents in your index
ff Number of queries per second made to that index
ff Number of unique filter (the fq parameter) values in your queries
ff Maximum number of documents returned in a single query
ff Number of different queries and different sorts
All these numbers can be derived from Solr logs.
How to do it...
For the purpose of this task I assumed the following numbers:
ff Number of documents in the index: 1.000.000
ff Number of queries per second: 100
ff Number of unique filters: 200
ff Maximum number of documents returned in a single query: 100
ff Number of different queries and different sorts: 500
Let's open the solrconfig.xml file and tune our caches. All the changes should be made in
the query section of the file (the section between <query> and </query> XML tags).
1. First goes the filter cache:
<filterCache
class="solr.FastLRUCache"
size="200"
initialSize="200"
autowarmCount="100"/>
www.it-ebooks.info
Apache Solr Configuration
24
2. Second goes the query result cache:
<queryResultCache
class="solr.FastLRUCache"
size="500"
initialSize="500"
autowarmCount="250"/>
3. Third we have the document cache:
<documentCache
class="solr.FastLRUCache"
size="11000"
initialSize="11000" />
Of course the above configuration is based on the example values.
4. Further let's set our result window to match our needs – we sometimes need to
get 20–30 more results than we need during query execution. So we change the
appropriate value in the solrconfig.xml file to something like this:
<queryResultWindowSize>200</queryResultWindowSize>
And that's all!
How it works...
Let's start with a little bit of explanation. First of all we use the solr.FastLRUCache
implementation instead of solr.LRUCache. So the called FastLRUCache tends to be faster
when Solr puts less into caches and gets more. This is the opposite to LRUCache which tends
to be more efficient when there are more puts than gets operations. That's why we use it.
This colud be the first time you see cache configuration, so I'll explain what cache configuration
parameters mean:
ff class: You probably figured that out by now. Yes, this is the class implementing the
cache.
ff size: This is the maximum size that the cache can have.
ff initialSize: This is the initial size that the cache will have.
ff autowarmCount: This is the number of cache entries that will be copied to the
new instance of the same cache when Solr invalidates the Searcher object – for
example, during a commit operation.
As you can see, I tend to use the same number of entries for size and initialSize, and
half of those values for autowarmCount. The size and initialSize properties can be
set to the same size in order to avoid the underlying Java object resizing, which consumes
additional processing time.
www.it-ebooks.info
Chapter 1
25
There is one thing you should be aware of. Some of the Solr caches (documentCache
actually) operate on internal identifiers called docid. Those caches cannot be automatically
warmed. That's because docid is changing after every commit operation and thus copying
docid is useless.
Please keep in mind that the settings for the size of the caches is usually good for the
moment you set them. But during the life cycle of your application your data may change,
your queries may change, and your user's behavior may, and probably will change. That's why
you should keep track of the cache usage with the use of Solr administration pages, JMX, or
a specialized software such as Scalable Performance Monitoring from Sematext (see more
at http://sematext.com/spm/index.html), and see how the utilization of each of the
caches changes in time and makes proper changes to the configuration.
There's more...
There are a few additional things that you should know when configuring your caches.
Using a filter cache with faceting
If you use the term enumeration faceting method (parameter facet.method=enum)
Solr will use the filter cache to check each term. Remember that if you use this method,
your filter cache size should have at least the size of the number of unique facet values
in all your faceted fields. This is crucial and you may experience performance loss if this
cache is not configured the right way.
When we have no cache hits
When your Solr instance has a low cache hit ratio you should consider not using caches at all
(to see the hit ratio you can use the administration pages of Solr). Cache insertion is not free
– it costs CPU time and resources. So if you see that you have a very low cache hit ratio, you
should consider turning your caches off – it may speed up your Solr instance. Before you turn
off the caches please ensure that you have the right cache setup – a small hit ratio can be a
result of bad cache configuration.
When we have more "puts" than "gets"
When your Solr instance uses put operations more than get operations you should consider
using the solr.LRUCache implementation. It's confirmed that this implementation behaves
better when there are more insertions into the cache than lookups.
Filter cache
This cache is responsible for holding information about the filters and the documents that
match the filter. Actually this cache holds an unordered set of document IDs that match the
filter. If you don't use the faceting mechanism with a filter cache, you should at least set its
size to the number of unique filters that are present in your queries. This way it will be possible
for Solr to store all the unique filters with their matching document IDs and this will speed up
the queries that use filters.
www.it-ebooks.info
Apache Solr Configuration
26
Query result cache
The query result cache holds the ordered set of internal IDs of documents that match the given
query and the sort specified. That's why if you use caches you should add as many filters as you
can and keep your query (the q parameter) as clean as possible. For example, pass only the
search box content of your search application to the query parameter. If the same query will be
run more than once and the cache has enough capacity to hold the entry, it will be used to give
the IDs of the documents that match the query, thus a no Lucene (Solr uses Lucene to index
and query data that is indexed) query will be made saving the precious I/O operation for the
queries that are not in the cache – this will boost up your Solr instance performance.
The maximum size of this cache that I tend to set is the number of unique queries and their
sorts that are handled by my Solr in the time between the Searcher object's invalidation.
This tends to be enough in most cases.
Document cache
The document cache holds the Lucene documents that were fetched from the index. Basically,
this cache holds the stored fields of all the documents that are gathered from the Solr index.
The size of this cache should always be greater than the number of concurrent queries multiplied
by the maximum results you get from Solr. This cache can't be automatically warmed – that is
because every commit is changing the internal IDs of the documents. Remember that the cache
can be memory consuming in case you have many stored fields, so there will be times when you
just have to live with evictions.
Query result window
The last thing is the query result window. This parameter tells Solr how many documents
to fetch from the index in a single Lucene query. This is a kind of super set of documents
fetched. In our example, we tell Solr that we want the maximum of one hundred documents
as a result of a single query. Our query result window tells Solr to always gather two hundred
documents. Then when we need some more documents that follow the first hundred they
will be fetched from the cache, and therefore we will be saving our resources. The size of the
query result window is mostly dependent on the application and how it is using Solr. If you
tend to do a lot of paging, you should consider using a higher query result window value.
You should remember that the size of caches shown in this task is not
final, and you should adapt them to your application needs. The values and
the method of their calculation should only be taken as a starting point to
further observation and optimization of the process. Also, please remember
to monitor your Solr instance memory usage as using caches will affect the
memory that is used by the JVM.
www.it-ebooks.info
Chapter 1
27
See also
There is another way to warm your caches if you know the most common queries that are sent
to your Solr instance – auto-warming queries. Please refer to the Improving Solr performance
right after a startup or commit operation recipe in Chapter 6, Improving Solr Performance.
For information on how to cache whole pages of results please refer to the Caching whole
result pages recipe in Chapter 6, Improving Solr Performance.
How to fetch and index web pages
There are many ways to index web pages. We could download them, parse them, and index
them with the use of Lucene and Solr. The indexing part is not a problem, at least in most
cases. But there is another problem – how to fetch them? We could possibly create our own
software to do that, but that takes time and resources. That's why this recipe will cover how
to fetch and index web pages using Apache Nutch.
Getting ready
For the purpose of this task we will be using Version 1.5.1 of Apache Nutch. To download the
binary package of Apache Nutch, please go to the download section of http://nutch.
apache.org.
How to do it...
Let's assume that the website we want to fetch and index is http://lucene.apache.org.
1. First of all we need to install Apache Nutch. To do that we just need to extract the
downloaded archive to the directory of our choice; for example, I installed it in the
directory /usr/share/nutch. Of course this is a single server installation and it
doesn't include the Hadoop filesystem, but for the purpose of the recipe it will be
enough. This directory will be referred to as $NUTCH_HOME.
2. Then we'll open the file $NUTCH_HOME/conf/nutch-default.xml and set
the value http.agent.name to the desired name of your crawler (we've taken
SolrCookbookCrawler as a name). It should look like the following code:
<property>
<name>http.agent.name</name>
<value>SolrCookbookCrawler</value>
<description>HTTP 'User-Agent' request header.</description>
</property>
www.it-ebooks.info
Apache Solr Configuration
28
3. Now let's create empty directories called crawl and urls in the $NUTCH_HOME
directory. After that we need to create the seed.txt file inside the created urls
directory with the following contents:
http://lucene.apache.org
4. Now we need to edit the $NUTCH_HOME/conf/crawl-urlfilter.txt file.
Replace the +.at the bottom of the file with +^http://([a-z0-9]*\.)*lucene.
apache.org/. So the appropriate entry should look like the following code:
+^http://([a-z0-9]*\.)*lucene.apache.org/
One last thing before fetching the data is Solr configuration.
5. We start with copying the index structure definition file (called schema-solr4.
xml) from the $NUTCH_HOME/conf/ directory to your Solr installation configuration
directory (which in my case was /usr/share/solr/collection1/conf/).
We also rename the copied file to schema.xml.
We also create an empty stopwords_en.txt file or we use the one provided with Solr
if you want stop words removal.
Now we need to make two corrections to the schema.xml file we've copied:
ff The first one is the correction of the version attribute in the schema tag. We need
to change its value from 1.5.1 to 1.5, so the final schema tag would look like this:
<schema name="nutch" version="1.5.1">
ff Then we change the boost field type (in the same schema.xml file) from string
to float, so the boost field definition would look like this:
<field name="boost" type="float" stored="true" indexed="false"/>
Now we can start crawling and indexing by running the following command from the $NUTCH_
HOME directory:
bin/nutch crawl urls -solr http://localhost:8983/solr/ -depth 3 -topN 50
Depending on your Internet connection and your machine configuration you should finally see
a message similar to the following one:
crawl finished: crawl-20120830171434
This means that the crawl is completed and the data was indexed to Solr.
www.it-ebooks.info
Chapter 1
29
How it works...
After installing Nutch and Solr, the first thing we did was set our crawler name. Nutch does
not allow empty names so we must choose one. The file nutch-default.xml defines more
properties than the mentioned ones, but at this time we only need to know about that one.
In the next step, we created two directories; one (crawl) which will hold the crawl data and
the second one (urls) to store the addresses we want to crawl. The contents of the seed.
txt file we created contains addresses we want to crawl, one address per line.
The crawl-urlfilter.txt file contains information about the filters that will be used to
check the URLs that Nutch will crawl. In the example, we told Nutch to accept every URL that
begins with http://lucene.apache.org.
The schema.xml file we copied from the Nutch configuration directory is prepared to be used
when Solr is used for indexing. But the one for Solr 4.0 is a bit buggy, at least in Nutch 1.5.1
distribution, and that's why we needed to make the changes previously mentioned.
We finally came to the point where we ran the Nutch command. We specified that we wanted
to store the crawled data in the crawl directory (first parameter), and the addresses to crawl
data from are in the urls directory (second parameter). The –solr switch lets you specify
the address of the Solr server that will be responsible for the indexing crawled data and is
mandatory if you want to get the data indexed with Solr. We decided to index the data to Solr
installed at the same server. The –depth parameter specifies how deep to go after the links
defined. In our example, we defined that we want a maximum of three links from the main
page. The –topN parameter specifies how many documents will be retrieved from each level,
which we defined as 50.
There's more...
There is one more thing worth knowing when you start a journey in the land of Apache Nutch.
Multiple thread crawling
The crawl command of the Nutch command-line utility has another option – it can
be configured to run crawling with multiple threads. To achieve that you add the
following parameter:
-threads N
So if you would like to crawl with 20 threads you should run the crawl command like sot:
bin/nutch crawl crawl/nutch/site -dir crawl -depth 3 -topN 50 –threads 20
www.it-ebooks.info
Apache Solr Configuration
30
See also
If you seek more information about Apache Nutch please refer to the http://nutch.
apache.org and go to the Wiki section.
How to set up the extracting request
handler
Sometimes indexing prepared text files (such as XML, CSV, JSON, and so on) is not enough.
There are numerous situations where you need to extract data from binary files. For example,
one of my clients wanted to index PDF files – actually their contents. To do that, we either
need to parse the data in some external application or set up Solr to use Apache Tika. This
task will guide you through the process of setting up Apache Tika with Solr.
How to do it...
In order to set up the extracting request handler, we need to follow these simple steps:
1. First let's edit our Solr instance solrconfig.xml and add the following
configuration:
<requestHandler name="/update/extract" class="solr.extraction.
ExtractingRequestHandler" >
<lst name="defaults">
<str name="fmap.content">text</str>
<str name="lowernames">true</str>
<str name="uprefix">attr_</str>
<str name="captureAttr">true</str>
</lst>
</requestHandler>
2. Next create the extract folder anywhere on your system (I created that folder in the
directory where Solr is installed), and place the apache-solr-cell-4.0.0.jar
from the dist directory (you can find it in the Solr distribution archive). After that you
have to copy all the libraries from the contrib/extraction/lib/ directory to the
extract directory you created before.
3. In addition to that, we need the following entries added to the solrconfig.xml file:
<lib dir="../../extract" regex=".*\.jar" />
www.it-ebooks.info
Chapter 1
31
And that's actually all that you need to do in terms of configuration.
To simplify the example, I decided to choose the following index structure (place it in the
fields section in your schema.xml file):
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
<field name="text" type="text_general" indexed="true" stored="true"/>
<dynamicField name="attr_*" type="text_general" indexed="true"
stored="true" multiValued="true"/>
To test the indexing process, I've created a PDF file book.pdf using PDFCreator which
contained the following text only: This is a Solr cookbook. To index that file, I've
used the following command:
curl "http://localhost:8983/solr/update/extract?literal.id=1&commit=true"
-F "myfile=@book.pdf"
You should see the following response:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">578</int>
</lst>
</response>
How it works...
Binary file parsing is implemented using the Apache Tika framework. Tika is a toolkit for
detecting and extracting metadata and structured text from various types of documents,
not only binary files but also HTML and XML files. To add a handler that uses Apache Tika,
we need to add a handler based on the solr.extraction.ExtractingRequestHandler
class to our solrconfig.xml file as shown in the example.
In addition to the handler definition, we need to specify where Solr should look for the
additional libraries we placed in the extract directory that we created. The dir attribute
of the lib tag should be pointing to the path of the created directory. The regex attribute
is the regular expression telling Solr which files to load.
www.it-ebooks.info
Apache Solr Configuration
32
Let's now discuss the default configuration parameters. The fmap.content parameter tells
Solr what field content of the parsed document should be extracted. In our case, the parsed
content will go to the field named text. The next parameter lowernames is set to true;
this tells Solr to lower all names that come from Tika and have them lowercased. The next
parameter, uprefix, is very important. It tells Solr how to handle fields that are not defined
in the schema.xml file. The name of the field returned from Tika will be added to the value of
the parameter and sent to Solr. For example, if Tika returned a field named creator, and we
don't have such a field in our index, then Solr would try to index it under a field named attrcreator
which is a dynamic field. The last parameter tells Solr to index Tika XHTML elements
into separate fields named after those elements.
Next we have a command that sends a PDF file to Solr. We are sending a file to the /update/
extract handler with two parameters. First we define a unique identifier. It's useful to
be able to do that during document sending because most of the binary document won't
have an identifier in its contents. To pass the identifier we use the literal.id parameter.
The second parameter we send to Solr is the information to perform the commit right after
document processing.
See also
To see how to index binary files please refer to the Indexing PDF files and Extracting metadata
from binary files recipes in Chapter 2, Indexing Your Data.
Changing the default similarity
implementation
Most of the time, the default way of calculating the score of your documents is what you need.
But sometimes you need more from Solr; that's just the standard behavior. Let's assume that
you would like to change the default behavior and use a different score calculation algorithm
for the description field of your index. The current version of Solr allows you to do that and
this recipe will show you how to leverage this functionality.
Getting ready
Before choosing one of the score calculation algorithms available in Solr, it's good to read
a bit about them. The description of all the algorithms is beyond the scope of the recipe and
the book, but I would suggest going to the Solr Wiki pages (or look at Javadocs) and read the
basic information about available implementations.
www.it-ebooks.info
Chapter 1
33
How to do it...
For the purpose of the recipe let's assume we have the following index structure (just add the
following entries to your schema.xml file to the fields section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text_general" indexed="true" stored="true"/>
<field name="description" type="text_general_dfr" indexed="true"
stored="true" />
The string and text_general types are available in the default schema.xml file provided
with the example Solr distribution. But we want DFRSimilarity to be used to calculate the
score for the description field. In order to do that, we introduce a new type, which is defined
as follows (just add the following entries to your schema.xml file to the types section):
<fieldType name="text_general_dfr" class="solr.TextField"
positionIncrementGap="100">
<analyzer type="index">
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.StopFilterFactory" ignoreCase="true"
words="stopwords.txt" enablePositionIncrements="true" />
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
<analyzer type="query">
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.StopFilterFactory" ignoreCase="true"
words="stopwords.txt" enablePositionIncrements="true" />
<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
ignoreCase="true" expand="true"/>
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
<similarity class="solr.DFRSimilarityFactory">
<str name="basicModel">P</str>
<str name="afterEffect">L</str>
<str name="normalization">H2</str>
<float name="c">7</float>
</similarity>
</fieldType>
Also, to use per-field similarity we have to add the following entry to your schema.xml file:
<similarity class="solr.SchemaSimilarityFactory"/>
And that's all. Now let's have a look and see how that works.
www.it-ebooks.info
Apache Solr Configuration
34
How it works...
The index structure presented in this recipe is pretty simple as there are only three fields.
The one thing we are interested in is that the description field uses our own custom
field type called text_general_dfr.
The thing we are mostly interested in is the new field type definition called text_general_
dfr. As you can see, apart from the index and query analyzer there is an additional section
– similarity. It is responsible for specifying which similarity implementation to use to
calculate the score for a given field. You are probably used to defining field types, filters,
and other things in Solr, so you probably know that the class attribute is responsible for
specifying the class implementing the desired similarity implementation which in our case
is solr.DFRSimilarityFactory. Also, if there is a need, you can specify additional
parameters that configure the behavior of your chosen similarity class. In the previous
example, we've specified four additional parameters: basicModel, afterEffect,
normalization, and c, which all define the DFRSimilarity behavior.
solr.SchemaSimilarityFactory is required to be able to specify the similarity
for each field.
There's more...
In addition to per-field similarity definition, you can also configure the global similarity:
Changing the global similarity
Apart from specifying the similarity class on a per-field basis, you can choose any other
similarity than the default one in a global way. For example, if you would like to use
BM25Similarity as the default one, you should add the following entry to your
schema.xml file:
<similarity class="solr.BM25SimilarityFactory"/>
As well as with the per-field similarity, you need to provide the name of the factory class
that is responsible for creating the appropriate similarity class.
www.it-ebooks.info
2
Indexing Your Data
In this chapter, we will cover:
ff Indexing PDF files
ff Generating unique fields automatically
ff Extracting metadata from binary files
ff How to properly configure Data Import Handler with JDBC
ff Indexing data from a database using Data Import Handler
ff How to import data using Data Import Handler and delta query
ff How to use Data Import Handler with the URL data source
ff How to modify data while importing with Data Import Handler
ff Updating a single field of your document
ff Handling multiple currencies
ff Detecting the document language
ff Optimizing your primary key field indexing
Introduction
Indexing data is one of the most crucial things in every Lucene and Solr deployment. When
your data is not indexed properly your search results will be poor. When the search results
are poor, it's almost certain the users will not be satisfied with the application that uses Solr.
That's why we need our data to be prepared and indexed as well as possible.
www.it-ebooks.info
Indexing Your Data
36
On the other hand, preparing data is not an easy task. Nowadays we have more and more
data floating around. We need to index multiple formats of data from multiple sources.
Do we need to parse the data manually and prepare the data in XML format? The answer is
no – we can let Solr do that for us. This chapter will concentrate on the indexing process and
data preparation beginning from how to index data that is a binary PDF file, teaching how to
use the Data Import Handler to fetch data from database and index it with Apache Solr, and
finally describing how we can detect the document's language during indexing.
Indexing PDF files
Imagine that the library on the corner that we used to go to wants to expand its collection and
make it available for the wider public though the World Wide Web. It asked its book suppliers
to provide sample chapters of all the books in PDF format so they can share it with the online
users. With all the samples provided by the supplier came a problem – how to extract data for
the search box from more than 900 thousand PDF files. Solr can do it with the use of Apache
Tika. This recipe will show you how to handle such a task.
Getting ready
Before you start getting deeper into the task, please refer to the How to set up the extracting
request handler recipe in Chapter 1, Apache Solr Configuration, which will guide you through
the process of configuring Solr to use Apache Tika. We will use the same index structure
and Solr configuration presented in that recipe, and I assume you already have Solr properly
configured (according to the mentioned recipe) and ready to work.
How to do it...
To test the indexing process I've created a PDF file book.pdf using PDFCreator
(http://sourceforge.net/projects/pdfcreator/) which contained the
following text only: This is a Solr cookbook.. To index that file I've used the
following command:
curl "http://localhost:8983/solr/update/extract?literal.id=1&commit=true"
-F "myfile=@cookbook.pdf"
You should then see the following response:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">578</int>
</lst>
</response>
www.it-ebooks.info
Chapter 2
37
To see what was indexed I've run the following within a web browser:
http://localhost:8983/solr/select/?q=text:solr
In return I've got:
<?xml version="1.0" encoding="UTF-8"?>
<response>
…
<result name="response" numFound="1" start="0">
<doc>
<arr name="attr_created"><str>Thu Oct 21 16:11:51 CEST 2010</
str></arr>
<arr name="attr_creator"><str>PDFCreator Version 1.0.1</str></arr>
<arr name="attr_producer"><str>GPL Ghostscript 8.71</str></arr>
<arr name="attr_stream_content_type"><str>application/octetstream</
str></arr>
<arr name="attr_stream_name"><str>cookbook.pdf</str></arr>
<arr name="attr_stream_size"><str>3209</str></arr>
<arr name="attr_stream_source_info"><str>myfile</str></arr>
<str name="author">Gr0</str>
<arr name="content_type"><str>application/pdf</str></arr>
<str name="id">1</str>
<str name="keywords"/>
<date name="last_modified">2010-10-21T14:11:51Z</date>
<str name="subject"/>
<arr name="title"><str>cookbook</str></arr>
</doc>
</result>
</response>
How it works...
The curl command we used sends a PDF file to Solr. We are sending a file to the /update/
extract handler along with two parameters. It's useful to be able to do that during document
sending because most of the binary documents won't have an identifier in its contents. To
pass the identifier we use the literal.id parameter. The second parameter we send asks
Solr to perform the commit operation right after document processing.
The test file I've created, for the purpose of the recipe, contained a simple sentence:
"This is a Solr cookbook".
Remember the contents of the PDF file I created? It contained the word "Solr". That's why
I asked Solr to give me documents which contain the word "Solr" in a field named text.
www.it-ebooks.info
Indexing Your Data
38
In response, I got one document which matched the given query. To simplify the example,
I removed the response header part. As you can see in the response there were a few fields
that were indexed dynamically – their names start with attr_. Those fields contained
information about the file such as the size, the application that created it, and so on.
As we can see, we have our identifier indexed as we wished, and some other fields that
were present in the schema.xmlfile that Apache Tika could parse and return to Solr.
Generating unique fields automatically
Imagine you have an application that crawls the web and index documents found during
that crawl. The problem is that for some particular reason you can't set the document
identifier during indexing, and you would like Solr to generate one for you. This recipe
will help you, if you faced a similar problem.
How to do it...
The following steps will help you to generate unique fields automatically:
1. First let's create our index structure by adding the following entries to the schema.
xmlfields section:
<field name="id" type="uuid" indexed="true" stored="true"
default="NEW" multiValued="false"/>
<field name="name" type="text_general" indexed="true"
stored="true"/>
<field name="text" type="text_general" indexed="true"
stored="true"/>
2. In addition to that, we need to define the uuid field type by adding the following entry
to the types section of our schema.xml file:
<fieldType name="uuid" class="solr.UUIDField" indexed="true" />
3. In addition to that, we must remove the unique field definition, because Solr doesn't
allow using a unique field with the default="NEW" configuration, so the following
needs to be removed:
<uniqueKey>id</uniqueKey>
4. And now, let's try to index a document without an id field, for example one like this:
<add>
<doc>
<field name="name">Test name</field>
<field name="text">Test text contents</field>
</doc>
</add>
www.it-ebooks.info
Chapter 2
39
In order to see if Solr generated an identifier for the document, let's run the following query:
http://localhost:8983/solr/select?q=*:*&indent=true
The response will be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="indent">true</str>
<str name="q">*:*</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="name">Test name</str>
<str name="text">Test text contents</str>
<str name="id">b6f17c35-e5ad-4a09-b799-71580ca6be8a</str>
</doc>
</result>
</response>
As you can see in the response, our document had one additional field we didn't add manually
– the id field, which is what we wanted to have.
How it works...
The idea is quite simple – we let Solr generate the id field for us. To do that, we defined
the id field to be based on the uuid field type, and to have a default value of new
(default="NEW"). By doing this we tell Solr that we want that kind of behavior. If you
look at the uuid field type, you can see that it is a simple type definition based on solr.
UUIDField. Nothing complicated.
Having your document's identifiers generated automatically is handy in some cases, but it
also comes with some restrictions from Solr and its components. One of the issues is that
you can't have the unique field defined, and because of that, the elevation component won't
work. Of course that's only an example. But if your application doesn't know the identifiers of
the documents and can't generate them, then using solr.UUIDField is one of the ways of
having document identifiers for your indexed documents.
www.it-ebooks.info
Indexing Your Data
40
Extracting metadata from binary files
Suppose that our current client has a video and music store. Not the e-commerce one,
just the regular one – just around the corner. And now he wants to expand his business
to e-commerce. He wants to sell the products online. But his IT department said that
this will be tricky – because they need to hire someone to fill up the database with the
product names and their metadata. And that is the place where you come in and tell
them that you can extract titles and authors from the MP3 files that are available as
samples.Now let's see how that can be achieved.
Getting ready
Before you start getting deeper into the task, please refer to the How to set up the extracting
request handler recipe in Chapter 1, Apache Solr Configuration, which will guide you through
the process of configuring Solr to use Apache Tika.
How to do it...
1. Let's start by defining an index structure in the file schema.xml. The field definition
section should look like the following code:
<field name="id" type="string" indexed="true" stored="true"
required="true"/>
<field name="author" type="string" indexed="true" stored="true"
multiValued="true"/>
<field name="title" type="text" indexed="true" stored="true"/>
<dynamicField name="ignored_*" type="string" indexed="false"
stored="false" multiValued="true"/>
2. Now let's get the solrconfig.xml file ready:
<requestHandler name="/update/extract" class="solr.extraction.
ExtractingRequestHandler">
<lst name="defaults">
<str name="lowernames">true</str>
<str name="uprefix">ignored_</str>
<str name="captureAttr">true</str>
</lst>
</requestHandler>
3. Now we can start sending the documents to Solr. To do that, let's run the
following command:
curl "http://localhost:8983/solr/update/extract?literal.
id=1&commit=true" -F "myfile=@sample.mp3"
www.it-ebooks.info
Chapter 2
41
4. Let's check how the document was indexed. To do that type a query like the following
to your web browser:
http://localhost:8983/solr/select/?q=title:207
As a result I've got the following document:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
<str name="q">title:207</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="author">Armin Van Buuren</str>
<str name="id">1</str>
<str name="title">Desiderium 207 (Feat Susana)</str>
</doc>
</result>
</response>
So it seems that everything went well.
How it works...
First we define an index structure that will suit our needs. I decided that besides the unique
ID, I need to store the title and author name. We also defined a dynamic field called ignored
to handle the data we don't want to index (not indexed and not stored).
The next step is to define a new request handler to handle our updates, as you already
know. We also added a few default parameters to define our handler behavior. In our case
the parameter uprefix tells Solr to index all unknown fields to the dynamic field whose
name begins with ignored_, thus the additional data will not be visible in the index.
The last parameter tells Solr to index Tika XHTML elements into separate fields named
after those elements.
Next we have a command that sends an MP3 file to Solr. We are sending a file to the /
update/extract handler with two parameters. First we define a unique identifier and
pass that identifier to Solr using the literal.id parameter. The second parameter we
send to Solr is information to perform a commit right after document processing.
www.it-ebooks.info
Indexing Your Data
42
The query is a simple one, so I'll skip commenting on this part.
The last listing is an XML with Solr response. As you can see, there are only fields that are
explicitly defined in schema.xml – no dynamic fields. Solr and Tika managed to extract the
name and author of the file.
See also
ff If you want to index other types of binary files please refer to the Indexing PDF files
recipe in this chapter.
How to properly configure Data Import
Handler with JDBC
One of our clients is having a problem. His database of users grew to such size that even
the simple SQL select statement is taking too much time, and he seeks how to improve the
search time. Of course he heard about Solr but he doesn't want to generate XML or any other
data format and push it to Solr; he would like the data to be fetched. What can we do about
it? Well there is one thing – we can use one of the contribute modules of Solr, Data Import
Handler. This task will show you how to configure the basic setup of Data Import Handler and
how to use it.
How to do it...
1. First of all, copy the appropriate libraries that are required to use Data Import
Handler. So, let's create the dih folder anywhere on your system (I created it in the
directory where Solr is installed), and place apache-solr-dataimporthandler-
4.0.0.jar and apache-solr-dataimporthandler-extras-4.0.0.jar from
the Solr distribution dist directory in the folder. In addition to that, we need the
following entry to be added to the solrconfig.xml file:
<lib dir="../../dih" regex=".*\.jar" />
2. Next we need to modify the solrconfig.xml file. You should add an entry like the
following code:
<requestHandler name="/dataimport" class="org.apache.solr.handler.
dataimport.DataImportHandler">
<lst name="defaults">
<str name="config">db-data-config.xml</str>
</lst>
</requestHandler>
www.it-ebooks.info
Chapter 2
43
3. Now we will create the db-data-config.xml file that is responsible for the Data
Import Handler configuration. It should have contents like the following example:
<dataConfig>
<dataSource driver="org.postgresql.Driver"
url="jdbc:postgresql://localhost:5432/users" user="users"
password="secret" />
<document>
<entity name="user" query="SELECT user_id, user_name from
users">
<field column="user_id" name="id" />
<field column="user_name" name="name" />
<entity name="user_desc" query="select desc from users_
description where user_id=${user.user_id}">
<field column="description" name="description" />
</entity>
</entity>
</document>
</dataConfig></dataConfig>
If you want to use other database engines, please change the driver, url,
and user and password attributes.
4. Now, let's create a sample index structure. To do that we need to modify the fields
section of the schema.xml file to something like the following snippet:
<field name="id" type="string" indexed="true" stored="true"
required="true"/>
<field name="name" type="text" indexed="true" stored="true" />
<field name="user_desc" type="text" indexed="true" stored="true"/>
<field name="description" type="text" indexed="true"
stored="true"/>
5. One more thing before the indexing – you should copy an appropriate JDBC driver
to the lib directory of your Solr installation or the dih directory we created before.
You can get the library for PostgreSQL here http://jdbc.postgresql.org/
download.html.
6. Now we can start indexing. Run the following query to Solr:
http://localhost:8983/solr/dataimport?command=full-import
As you may know, the HTTP protocol is asynchronous, and thus you won't be updated on how
the process of indexing is going. To check the status of the indexing process, you can run the
command once again.
And that's how we configure Data Import Handler.
www.it-ebooks.info
Indexing Your Data
44
How it works...
First we have a solrconfig.xml part which actually defines a new request handler, Data
Import Handler, to be used by Solr. The <str name="config"> XML tag specifies the name
of the Data Import Handler configuration file.
The second listing is the actual configuration of Data Import Handler. I used the JDBC
source connection sample to illustrate how to configure Data Import Handler. The contents
of this configuration file start with the root tag named dataConfig which is followed by
a second tag defining a data source and named dataSource. In the example, I used the
PostgreSQL database and thus the JDBC driver is org.postgresql.Driver. We also
define the database connection URL (attribute named url), and the database credentials
(attributes user and password).
Next we have a document definition – a tag named document. This is the section containing
information about the document that will be sent to Solr. The document definition is made of
database queries – the entities.
The entity is defined by a name (the name attribute) and a SQL query (the query attribute).
The entity name can be used to reference values in sub-queries – you can see an example
of such a behavior in the second entity named user_desc. As you may already have noticed,
entities can be nested to handle sub-queries. The SQL query is there to fetch the data from
the database and use it to fill the entity variables which will be indexed.
After the entity comes the mapping definition. There is a single field tag for every column
returned by a query, but that is not a must – Data Import Handler can guess what the
mapping is (for example, where the entity field name matches the column name), but I
tend to use mappings because I find it easier to maintain. But let's get back to fields. The
field tag is defined by two attributes: column which is the column name returned by a
query, and name which is the field to which the data will be written.
Next we have a Solr query to start the indexing process. There are actually five commands
that can be run:
ff /dataimport: This will return the actual status.
ff /dataimport?command=full-import: This command will start the full import
process. Remember that the default behavior is to delete the index contents at
the beginning.
ff /dataimport?command=delta-import: This command will start the
incremental indexing process.
ff /dataimport?command=reload-config: This command will force
a configuration reload.
ff /dataimport?command=abort: This command will stop the indexing process.
www.it-ebooks.info
Chapter 2
45
There's more...
If you don't want to delete the index contents at the start of the full indexing using Data
Import Handler, add the clean=false parameter to your query. An example query should
look like this:
http://localhost:8983/solr/data?command=full-import&clean=false
Indexing data from a database using Data
Import Handler
Let's assume that we want to index the Wikipedia data, and we don't want to parse the whole
Wikipedia data and make another XML file. Instead we asked our DB expert to import the
data dump information from the PostgreSQL database, so we could fetch that data. Did I say
fetch? Yes it is possible – with the use of Data Import Handler and JDBC data source. This
task will guide you through how to do it.
Getting ready
Please refer to the How to properly configure Data Import Handler recipe in this chapter
to get to know the basics about how Data Import Handler is configured. I'll assume that
you already have Solr set up according to the instructions available in the mentioned recipe.
How to do it...
The Wikipedia data I used in this example is available under the Wikipedia downloads
page at http://download.wikimedia.org/.
1. First let's add a sample index structure. To do that we need to modify the fields
section of the schema.xml file so it looks like the following code:
<field name="id" type="string" indexed="true" stored="true"
required="true"/>
<field name="name" type="string" indexed="true" stored="true"/>
<field name="revision_id" type="string" indexed="true"
stored="true"/>
<field name="contents" type="text" indexed="true" stored="true"/>
www.it-ebooks.info
Indexing Your Data
46
2. The next step is to add the request handler definition to the solrconfig.xml file,
like so:
<requestHandler name="/dataimport" class="org.apache.solr.handler.
dataimport.DataImportHandler">
<lst name="defaults">
<str name="config">db-data-config.xml</str>
</lst>
</requestHandler>
3. Now we have to add a db-data-config.xml file to the conf directory of your Solr
instance (or core):
<dataConfig>
<dataSource driver="org.postgresql.Driver"
url="jdbc:postgresql://localhost:5432/wikipedia" user="wikipedia"
password="secret" />
<document>
<entity name="page" query="SELECT page_id, page_title from
page">
<field column="page_id" name="id" />
<field column="page_title" name="name" />
<entity name="revision" query="select rev_id from revision
where rev_page=${page.page_id}">
<field column="rev_id" name="revision_id" />
<entity name="pagecontent" query="select old_text from
pagecontent where old_id=${revision.rev_id}">
<field column="old_text" name="contents" />
</entity>
</entity>
</entity>
</document>
</dataConfig>
4. Now let's start indexing. Type the following URL into your browser:
http://localhost:8983/solr/dataimport?command=full-import
5. Let's check the indexing status during import. To do that we run the following query:
http://localhost:8983/solr/dataimport
Solr will show us a response like the following reponse:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
</lst>
<lst name="initArgs">
<lst name="defaults">
www.it-ebooks.info
Chapter 2
47
<str name="config">db-data-config.xml</str>
</lst>
</lst>
<str name="status">busy</str>
<str name="importResponse">A command is still running...</str>
<lst name="statusMessages">
<str name="Time Elapsed">0:1:15.460</str>
<str name="Total Requests made to DataSource">39547</str>
<str name="Total Rows Fetched">59319</str>
<str name="Total Documents Processed">19772</str>
<str name="Total Documents Skipped">0</str>
<str name="Full Dump Started">2010-10-25 14:28:00</str>
</lst>
<str name="WARNING">This response format is experimental.
It is likely to change in the future.</str>
</response>
6. Running the same query after the importing process is done should result in a
response like the following:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
</lst>
<lst name="initArgs">
<lst name="defaults">
<str name="config">db-data-config.xml</str>
</lst>
</lst>
<str name="status">idle</str>
<str name="importResponse"/>
<lst name="statusMessages">
<str name="Total Requests made to DataSource">2118645</str>
<str name="Total Rows Fetched">3177966</str>
<str name="Total Documents Skipped">0</str>
<str name="Full Dump Started">2010-10-25 14:28:00</str>
<str name="">Indexing completed. Added/Updated: 1059322
documents. Deleted 0 documents.</str>
<str name="Committed">2010-10-25 14:55:20</str>
<str name="Optimized">2010-10-25 14:55:20</str>
<str name="Total Documents Processed">1059322</str>
<str name="Time taken ">0:27:20.325</str>
</lst>
<str name="WARNING">This response format is experimental.
It is likely to change in the future.</str>
</response>
www.it-ebooks.info
Indexing Your Data
48
How it works...
To illustrate how Data Import Handler works, I decided to index the Polish Wikipedia data.
I decided to store four fields: page identifier, page name, page revision number, and its
contents. The field definition part is fairly simple so I decided to skip commenting on this.
The request handler definition, the Data Import Handler configuration, and command queries
were discussed in the How to properly configure Data Import Handler with JDBC recipe in this
chapter. The portions of interest in this task are in the db-data-config.xml file.
As you can see, we have three entities defined. The first entity gathers data from the page
table and maps two of the columns to the index fields. The next entity is nested inside the
first one and gathers the revision identifier from the table revision with the appropriate
condition. The revision identifier is then mapped to the index field. The last entity is nested
inside the second and gathers data from the pagecontent table again with the appropriate
condition. And again, the returned column is mapped to the index field.
We have the response which shows us that the import is still running (the listing with <str
name="importResponse">A command is still running...</str>). As you can
see there is information about how many data rows were fetched, how many requests to
the database were made, how many Solr documents were processed, and how many were
deleted. There is also information about the start of the indexing process. One thing you
should be aware of: this response can change in the next versions of Solr and Data
Import Handler.
The last listing shows us the summary of the indexing process.
How to import data using Data Import
Handler and delta query
Do you remember the task with the users import from the recipe named How to properly
configure Data Import Handler? We imported all the users from our client database but it took
ages – about two weeks. Our client is very happy with the results. His database is now not
used for searching but only updating. And yes, that is the problem for us – how do we update
data in the index? We can't fetch the whole data every time – it took two weeks. What we can
do is an incremental import which will modify only the data that has changed since the last
import. This task will show you how to do that.
www.it-ebooks.info
Chapter 2
49
Getting ready
Please refer to the How to properly configure Data Import Handler recipe in this chapter to
get to know the basics of the Data Import Handler configuration. I assume that Solr is set up
according to the description given in the mentioned recipe.
How to do it...
1. The first thing you should do is add an additional column to the tables you use. So
in our case let's assume that we added a column named last_modified (which
should be a timestamp-based column). Now our db-data-config.xml will look
like the following code:
<dataConfig>
<dataSource driver="org.postgresql.Driver"
url="jdbc:postgresql://localhost:5432/users" user="users"
password="secret" />
<document>
<entity name="user" query="SELECT user_id, user_name FROM users"
deltaImportQuery="select user_id, user_name FROM users WHERE user_
id = '${dataimporter.delta.user_id}'"deltaQuery="select user_id
FROM users WHERE last_modified &gt; '${dataimporter.last_index_
time}'">
<field column="user_id" name="id" />
<field column="user_name" name="name" />
<entity name="user_desc" query="select description from
users_description where user_id=${user.user_id}">
<field column="description" name="description" />
</entity>
</entity>
</document>
</dataConfig></dataConfig>
2. After that we run a new kind of query to start delta import:
http://localhost:8983/solr/dataimport?command=delta-import
How it works...
First we modified our database table to include a column named last_modified. We need
to ensure that the column will be modified at the same time as the table is. Solr will not
modify the database, so you have to ensure that your application will do that.
www.it-ebooks.info
Indexing Your Data
50
When running a delta import, Data Import Handler will create a file named dataimport.
properties inside a Solr configuration directory. In that file, the last index time will be
stored as a timestamp. This timestamp will be later used to distinguish whether the data
was changed or not. It can be used in a query by using a special variable: ${dataimporter.
last_index_time}.
You may have already noticed the two differences – two additional attributes defining an
entity named user – deltaQuery and deltaImportQuery. The first one is responsible
for getting the information about which users were modified since the last index. Actually
it only gets the user's unique identifiers. It uses the last_modified field to determine
which users were modified since the last import. Then the second query is executed –
deltaImportQuery. This query gets users with the appropriate unique identifier, to get
all the data which we want to index. One thing worth noticing is the way that I used the user
identifier in deltaImportQuery. I used the delta variable with its user_id (the same
name as the table column name) variable to get it: ${dataimporter.delta.user_id}.
You may have noticed that I left the query attribute in the entity definition. It's left on
purpose; you may need to index the entire data once again, so that configuration will
be useful for full imports as well as for the partial ones.
Next we have a query that shows how to run the delta import. You may have noticed that
compared to the full import, we didn't use the full-import command – we've sent the
delta-import command.
The statuses that are returned by Solr are the same as with the full import, so please refer to
the appropriate chapters to see what information they carry.
One more thing – the delta queries are only supported for the default SqlEntityProcessor
class. This means that you can only use those queries with JDBC data sources.
How to use Data Import Handler with the
URL data source
Do you remember the first example with the Wikipedia data? We asked our fellow DB expert
to import the data dump into PostgreSQL and we fetched the data from there. But what if our
colleague is sick and can't help us, and we need to import that data? We can parse the data
and send it to Solr, but that's not an option – we don't have much time to do that. So what to
do? Yes, you guessed – we can use Data Import Handler and one of its data sources, file data
source. This task will show you how to do that.
www.it-ebooks.info
Chapter 2
51
Getting ready
Please refer to the How to properly configure Data Import Handler recipe in this chapter
to get to know the basics of the Data Import Handler configuration. I assume that Solr is
set up according to the description given in the mentioned recipe.
How to do it...
Let's take a look at our data source. To be consistent, I chose to index the Wikipedia data,
which you should already be familiar with.
1. First of all, the index structure. Our field definition part of schema.xml should look
like the following code:
<field name="id" type="string" indexed="true" stored="true"
required="true"/>
<field name="name" type="string" indexed="true" stored="true"/>
<field name="revision_id" type="string" indexed="true"
stored="true"/>
<field name="contents" type="text" indexed="true" stored="true"/>
2. The next step is to define a Data Import Handler request handler (put that definition
in the solrconfig.xml file):
<requestHandler name="/dataimport" class="org.apache.solr.handler.
dataimport.DataImportHandler">
<lst name="defaults">
<str name="config">data-config.xml</str>
</lst>
</requestHandler>
3. And now the data-config.xml file:
<dataConfig>
<dataSource type="FileDataSource" encoding="UTF-8" />
<document>
<entity name="page" processor="XPathEntityProcessor"
stream="true" forEach="/mediawiki/page/" url="/solrcookbook/data/
enwiki-20120802-pages-articles.xml"transformer="RegexTransformer">
<field column="id" xpath="/mediawiki/page/id" />
<field column="name" xpath="/mediawiki/page/title" />
<field column="revision_id" xpath="/mediawiki/page/revision/id"
/>
<field column="contents" xpath="/mediawiki/page/revision/text"
/>
<field column="$skipDoc" regex="^#REDIRECT .*"
replaceWith="true" sourceColName="contents"/>
www.it-ebooks.info
Indexing Your Data
52
</entity>
</document>
</dataConfig>
4. Now let's start indexing by sending the following query to Solr:
http://localhost:8983/solr/dataimport?command=full-import
After the import is done, we will have the data indexed.
How it works...
The Wikipedia data I used in this example is available under the Wikipedia downloads page
at http://download.wikimedia.org/enwiki/. I've chosen the pages-articles.
xml.bz2 file (actually it was named enwiki-20120802-pages-articles.xml.bz2)
which is about 6 GB. We only want to index some of the data from the file: page identifier,
name, revision, and page contents. I also wanted to skip articles that are only linking to
other articles in Wikipedia.
The field definition part of the schema.xml file is fairly simple and contains only four fields
and there is nothing unusual within it, so I'll skip commenting on it.
The solrconfig.xml file contains the handler definition with the information about the
Data Import Handler configuration filename.
Next we have the data-config.xml file where the actual configuration is written. We
have a new data source type here named FileDataSource. This data source will read the
data from a local directory. You can use HttpDataSource if you want to read data from
an outer location. The XML tag defining the data source also specifies the file encoding
(the encoding attribute) and in our example it's UTF-8. Next we have an entity definition,
which has a name under which it will be visible, a processor which will process our data. The
processor attribute is only mandatory when not using a database source. This value must
be set to XPathEntityProcessor in our case. The stream attribute, which is set to true,
informs Data Import Handler to stream the data from the file which is a must in our case
when the data is large. Following that we have a forEach attribute which specifies an XPath
expression – this path will be iterated over. There is a location of the data file defined in the
url attribute and a transformer defined in the transformer attribute. A transformer is a
mechanism that will transform every row of data and process it before sending it to Solr.
Under the entity definition we have field mapping definitions. We have columns which are
the same as the index field names thus I skipped the name field. There is one additional
attribute named xpath in the mapping definitions. It specifies the XPath expression that
defines where the data is located in the XML file. If you are not familiar with XPath please
refer to the http://www.w3schools.com/xpath/default.asp tutorial.
www.it-ebooks.info
Chapter 2
53
We also have a special column named $skipDoc. It tells Solr which documents to skip (if
the value of the column is true then Solr will skip the document). The column is defined
by a regular expression (attribute regex), a column to which the regular expression applies
(attribute sourceColName), and the value that will replace all the occurrences of the given
regular expression (replaceWith attribute). If the regular expression matches (in this case,
if the data in the column specified by the sourceColName attribute starts with #REDIRECT),
then the $skipDoc column will be set to true and thus the document will be skipped.
The actual indexing time was more than four hours on my machine, so if you try to index the
sample Wikipedia data please take that into consideration.
How to modify data while importing with
Data Import Handler
After we indexed the users and made the indexing incremental (the How to properly configure
Data Import Handler and How to import data using Data Import Handler and delta query
recipes), we were asked if we could modify the data a bit. Actually it would be perfect if we could
split name and surname into two fields in the index while those two reside in a single column in
the database. And of course, updating the database is not an option (trust me – it almost never
is). Can we do that? Of course we can, we just need to add some more configuration details in
Data Import Handler and use a transformer. This task will show you how to do that.
Getting ready
Please refer to the How to properly configure Data Import Handler recipe in this chapter to
get to know the basics about the Data Import Handler configuration. Also, to be able to run
examples in this chapter, you need to run Solr in the servlet container run on Java 6 or later. I
assume that Solr is set up according to the description given in the mentioned recipe.
How to do it...
Let's assume that we have a database table. To select users from our table we use the
following SQL query:
SELECT user_id, user_name, description FROM users
The response may look like this:
| user_id | user_name | description |
| 1 | John Kowalski | superuser |
| 2 | Amanda Looks | user |
www.it-ebooks.info
Indexing Your Data
54
Our task is to split the name from the surname and place it in two fields: name and surname.
1. First of all change the index structure, so our field definition part of schema.xml
should look like the following code:
<field name="id" type="string" indexed="true" stored="true"
required="true"/>
<field name="firstname" type="string" indexed="true"
stored="true"/>
<field name="surname" type="string" indexed="true" stored="true"/>
<field name="description" type="text" indexed="true"
stored="true"/>
2. Now we have to add a db-data-config.xml file:
<dataConfig>
<dataSource driver="org.postgresql.Driver"
url="jdbc:postgresql://localhost:5432/users" user="users"
password="secret" />
<script><![CDATA[
function splitName(row) {
var nameTable = row.get('user_name').split(' ');
row.put('firstname', nameTable[0]);
row.put('surname', nameTable[1]);
row.remove('name');
return row;
}
]]></script>
<document>
<entity name="user" transformer="script:splitName" query="SELECT
user_id, user_name, description from users">
<field column="user_id" name="id" />
<field column="firstname" />
<field column="surname" />
<field column="description" />
</entity>
</document>
</dataConfig>
3. And now you can follow the normal indexing procedure which was discussed in the
How to properly configure Data Import Handler recipe in this chapter.
www.it-ebooks.info
Chapter 2
55
How it works...
The first two listings are the sample SQL query and the result given by a database. Next we
have a field definition part of the schema.xml file which defines four fields. Look at the
example database rows once again. See the difference? We have four fields in our index while
our database rows have only three columns. We must split the contents of the user_name
column into two index fields: firstname and surname. To do that, we will use JavaScript
language and the script transformer functionality of Data Import Handler.
The solrconfig.xml file is the same as the one discussed in the How to properly configure
Data Import Handler recipe in this chapter, so I'll skip that as well.
Next we have the updated contents of the db-data-config.xml file which we use to define
the behavior of Data Import Handler. The first and the biggest difference is the script tag
that will be holding our scripts that parse the data. The scripts should be held in the CDATA
section. I defined a simple function called splitName that takes one parameter, database row
(remember that the functions that operate on entity data should always take one parameter).
The first thing in the function is getting the contents of the user_name column, split it with the
space character, and assign it into a JavaScript table. Then we create two additional columns
in the processed row – firstname and surname. The contents of those rows come from the
JavaScript table we created. Then we remove the user_name column because we don't want it
to be indexed. The last operation is the returning of the processed row.
To enable script processing you must add one additional attribute to the entity definition – the
transformer attribute with the contents such as script:functionName. In our example,
it looks like this: transformer:"script:splitName". It tells Data Import Handler to use
the defined function name for every row returned by the query.
And that's how it works. The rest is the usual indexing process described in the How to
properly configure Data Import Handler task in this chapter.
There's more...
If you want to use a different language other than JavaScript, then you have to specify it in the
language attribute of the <script> tag. Just remember that the scripting language that you
want to use must be supported by Java 6. The example definition would look as follows:
<script language="ECMAScript">…</script>
www.it-ebooks.info
Indexing Your Data
56
Updating a single field of your document
Imagine that you have a system where you store a document your users upload. In addition
to that, your users can add other users to have access to the files they uploaded. As you
probably know, before Solr 4.0, when you wanted to update a single field in a document
you had to re-index the whole document. Solr 4.0 allows you to update a single field if
you fulfill some basic requirements. So let's see how we can do that in Solr 4.0.
How to do it...
For the purpose of the recipe, let's assume we have the following index structure
(put the following entries to your schema.xml file's fields section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="file" type="text_general" indexed="true" stored="true"/>
<field name="user" type="string" indexed="true" stored="true"
multiValued="true" />
In addition to that, we need the _version_ field:
<field name="_version_" type="long" indexed="true" stored="true"/>
And that's all when it comes to the schema.xml file. In addition to that, let's assume
we have the following data indexed:
<add>
<doc>
<field name="id">1</field>
<field name="file">Sample file</field>
<field name="user">gro</field>
<field name="user">negativ</field>
</doc>
</add>
So, we have a sample file and two user names specifying which users of our system can
access that file. But what if we would like to add another user called jack. Is that possible?
Yes, with Solr 4.0 it is. To add the value to a field which has multiple values, we should send
the following command:
curl 'localhost:8983/solr/update?commit=true' -H 'Contenttype:
application/json' -d '[{"id":"1","user":{"add":"jack"}}]'
Let's see if it worked by sending the following query:
http://localhost:8983/solr/select?q=*:*&indent=true
www.it-ebooks.info
Chapter 2
57
The response sent by Solr was as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
<str name="indent">true</str>
<str name="q">*:*</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="file">Sample file</str>
<arr name="user">
<str>gro</str>
<str>negativ</str>
<str>jack</str>
</arr>
<long name="_version_">1411121765349851136</long></doc>
</result>
</response>
As you can see it worked without any problems. Imagine that now one of the users changed
the name of the document, and we would also like to update the file field of that document
to match that change. In order to do so, we should send the following command:
curl 'localhost:8983/solr/update?commit=true' -H 'Contenttype:
application/json' -d '[{"id":"1","file":{"set":"New file name"}}]'
And again, we send the same query as before to see if the command succeeded:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="indent">true</str>
<str name="q">*:*</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
www.it-ebooks.info
Indexing Your Data
58
<str name="id">1</str>
<str name="file">New file name</str>
<arr name="user">
<str>gro</str>
<str>negativ</str>
<str>jack</str>
</arr>
<long name="_version_">1411121902871642112</long></doc>
</result>
</response>
It worked again. So now let's see how Solr does that.
How it works...
As you can see the index structure is pretty simple; we have a document identifier, its name,
and users that can access that file. As you can see all the fields in the index are marked as
stored (stored="true"). This is required for the partial update functionality to work. This
is because, under the hood, Solr takes all the values from the fields and updates the one we
mentioned to be updated. So it is just a typical document indexing, but instead of you having
to provide all the information, it's Solr's responsibility to get it from the index.
Another thing that is required for the partial update functionality to work is the _version_
field. You don't have to set it during indexing, it is used internally by Solr. The example data
we are indexing is also very simple. It is a single document with two users defined.
[{"id":"1","user":{"add":"jack"}}]
The interesting stuff comes with the update command. As you can see, that command
is run against a standard update handler you run indexing against. The commit=true
parameter tells Solr to perform the commit operation right after update. The -H 'Contenttype:
application/json' part is responsible for setting the correct HTTP headers for the
update request. Next we have the request contents itself. It is sent as a JSON object.
We specified that we are interested in the document with the identifier "1" ("id":"1").
We want to change the user field and we want to add the jack value to that field (the
add command). So as you can see, the add command is used when we want to add a
new value to a field which can hold multiple values.
The second command shown as an example shows how to change the value of a
single-valued field. It is very similar to what we had before, but instead of using the
add command, we use the set command. And again, as you can see, it worked perfectly.
www.it-ebooks.info
Chapter 2
59
Handling multiple currencies
Imagine a situation where you run an e-commerce site and you sell your products all over the
world. One day you say that you would like to calculate the currencies by yourself and have
all the goodies that Solr gives you on all the currencies you support. You could of course add
multiple fields, one for each currency. On the other hand, you can use the new functionality
introduced in Solr 3.6 and create a field that will use the provided currency exchange rates.
How to do it...
This recipe will show you how to configure and use multiple currencies using a single field
in the index:
1. Let's start with creating a sample index structure, by modifying the fields section
in your schema.xml file so it looks like the following code:
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text_general" indexed="true"
stored="true" />
<field name="price" type="currencyField" indexed="true"
stored="true" />
2. In addition to that, we need to provide the definition for the type the price field is
based on (add the following entry to the types section in your schema.xml file):
<fieldType class="solr.CurrencyField" name="currencyField"
defaultCurrency="USD" currencyConfig="currencyExchange.xml" />
3. Another file that we need to create is the currencyExchange.xml file, which should
be placed in the conf directory of your collection and have the following contents:
<currencyConfig version="1.0">
<rates>
<rate from="USD" to="EUR" rate="0.743676" comment="European
Euro" />
<rate from="USD" to="HKD" rate="7.801922" comment="HONG KONG
Dollar" />
<rate from="USD" to="GBP" rate="0.647910" comment="UNITED
KINGDOM Pound" />
</rates>
</currencyConfig>
www.it-ebooks.info
Indexing Your Data
60
4. Now we can index some example data. For this recipe, I decided to index the
following documents:
<add>
<doc>
<field name="id">1</field>
<field name="name">Test document one</field>
<field name="price">10.10,USD</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Test document two</field>
<field name="price">12.01,USD</field>
</doc>
</add>
5. Let's now check if that works. Our second document costs 12.01 USD and we have
defined the exchange rate for European Euro as 0.743676. This gives us about 7.50
EUR for the first document and about 8.90 EUR for the second one. Let's check that
by sending the following query to Solr:
http://localhost:8983/solr/select?q=name:document&fq=price:[8.00,E
UR TO 9.00,EUR]
6. The result returned by Solr is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="fq">price:[8.00,EUR TO 9.00,EUR]</str>
<str name="q">name:document</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">2</str>
<str name="name">Test document two</str>
<str name="price">12.01,USD</str></doc>
</result>
</response>
As you can see, we got the document we wanted.
www.it-ebooks.info
Chapter 2
61
How it works...
The idea behind the functionality is simple – we create a field based on a certain type and
we provide a file with a currency exchange rate, and that's all. After that we can query our
Solr instance with the use of all the currencies we defined exchange rates for. But now, let's
discuss all the previous configuration changes in detail.
The index structure is very simple; it contains three fields of which one is responsible for
holding the price of the document and is based on the currencyField type. This type is
based on solr.CurrencyField. Its defaultCurrency attribute specifies the default
currency for all the fields using this type. This is important, because Solr will return prices
in the defined default currency, no matter what currency is used during the query. The
currencyConfig attribute specifies the name of the file with the exchange rate definition.
Our currencyExchange.xml file provides exchange rate for three currencies:
ff EUR
ff HKD
ff GBP
The file should be structured similar to the example one previously shown. This means
that each exchange rate should have the from attribute telling Solr from which currency
the exchange will be done, the to attribute specifying to which currency the exchange will
be done, and the rate attribute specifying the actual exchange rate. In addition to that,
it can also have the comment attribute if we want to include some short comment.
During indexing, we need to specify the currency we want the data to be indexed with. In
the previous example, we indexed data with USD. This is done by specifying the price, a
colon character, and the currency code after it. So 10.10,USD will mean ten dollars
and ten cents in USD.
The last thing is the query. As you can see, you can query Solr with different currencies from
the one used during indexing. This is possible because of the provided exchange rates file.
As you can see, when we use a range query for a price field, we specify the value, the colon
character, and the currency code after it. Please remember that if you provide a currency
code unknown to Solr, it will throw an exception saying that the currency is not known.
There's more...
You can also have the exchange rates being updated automatically by specifying the
currency provider.
www.it-ebooks.info
Indexing Your Data
62
Setting up your own currency provider
Specifying the currency exchange rate file is great, but we need to update that file because
the exchange rates change constantly. Luckily for us, Solr committers thought about it and
gave us the option to provide an exchange rate provider instead of a plain file. The provider
is a class responsible for providing the exchange rate data. The default exchange rate provider
available in Solr uses exchange rates from http://openexchangerates.org, which are
updated hourly. In order to use it, we need to modify our currencyField field
type definition and introduce three new properties (and remove the currencyConfig one):
ff providerClass: This class implements the exchange rates provider,
which in our case will be the default one available in Solr – solr.
OpenExchangeRatesOrgProvider
ff refreshInterval: This determines how often to refresh the rates
(specified in minutes)
ff ratesFileLocation: This determines the location of the file with rates in open
exchange format
So the final configuration should look like the following snippet:
<fieldType name="currencyField" class="solr.CurrencyField"
providerClass="solr.OpenExchangeRatesOrgProvider"
refreshInterval="120" ratesFileLocation="http://192.168.10.10/latest.
json"/>
You can download the sample exchange file from the http://openexchangerates.org
site after creating an account there.
Detecting the document's language
Imagine a situation where you have users from different countries and you would like to give
them a choice to only see content you index that is written in their native language. Sounds quite
interesting, right? Let us see how we can identify the language of the documents during indexing
and store that information along with the documents in the index for later use.
How to do it...
For the language identification we will use one of the Solr contrib modules, but let's start from
the beginning.
1. For the purpose of the recipe, I assume that we will be using the following index
structure (add the following to the fields section of your schema.xml file):
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
www.it-ebooks.info
Chapter 2
63
<field name="name" type="text_general" indexed="true"
stored="true"/>
<field name="description" type="text_general" indexed="true"
stored="true" />
<field name="langId" type="string" indexed="true" stored="true" />
We will use the langId field to store the information about the identified language.
2. The next thing we need to do is create a langid directory somewhere on your
filesystem (I'll assume that the directory is created in the same directory that Solr is
installed) and copy the following libraries to that directory:
?? apache-solr-langid-4.0.0.jar (from the dist directory of Apache
Solr distribution)
?? jsonic-1.2.7.jar (from the contrib/langid/lib directory of Apache
Solr distribution)
?? langdetect-1.1.jar (from the contrib/langid/lib directory of
Apache Solr distribution)
3. Next we need to add some information to the solrconfig.xml file. First we need to
inform Solr that we want it to load the additional libraries. We do that by adding the
following entry to the config section of that file:
<lib dir="../../langid/" regex=".*\.jar" />
4. In addition to that we configure a new update processor by adding the following to the
config section of the solrconfig.xml file:
<updateRequestProcessorChain name="langid">
<processor class="org.apache.solr.update.processor.
LangDetectLanguageIdentifierUpdateProcessorFactory">
<str name="langid.fl">name,description</str>
<str name="langid.langField">langId</str>
<str name="langid.fallback">en</str>
</processor>
<processor class="solr.LogUpdateProcessorFactory" />
<processor class="solr.RunUpdateProcessorFactory" />
</updateRequestProcessorChain>
5. Now, we need some data to be indexed. I decided to use the following test data
(stored in a data.xml file):
<add>
<doc>
<field name="id">1</field>
<field name="name">First</field>
<field name="description">>Water is a chemical substance with
the chemical formula H2O. A water molecule contains one oxygen
and two hydrogen atoms connected by covalent bonds. Water is a
www.it-ebooks.info
Indexing Your Data
64
liquid at ambient conditions, but it often co-exists on Earth with
its solid state, ice, and gaseous state (water vapor or steam).
Water also
exists in a liquid crystal state near hydrophilic surfaces.[1]
[2] Under nomenclature used to name chemical compounds, Dihydrogen
monoxide is the scientific name for water, though it is almost
never used.</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Zweite</field>
<field name="description">Wasser (H2O) ist eine chemische
Verbindung aus den Elementen Sauerstoff (O) und Wasserstoff
(H). Wasser ist die einzige chemische Verbindung auf der Erde,
die in der Natur in allen drei Aggregatzuständen vorkommt.
Die Bezeichnung Wasser wird dabei besonders für den flüssigen
Aggregatzustand verwendet. Im festen (gefrorenen) Zustand spricht
man von Eis, im gasförmigen Zustand von Wasserdampf.</field>
</doc>
</add>
6. And now the indexing. To index the above test file I used the following commands:
curl 'http://localhost:8983/solr/update?update.chain=langid'
--data-binary @data.xml -H 'Content-type:application/xml'
curl 'http://localhost:8983/solr/update?update.chain=langid'
--data-binary '<commit/>' -H 'Content-type:application/xml'
7. After sending the previous two commands, we can finally test if that worked. We will
just ask Solr to return all the documents by sending the q=*:* query. The following
results will be returned:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">6</int>
<lst name="params">
<str name="q">*:*</str>
</lst>
</lst>
<result name="response" numFound="2" start="0">
<doc>
<str name="id">1</str>
<str name="name">First</str>
<str name="description">&gt;Water is a chemical substance with
the
www.it-ebooks.info
Chapter 2
65
chemical formula H2O. A water molecule contains one oxygen and two
hydrogen atoms connected by covalent bonds. Water is a liquid at
ambient conditions, but it often co-exists on Earth with its solid
state, ice, and gaseous state (water vapor or steam). Water also
exists in a liquid crystal state near hydrophilic surfaces.[1]
[2] Under nomenclature used to name chemical compounds, Dihydrogen
monoxide is the scientific name for water, though it is almost
never used.</str>
<str name="langId">en</str></doc>
<doc>
<str name="id">2</str>
<str name="name">Zweite</str>
<str name="description">Wasser (H2O) ist eine chemische
Verbindung
aus den Elementen Sauerstoff (O) und Wasserstoff (H). Wasser ist
die einzige chemische Verbindung auf der Erde, die in der Natur
in allen drei Aggregatzuständen vorkommt. Die Bezeichnung Wasser
wird dabei besonders für den flüssigen Aggregatzustand verwendet.
Im festen (gefrorenen) Zustand spricht man von Eis, im gasförmigen
Zustand von Wasserdampf.</str>
<str name="langId">de</str></doc>
</result>
</response>
As you can see, the langId field was filled with the correct language.
How it works...
The index structure we used is quite simple; it contains four fields and we are most interested
in the langId field which won't be supplied with the data, but instead of that we want Solr
to fill it.
The mentioned libraries are needed in order for the language identification to work. The lib
entry in the solrconfig.xml file tells Solr to look for all the JAR files from the ../../
langid directory. Remember to change that to reflect your setup.
Now the update request processor chain definition comes. We need
that definition to include org.apache.solr.update.processor.
LangDetectLanguageIdentifierUpdateProcessorFactory in order to detect the
document language. The langid.fl property tells the defined processor which fields
should be used to detect the language. langid.langField specifies to which field the
detected language should be written. The last property, langid.fallback, tells the
language detection library what language should be set if it fails to detect a language.
The solr.LogUpdateProcessorFactory and solr.RunUpdateProcessorFactory
processors are there to log the updates and actually run them.
www.it-ebooks.info
Indexing Your Data
66
As for data indexing, in order to use the defined update request processor chain, we need to
tell Solr that we want it to be used. In order to do that, when sending data to Solr we specify
the additional parameter called update.chain with the name of the update chain we want
to use, which in our case is langid. The --data-binary switch tells the curl command to
send that data in a binary format and the -H switch tells curl which content type should
be used. In the end we send the commit command to write the data to the Lucene index.
There's more...
If you don't want to use the previously mentioned processor to detect the document language,
you can use the one that uses the Apache Tika library:
Language identification based on Apache Tika
If LangDetectLanguageIdentifierUpdateProcessorFactory is not good
enough for you, you can try using language identification based on the Apache Tika
library. In order to do that you need to provide all the libraries from the contrib/
extraction directory in the Apache Solr distribution package instead of the ones
from contrib/langid/lib, and instead of using the org.apache.solr.update.
processor.LangDetectLanguageIdentifierUpdateProcessorFactory
processor use org.apache.solr.update.processor.
TikaLanguageIdentifierUpdateProcessorFactory. So the final configuration should
look like the following code:
<updateRequestProcessorChain name="langid">
<processor class="org.apache.solr.update.processor.
TikaLanguageIdentifierUpdateProcessorFactory">
<str name="langid.fl">name,description</str>
<str name="langid.langField">langId</str>
<str name="langid.fallback">en</str>
</processor>
<processor class="solr.LogUpdateProcessorFactory" />
<processor class="solr.RunUpdateProcessorFactory" />
</updateRequestProcessorChain>
However, remember to still specify the update.chain parameter during indexing or add the
defined processor to your update handler configuration.
www.it-ebooks.info
Chapter 2
67
Optimizing your primary key field indexing
Most of the data stored in Solr has some kind of primary key. Primary keys are different from
most of the fields in your data as each document has a unique value stored; because they are
primary in most cases they are unique. Because of that, a search on this primary field
is not always as fast as you would expect when you compare it to databases. So, is there
anything we can do to make it faster? With Solr 4.0 we can, and this recipe will show
you how to improve the execution time of queries run against unique fields in Solr.
How to do it...
Let's assume we have the following field defined as a unique key for our Solr collection.
So, in your schema.xml file, you would have the following:
ff In your fields section you would have the following:
<field name="id" type="string" indexed="true" stored="true"
required="true" />
ff After your fields section the following entry could be found:
<uniqueKey>id</uniqueKey>
The following steps will help you optimize the indexing of your primary key field:
1. Now, we would like to use the Lucene flexible indexing and use PulsingCodec
to handle our id field. In order to do that we introduce the following field type (just
place it in the types section of your schema.xml file):
<fieldType name="string_pulsing" class="solr.StrField"
postingsFormat="Pulsing40"/>
2. In addition to that, we need to change the id field definition to use the new type.
So, we should change the type attribute from string to string_pulsing:
<field name="id" type="string_pulsing" indexed="true"
stored="true" required="true" />
3. In addition to that we need to put the following entry in the solrconfig.xml file:
<codecFactory class="solr.SchemaCodecFactory"/>
And that's all. Now you can start indexing your data.
www.it-ebooks.info
Indexing Your Data
68
How it works...
The changes we made use the new feature introduced in Apache Lucene 4.0 and in Solr – the
so-called flexible indexing. It allows us to modify the way data is written into an inverted index
and thus configure it to our own needs. In the previous example, we used PulsingCodec
(postingsFormat="Pulsing40") in order to store the unique values in a special way. The
idea behind that codec is that the data for low frequency terms is written in a special way to
save a single I/O seek operation when retrieving a document or documents for those terms
from the index. That's why in some cases, when you do a noticeable amount of search to your
unique field (or any high cardinality field indexed with PulsingCodec), you can see a drastic
performance increase for that fields.
The last change, the one we made to the solrconfig.xml file, is required; without
it Solr wouldn't let us use specified codes and would throw an exception during startup.
It just specifies which codec factory should be used to create codec instances.
Please keep in mind that the previously mentioned method is very case dependent and
you may not see a great performance increase with the change.
www.it-ebooks.info
3
Analyzing Your
Text Data
In this chapter, we will cover:
ff Storing additional information using payloads
ff Eliminating XML and HTML tags from text
ff Copying the contents of one field to another
ff Changing words to other words
ff Splitting text by CamelCase
ff Splitting text by white space only
ff Making plural words singular without stemming
ff Lowercasing the whole string
ff Storing geographical points in the index
ff Stemming your data
ff Preparing text to perform an efficient trailing wildcard search
ff Splitting text by numbers and non-white space characters
ff Using Hunspell as a stemmer
ff Using your own stemming dictionary
ff Protecting words from being stemmed
www.it-ebooks.info
Analyzing Your Text Data
70
Introduction
The process of data indexing can be divided into parts. One of the parts, actually one of the
last parts of that process, is data analysis. It's one of the crucial parts of data preparation.
It defines how your data will be written into an index. It defines its structure and so on. In Solr,
data behavior is defined by types. A type's behavior can be defined in the context of the indexing
process or the context of the query process, or both. Furthermore, a type definition is composed
of a tokenizer (or multiple ones–one for querying and one for indexing) and filters (both token
filters and character filters).
A tokenizer specifies how your data will be pre-processed after it is sent to the appropriate field.
Analyzer operates on the whole data that is sent to the field. Types can only have one tokenizer.
The result of the tokenizer's work is a stream of objects called tokens. Next in the analysis chain
are the filters. They operate on the tokens in the token stream. They can do anything with the
tokens – change them, remove them, or make them lowercase, for example. Types can have
multiple filters.
One additional type of filter is character filters. They do not operate on tokens from the token
stream. They operate on the data that is sent to the field, and they are invoked before the
data is sent to the analyzer.
This chapter will focus on data analysis and how to handle common day-to-day analysis
questions and problems.
Storing additional information using
payloads
Imagine you have a powerful preprocessing tool that can extract information about all the
words in the text. Your boss would like you to use it with Solr or at least store the information it
returns in Solr. So what can you do? We can use something called payload to store that data.
This recipe will show you how to do it.
How to do it...
I assume that we already have an application that takes care of recognizing the part of
speech in our text data. What we need to add is the data to the Solr index. To do that we
will use a payload – a metadata that can be stored with each occurrence of a term.
www.it-ebooks.info
Chapter 3
71
1. First of all, you need to modify the index structure. To do this, we will add the
new field type to the schema.xml file (the following entries should be added
to the types section):
<fieldtype name="partofspeech" class="solr.TextField">
<analyzer>
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.DelimitedPayloadTokenFilterFactory"
encoder="integer" delimiter="|"/>
</analyzer>
</fieldtype>
2. Now we'll add the field definition part to the schema.xml file (the following entries
should be added to the fields section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="text" type="text" indexed="true" stored="true" />
<field name="speech" type="partofspeech" indexed="true"
stored="true" multivalued="true" />
3. Now let's look at what the example data looks like (I named it ch3_payload.xml):
<add>
<doc>
<field name="id">1</field>
<field name="text">ugly human</field>
<field name="speech">ugly|3 human|6</field>
</doc>
<doc>
<field name="id">2</field>
<field name="text">big book example</field>
<field name="speech">big|3 book|6 example|1</field>
</doc>
</add>
4. The next step is to index our data. To do that, we run the following command from
the exampledocs directory (put the ch3_payload.xml file there):
java -jar post.jar ch3_payload.xml
www.it-ebooks.info
Analyzing Your Text Data
72
5. To check if the payloads were written to the index, we will use the analysis capabilities
or the Solr administration panel. We will test the test|7 term with the associated
payload. The following is what it looks like:
How it works...
What information can the payload hold? It may hold information that is compatible with the
encoder type you define for the solr.DelimitedPayloadTokenFilterFactory filter.
In our case, we don't need to write our own encoder – we will use the supplied one to store
integers. We will use it to store the boost of the term. For example, nouns will be given a token
boost value of 6, while the adjectives will be given a boost value of 3.
So first, we have the type definition. We defined a new type in the schema.xml file named
partofspeech based on the Solr text field (attribute class="solr.TextField"). Our
tokenizer splits the given text on whitespace characters. Then we have a new filter which
handles our payloads. The filter defines an encoder which in our case is an integer (attribute
encoder="integer"). Furthermore it defines a delimiter which separates the term from
the payload. In our case the separator is the pipe character (|).
www.it-ebooks.info
Chapter 3
73
Finally we have the field definitions. In our example we only define three fields:
ff Identifier
ff Text
ff Recognized speech part with payload
Now let's take a look at the example data. We have two simple fields – id and text. The one
that we are interested in is the speech field. Look at how it is defined. It contains pairs which
are made of a term, a delimiter, and a boost value. For example, book|6. In the example, I
decided to boost nouns with a boost value of 6 and adjectives with the boost value of 3. I also
decided that words that cannot be identified by my application, which is used to identify parts of
speech, will be given a boost of 1. Pairs are separated with a space character, which in our case
will be used to split those pairs – that is the task of the tokenizer which we defined earlier.
To index the documents we use simple post tools provided with the example deployment of
Solr. To use it, invoke the command shown in the example. The post tools will send the data
to the default update handler found under the address http://localhost:8983/solr/
update. The following parameter is the file that is going to be sent to Solr. You can
also post a list of files, not only a single one.
As you can see on the provided screenshot, payload is being properly encoded and
written to the index – you can see [0 0 0 7] in the payload section of the solr.
DelimitedPayloadTokenFilterFactory filter.
Eliminating XML and HTML tags from text
There are many real-life situations when you have to clean your data. Let's assume that you want
to index web pages that your client sends you. You don't know anything about the structure of
that page; one thing you know is that you must provide a search mechanism that will enable
searching through the content of the pages. Of course you could index the whole page, splitting
it by whitespaces, but then you would probably hear the clients complain about the HTML tags
being searchable and so on. So before we enable searching the contents of the page, we need
to clean the data. In this example we need to remove the HTML tags. This recipe will show you
how to do it with Solr.
How to do it...
1. Let's start with assuming that our data looks like this (the ch3_html.xml file):
<add>
<doc>
<field name="id">1</field>
<field name="html"><html><head><title>My page</title></
head><body><p>This is a <b>my</b><i>sample</i> page</body></
html></field>
www.it-ebooks.info
Analyzing Your Text Data
74
</doc>
</add>
2. Now let's take care of the schema.xml file. First add the type definition to the
schema.xml file:
<fieldType name="html_strip" class="solr.TextField">
<analyzer>
<charFilter class="solr.HTMLStripCharFilterFactory"/>
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
</fieldType>
3. The next step is to add the following to the field definition part of the schema.xml file:
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="html" type="html_strip" indexed="true" stored="false"
/>
4. We can now index our data and have the HTML tags removed, right? Let's check
that, by going to the analysis section of the Solr administration pages and passing
the <html><head><title>My page</title></head><body><p>This is a
<b>my</b><i>sample</i> page</body></html> text to analysis there:
www.it-ebooks.info
Chapter 3
75
How it works...
First of all we have the data example. In the example we see one file with two fields, the identifier
and some HTML data nested in the CDATA section. You must remember to surround HTML data
in CDATA tags if they are full pages and start from HTML tags like our example. Otherwise Solr
will have problems with parsing the data. But if you only have some tags present in the data, you
shouldn't worry.
Next we have the html_strip type definition. It is based on solr.TextField to enable
full text searching. Following that we have a character filter which handles the HTML and the
XML tag stripping. The character filters are invoked before the data is sent to the tokenizer.
This way they operate on un-tokenized data. In our case the character filter strips the HTML
and XML tags, attributes, and so on and then sends the data to the tokenizer which splits the
data by whitespace characters. The one and only filter defined in our type makes the tokens
lowercase to simplify the search.
If you want to check how your data was indexed, remember not to be mistaken when you
choose to store the field contents (attribute stored="true"). The stored value is the
original one sent to Solr, so you won't be able to see the filters in action. If you wish to check
the actual data structures, take a look at the Luke utility (a utility that lets you see the index
structure and field values, and operate on the index). Luke can be found at the following
address: http://code.google.com/p/luke. Instead of using Luke, I decided to use the
analysis capabilities of the Solr administration pages and see how the html field behaves
when we pass the example value provided in the example data file.
Copying the contents of one field to another
Imagine that you have many big XML files that hold information about the books that are
stored on library shelves. There is not much data, just a unique identifier, the name of the
book and the author. One day your boss comes to you and says: "Hey, we want to facet and
sort on the basis of book author". You can change your XML and add two fields, but why do
that, when you can use Solr to do that for you? Well, Solr won't modify your data, but can
copy the data from one field to another. This recipe will show you how to do that.
How to do it...
In order to achieve what we want, we need the contents of the author field to be present in
the fields named author, author_facet, and authorsort.
1. Let's assume that our data looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr Cookbook</field>
www.it-ebooks.info
Analyzing Your Text Data
76
<field name="author">John Kowalsky</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Some other book</field>
<field name="author">Jane Kowalsky</field>
</doc>
</add>
2. Now let's add the following fields' definition to the fields section of your
schema.xml file:
<field name="id" type="string" indexed="true" stored="true"
required="true"/>
<field name="author" type="text" indexed="true" stored="true"
multiValued="true"/>
<field name="name" type="text" indexed="true" stored="true"/>
<field name="author_facet" type="string" indexed="true"
stored="false"/>
<field name="author_sort" type="alphaOnlySort" indexed="true"
stored="false"/>
3. In order to make Solr copy data from the author field to the author_facet
and author_sort field we need to define the copy fields in the schema.xml
file (place the following entries right after the field section):
<copyField source="author" dest="author_facet"/>
<copyField source="author" dest="author_sort"/>
4. Now we can index our example data file by running the following command from the
exampledocs directory (put the data.xml file there):
java -jar post.jar data.xml
How it works...
As you can see in the example, we only have three fields defined in our sample data XML file.
There are two fields which we are not particularly interested in – id and name. The field that
interests us the most is the author field. As I have previously mentioned, we want to place
the contents of that field into three fields:
ff author (the actual field that will be holding the data)
ff author_sort
ff author_facet
www.it-ebooks.info
Chapter 3
77
To do that we use copy fields. Those instructions are defined in the schema.xml file, right
after the field definitions; that is, after the </fields> tag. To define a copy field, we need
to specify a source field (attribute source) and a destination field (attribute dest).
After the definitions, like those in the example, Solr will copy the contents of the source fields
to the destination fields during the indexing process. There is one thing that you have to be
aware of – the content is copied before the analysis process takes place. That means that
the data is copied as it is stored in the source.
There's more...
Solr also allows us to do more with copy fields than a simple copying from one field to another.
Copying contents of dynamic fields to one field
You can also copy multiple fields' content to one field. To do that you should define a copy field
like so:
<copyField source="*_author" dest="authors"/>
The definition, like the one previously mentioned, would copy all of the fields that end with
_author to one field named authors. Remember that if you copy multiple fields to one
field, the destination field should be defined as multi-valued.
Limiting the number of characters copied
There may be situations where you only need to copy a defined number of characters from
one field to another. To do that we add the maxChars attribute to the copy field definition.
It can look like the following line of code:
<copyField source="author" dest="author_facet" maxChars="200"/>
The preceding definition tells Solr to copy up to 200 characters from the author field to the
author_facet field. This attribute can be very useful when copying the content of multiple
fields to one field.
Changing words to other words
Let's assume we have an e-commerce client and we are providing a search system based on
Solr. Our index has hundreds of thousands of documents which mainly consist of books. And
everything works fine! Then one day, someone from the marketing department comes into
your office and says that he wants to be able to find books that contain the word "machine"
when he types "electronics" into the search box. The first thing that comes to mind is, "Hey, I'll
do it in the source and index that". But that is not an option this time, because there can be
many documents in the database that have those words. We don't want to change the whole
database. That's when synonyms come into play and this recipe will show you how to use them.
www.it-ebooks.info
Analyzing Your Text Data
78
How to do it...
To make the example as simple as possible, I assumed that we only have two fields in our index.
1. Let's start by defining our index structure by adding the following field definition
section to the schema.xml file (just add it to your schema.xml file in the
field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="description" type="text_syn" indexed="true"
stored="true" />
2. Now let's add the text_syn type definition to the schema.xml file as shown in
the following code snippet:
<fieldType name="text_syn" class="solr.TextField">
<analyzer type="query">
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
<analyzer type="index">
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.SynonymFilterFactory" synonyms="synonyms.
txt" ignoreCase="true" expand="false" />
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
</fieldType>
3. As you have noticed there is a file mentioned – synonyms.txt. Let's take a look at
its contents:
machine => electronics
The synonyms.txt file should be placed in the same directory as other
configuration files, which is usually the conf directory.
4. Finally we can look at the analysis page of the Solr administration panel to see if the
synonyms are properly recognized and applied:
www.it-ebooks.info
Chapter 3
79
How it works...
First we have our field definition. There are two fields, an identifier and a description. The second
one should be of interest r to us ight now. It's based on the new type text_syn which is shown
in the second listing.
Now about the new type, text_syn – it's based on the solr.TextField class. Its definition
is divided; it behaves in one way while indexing and in a different way while querying. So the
first thing we see is the query time analyzer definition. It consists of the tokenizer that splits the
data on the basis of whitespace characters, and then the lowercase filter converts all the tokens
to lowercase. The interesting part is the index time behavior. It starts with the same tokenizer,
but then the synonyms filter comes into play. Its definition starts like all the other filters – with
a factory definition. Next we have a synonyms attribute which defines which file contains the
synonyms definition. Following that we have the ignoreCase attribute which tells Solr to ignore
the case of the tokens and the contents of the synonyms file.
www.it-ebooks.info
Analyzing Your Text Data
80
The last attribute named expand is set to false. This means that Solr won't be expanding
the synonyms – all equivalent synonyms will be reduced to the first synonym in the line.
If the attribute is set to true, all synonyms will be expanded to all equivalent forms.
The example synonyms.txt file tells Solr that when the word "machine" appears in the field
based on the text_syn type it should be replaced by "electronics". But not vice versa. Each
synonym rule should be placed in a separate line in the synonyms.txt file. Also remember
that the file should be written in the UTF-8 file encoding. This is crucial and you should always
remember it because Solr will expect the file to be encoded in UTF-8.
As you can see in the provided screenshot from the Solr administration pages, the defined
synonym was properly applied during the indexing phase.
There's more...
There is one more thing associated to using synonyms in Solr.
Equivalent synonyms setup
Let's get back to our example for a second. What if the person from the marketing
department says that he/she wants not only to be able to find books that have the word
"machine" to be found when entering the word "electronics", but also all the books that
have the word "electronics", to be found when entering the word "machine". The answer
is simple. First, we would set the expand attribute (of the filter) to true. Then we would
change our synonyms.txt file to something like this:
machine, electronics
As I said earlier Solr would expand synonyms to equivalent forms.
Splitting text by CamelCase
Let's suppose that you run an e-commerce site with an electronic assortment. The marketing
department can be a source of many great ideas. Imagine that your colleague from this
department comes to you and says that they would like your search application to be able to
find documents containing the word "PowerShot" by entering the words "power" and "shot" into
the search box. So can we do that? Of course, and this recipe will show you how.
How to do it...
1. Let's start by creating the following index structure (add this to your schema.xml file
to the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
www.it-ebooks.info
Chapter 3
81
<field name="description" type="text_split" indexed="true"
stored="true" />
2. To split text in the description field, we should add the following type definition
to the schema.xml file:
<fieldType name="text_split" class="solr.TextField">
<analyzer>
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.WordDelimiterFilterFactory"
generateWordParts="1" splitOnCaseChange="1"/>
<filter class="solr.LowerCaseFilterFactory" />
</analyzer>
</fieldType>
3. Now let's index the following XML file:
<add>
<doc>
<field name="id">1</field>
<field name="description">TextTest</field>
</doc>
</add>
4. Finally, let's run the following query in the web browser:
http://localhost:8983/solr/select?q=description:test
You should get the indexed document as the response:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">description:test</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="description">TextTest</str></doc>
</result>
</response>
www.it-ebooks.info
Analyzing Your Text Data
82
How it works...
Let's see how things work. First of all we have the field definition part of the schema.xml file.
This is pretty straightforward. We have two fields defined–one that is responsible for holding
information about the identifier (the id field) and the second one that is responsible for the
product description (the description field).
Next we see the interesting part. We name our type text_split and have it based on
a text type, solr.TextField. We also told Solr that we want our text to be tokenized
by whitespaces by adding the whitespace tokenizer (the tokenizer tag). To do what we
want to do–split by case change–we need more than this. Actually we need a filter named
WordDelimiterFilter which is created by the solr.WordDelimiterFilterFactory
class and a filter tag. We also need to define the appropriate behavior of the filter, so we
add two attributes – generateWordParts and splitOnCaseChange. The values of those
two parameters are set to 1 which means that they are turned on. The first attribute tells Solr
to generate word parts, which means that the filter will split the data on non-letter characters.
We also add the second attribute which tells Solr to split the tokens by case change.
What will that configuration do with our sample data? As you can see we have one document
sent to Solr. The data in the description field will be split into two words: text and test.
Please remember that we won't see the analyzed text in the Solr response, we only see the
stored fields and the original content of those, not the analyzed one.
Splitting text by whitespace only
One of the most common problems that you probably came across is having to split text
with whitespaces in order to segregate words from each other, to be able to process it further.
This recipe will show you how to do it.
How to do it...
1. Let's start with the assumption that we have the following index structure (add this
to your schema.xml file in the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="description_string" type="string" indexed="true"
stored="true" />
<field name="description_split" type="text_split" indexed="true"
stored="true" />
2. To split the text in the description field, we should add the following type definition:
<fieldType name="text_split" class="solr.TextField">
<analyzer>
www.it-ebooks.info
Chapter 3
83
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
</analyzer>
</fieldType>
3. To test our type, I've indexed the following XML file:
<add>
<doc>
<field name="id">1</field>
<field name="description_string">test text</field>
<field name="description_text">test text</field>
</doc>
</add>
4. Finally, let's run the following query in the web browser:
http://localhost:8983/solr/select?q=description_split:text
In the response to the preceding query, we got the indexed document:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">description_split:text</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="description_string">test text</str>
<str name="description_split">test text</str></doc>
</result>
</response>
5. On the other hand, we won't get the indexed document in the response after
running the following query:
http://localhost:8983/solr/select?q=description_string:text
The response to the preceding query:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
www.it-ebooks.info
Analyzing Your Text Data
84
<str name="q">description_string:text</str>
</lst>
</lst>
<result name="response" numFound="0" start="0">
</result>
</response>
How it works...
Let's see how things work. First of all we have the field definition part of the schema.xml
file. This is pretty straightforward. We have three fields defined – one for the identifier of the
document (the id field), and one named description_string which is based on a string
field and thus not analyzed. The third one is the descriptionsplit
field which is based
on our text_split type and will be tokenized on the basis of whitespace characters.
Next we see the interesting part. We named our type text_split and had it based on a text
type – solr.TextField. We told Solr that we want our text to be tokenized by whitespaces
by adding a whitespace tokenizer (the tokenizer tag). Because there are no filters defined,
the text will only be tokenized by whitespace characters and nothing more.
That's why our sample data in the field description_text will be split into two words,
test and text. On the other hand, the text in the description_string field won't be
split. That's why the first example query will result in one document in the response, while
the second example won't find the example document. Please remember that we won't see
the analyzed text in the Solr response, we only see stored fields and we see the original
content of those, not the analyzed one.
Making plural words singular without
stemming
Nowadays it's nice to have stemming algorithms (algorithms that will reduce words to their
stems or root form) in your application, which will allow you to find the words such as cat
and cats by typing cat. But let's imagine you have a search engine that searches through
the contents of books in the library. One of the requirements is changing the plural forms
of the words from plural to singular – nothing less, nothing more. Can Solr do that? Yes,
the newest version can and this recipe will show you how to do that.
How to do it...
1. First of all let's start with a simple two field index (add this to your schema.xml
file to the field definition section):
www.it-ebooks.info
Chapter 3
85
<field name="id" type="string" indexed="true" stored="true"
required="true"/>
<field name="description" type="text_light_stem" indexed="true"
stored="true" />
2. Now let's define the text_light_stem type which should look like this (add this
to your schema.xml file):
<fieldType name="text_light_stem" class="solr.TextField">
<analyzer>
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.EnglishMinimalStemFilterFactory" />
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
</fieldType>
3. Now let's check the analysis tool of the Solr administration pages. You should
see that words such as ways and, keys are changed to their singular forms. Let's
check the for that words using the analysis page of the Solr administration pages:
www.it-ebooks.info
Analyzing Your Text Data
86
How it works...
First of all we need to define the fields in the schema.xml file. To do that we add the
contents from the first example into that file. It tells Solr that our index will consist of two
fields – the id field which will be responsible for holding information about the unique
identifier of the document, and the description file which will be responsible for holding
the document description.
The description field is actually where the magic is being done. We defined a new field type
for that field and we called it text_light_stem. The field definition consists of a tokenizer
and two filters. If you want to know how this tokenizer behaves please refer to the Splitting text
by whitespace only recipe in this chapter. The first filter is a new one. This is the light stemming
filter that we will use to perform minimal stemming. The class that enables Solr to use that
filter is solr.EnglishMinimalStemFilterFactory. This filter takes care of the process of
light stemming. You can see that using the analysis tools of the Solr administration panel. The
second filter defined is the lowercase filter – you can see how it works by referring to the How
to lowercase the whole string recipe in this chapter.
After adding this to your schema.xml file you should be able to use the light stemming
algorithm.
There's more...
Light stemming supports a number of different languages. To use the light stemmers for
your respective language, add the following filters to your type:
Language Filter
Russian solr.RussianLightStemFilterFactory
Portuguese solr.PortugueseLightStemFilterFactory
French solr.FrenchLightStemFilterFactory
German solr.GermanLightStemFilterFactory
Italian solr.ItalianLightStemFilterFactory
Spanish solr.SpanishLightStemFilterFactory
Hungarian solr.HungarianLightStemFilterFactory
Swedish solr.SwedishLightStemFilterFactory
Finish solr.FinnishLightStemFilterFactory
Indonesian solr.IndonesianStemFilterFactory
(with stemDerivational="false" attribute)
Norwegian solr.NorwegianLightStemFilterFactory
In the case of solr.IndonesianStemFilterFactory, you need to add the
stemDerivational="false" attribute in order to have it working as a light stemmer.
www.it-ebooks.info
Chapter 3
87
Lowercasing the whole string
Imagine you have a system where you only want to have perfect matches for names of
the documents. No matter what the cause of such a decision is, you would want such a
functionality. However there is one thing you would like to have – you would like your search
to be case independent, so it doesn't matter if the document or query is lower cased or
uppercased. Can we do something with that in Solr? Of course Solr can do that, and this
recipe will describe how to do it.
How to do it...
1. We start by defining the following index structure (add this to your schema.xml file
in the field definition section):
<field name="id " type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="string_lowercase" indexed="true"
stored="true" />
<field name="description" type="text" indexed="true" stored="true"
/>
2. To make our strings lowercase, we should add the following type definition to the
schema.xml file:
<fieldType name="string_lowercase" class="solr.TextField">
<analyzer>
<tokenizer class="solr.KeywordTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
</fieldType>
3. In order to test if everything is working as it should we need to index the following
XML file:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr Cookbook</field>
<field name="description">Simple description</field>
</doc>
</add>
4. Then we will run the following query in the web browser:
http://localhost:8983/solr/select?q=name:"solr cookbook"
You should get the indexed document in response. You should also be able to get the
indexed document in response to the following query:
http://localhost:8983/solr/select?q=name:"solr Cookbook"
www.it-ebooks.info
Analyzing Your Text Data
88
How it works...
Let's see how things work. First of all we have the field definition part of the schema.xml file.
This is pretty straightforward. We have three fields defined. First, the field named id which is
responsible for holding our unique identifier. The second one is the name field which is actually
our lowercased string field. The third field will hold the description of our documents and is
based on the standard text type defined in the example Solr deployment.
Now let's get back to our name field. It's based on the string_lowercase type. The string_
lowercase type consists of an analyzer which is defined as a tokenizer and one filter. The
solr.KeywordTokenizerFactory filter tells Solr that the data in that field should not be
tokenized in any way. It just should be passed as a single token to the token stream. Next we
have our filter, which changes all the characters to their lowercased equivalents. And that's how
this field analysis is performed.
The example queries show how the field behaves. It doesn't matter if you type lowercase or
uppercase characters, the document will be found anyway. What matters is that you must type
the whole string as it is because we used the keyword tokenizer which, as I already said, is not
tokenizing but just passing the whole data through the token stream as a single token.
Storing geographical points in the index
Imagine that up till now your application stores information about companies – not much
information, just unique identification and the company name. But now, your client wants
to store the location of the companies. In addition to that, your users would like to sort by
distance and filter by distance from a given point. Is this doable with Solr? Of course it is
and this recipe will show you how to do it.
How to do it...
1. For the purpose of this recipe, let's create a sample index structure. To do this, describe
the companies that we store in the index with three fields which are defined as follows
(add this to your schema.xml file to the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="location" type="location" indexed="true"
stored="true" />
www.it-ebooks.info
Chapter 3
89
2. Next we will also add one dynamic field (add this to your schema.xml file in the field
definition section):
<dynamicField name="*_coordinate" type="tdouble" indexed="true"
stored="false" />
3. The next step is to define the location type which should look like the following code:
<fieldType name="location" class="solr.LatLonType"
subFieldSuffix="_coordinate"/>
4. In addition to that, we will need the tdouble field type, which should look like the
following code:
<fieldType name="tdouble" class="solr.TrieDoubleField"
precisionStep="4" positionIncrementGap="0"/>
5. The next step is to create the example data looking like the following code (I named
the data file task9.xml):
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr.pl company</field>
<field name="location">54.02,23.10</field>
</doc>
</add>
6. And now let's index our data. To do that, we run the following command from the
exampledocs directory (put the task9.xml file there):
java -jar post.jar task9.xml
7. After indexing we should be able to use the query, such as the following one, to get
our data:
http://localhost:8983/solr/select?q=*:*&fq={!geofilt
sfield=location}&pt=54.00,23.00&d=10
The response should look like this:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
<str name="pt">54.00,23.00</str>
www.it-ebooks.info
Analyzing Your Text Data
90
<str name="d">10</str>
<str name="fq">{!geofiltsfield=location}</str>
<str name="q">*:*</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr.pl company</str>
<str name="location">54.02,23.10</str>
</doc>
</result>
</response>
How it works...
First of all we have three fields and one dynamic field defined in our schema.xml file. The first
field is the one responsible for holding the unique identifier. The second one holds the name of
the company. The third one named location is responsible for holding geographical points
and is based on the location type. The dynamic field – *_coordinate will be used internally
by our location type. It uses the tdouble field which was taken from the schema.xml file
distributed with Solr.
Next we have our location type definition. It's based on the solr.LatLonType class which
is specially designed for spatial search and is defined by a single attribute – subFieldSuffix.
That attribute specifies which fields (in our case it's the dynamic *_coordinate field) will be
used internally for holding the actual values of latitude and longitude.
So how does this type of field actually work? When defining a two-dimensional field, like we
did, there are actually three fields created in the index. The first field is named like the field we
added in the schema.xml file, so in our case it is location. This field will be responsible for
holding the stored value of the field. And one more thing – this field will only be created when
we set the field attribute store to true.
The next two fields are based on the defined dynamic field. Their names will be location
_0_coordinate and location_1_coordinate in our case. First we have the field
name, the _ character, then the index of the value, and finally the suffix defined by the
subFieldSuffix attribute of the type.
We can now look at the way the data is indexed. Please take a look at the example data file.
You can see that the values in each pair are separated by the comma character, and that's
how you can add the data to the index:
http://localhost:8983/solr/select?q=*:*&fq={!geofilt sfield=location}
&pt=54.00,23.00&d=10
www.it-ebooks.info
Chapter 3
91
Querying is a bit different. We send a query to retrieve all the documents from the index
(q=*:*). In addition to that, we want to filter the results by distance (the geofilt filter) with
the use of the location field (sfield=location). fq={!geofiltsfield=location}
uses the Solr local params syntax to send a distance filter. It can look strange comparing it to
a standard query, but it works. In addition to that, we've specified the point we will calculate
the distance from (the pt parameter) as 54.00,23.00. This is a pair of latitude and longitude
values separated by a comma character. The last parameter is d, which specifies the maximum
distance that documents can be, from the given point, to be considered as a match. We
specified it as 10 kilometers (d=10). As you can see, even though our document had its point
defined as 54.02,23.10 we found it with our query because of the distance we specified.
Stemming your data
One of the most common requirements I meet is stemming – the process of reducing the
word to their root form (or stems). Let's imagine the book e-commerce store, where you store
the books' names and descriptions. We want to be able to find words such as shown or showed
when you type the word show and vice versa. To achieve that we can use stemming algorithms.
This recipe will show you how to add stemming to your data analysis.
How to do it...
1. We need to start with the index structure. Let's assume that our index consists
of three fields (add this to your schema.xml file to the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="description" type="text_stem" indexed="true"
stored="true" />
2. Now let's define our text_stem type which should look like the following code:
<fieldType name="text_stem" class="solr.TextField">
<analyzer>
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.SnowballPorterFilterFactory" />
</analyzer>
</fieldType>
3. Now we can index our data – to do that we need to create an example data file,
for example, the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr cookbook</field>
www.it-ebooks.info
Analyzing Your Text Data
92
<field name="description">This is a book that I'll show</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Solr cookbook 2</field>
<field name="description">This is a book I showed</field>
</doc>
</add>
4. After indexing, we can test how our data was analyzed. To do that, let's run the
following query:
http://localhost:8983/solr/select?q=description:show
The result we get from Solr is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">description:show</str>
</lst>
</lst>
<result name="response" numFound="2" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr cookbook</str>
<arr name="description">
<str>This is a book that I'll show</str>
</arr>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Solr cookbook 2</str>
<arr name="description">
<str>This is a book I showed</str>
</arr>
</doc>
</result>
</response>
www.it-ebooks.info
Chapter 3
93
That's right, Solr found two documents matching the query which means that our fields and
types are working as intended.
How it works...
Our index consists of three fields; one holding the unique identifier of the document, the
second one holding the name of the document, and the third one holding the document
description. The last field is the field that will be stemmed.
The stemmed field is based on a Solr text field and has an analyzer that is used at query
and indexing time. It is tokenized on the basis of the whitespace characters, and then the
stemming filter is used. What does the filter do? It tries to bring the words to its root form,
which means that words such as shows, showing, and show will all be changed to show
– or at least they should be changed to that form.
Please note that in order to properly use stemming algorithms they should be used at query
and indexing time. This is a must because of the stemming results.
As you can see, our test data consists of two documents. Take a look at the description.
One of the documents contains the word showed and the other has the word show in
their description fields. After indexing and running the sample query, Solr would return
two documents in the results which means that the stemming did its job.
There's more...
There are too many languages that have stemming support integrated into Solr to mention
them all. If you are using a language other than English, please refer to the http://wiki.
apache.org/solr/LanguageAnalysis page of the Solr Wiki to find the appropriate filter.
Preparing text to perform an efficient
trailing wildcard search
Many users coming from traditional RDBMS systems are used to wildcard searches. The most
common of them are the ones using * characters which means zero or more characters. You
have probably seen searches like the one as follows:
AND name LIKE 'ABC12%'
So how to do that with Solr and not kill our Solr server? This task will show you how to prepare
your data and make efficient searches.
www.it-ebooks.info
Analyzing Your Text Data
94
How to do it...
1. The first step is to create a proper index structure. Let's assume we have the following
one (add this to your schema.xml file to the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="string_wildcard" indexed="true"
stored="true" />
2. Now, let's define our string_wildcard type (add this to the schema.xml file):
<fieldType name="string_wildcard" class="solr.TextField">
<analyzer type="index">
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.EdgeNGramFilterFactory" minGramSize="1"
maxGramSize="25" side="front"/>
</analyzer>
<analyzer type="query">
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
</analyzer>
</fieldType>
3. The third step is to create the example data which looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">XYZ1234ABC12POI</field>
</doc>
</add>
4. Now send the following query to Solr:
http://localhost:8983/solr/select?q=name:XYZ1
The Solr response for the previous query is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">name:XYZ1</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
www.it-ebooks.info
Chapter 3
95
<str name="id">1</str>
<str name="name">XYZ1234ABC12POI</str>
</doc>
</result>
</response>
As you can see, the document has been found, so our setup is working as intended.
How it works...
First of all let's look at our index structure defined in the schema.xml file. We have two fields
– one holding the unique identifier of the document (the id field) and the second one holding
the name of the document (the name field) which is actually the field we are interested in.
The name field is based on the new type we defined – string_wildcard. This type is
responsible for enabling trailing wildcards, the ones that will enable the LIKE 'WORD%' SQL
queries. As you can see the field type is divided into two analyzers, one for the data analysis
during indexing and the other for query processing. The querying analyzer is straight; it just
tokenizes the data on the basis of whitespace characters. Nothing more, nothing less.
Now the indexing time analysis (of course we are talking about the name field). Similar to
the query time, during indexing the data is tokenized on the basis of whitespace characters,
but there is also an additional filter defined. The solr.EdgeNGramFilterFactory class
is responsible for generating the filter called n-grams. In our setup, we tell Solr that the
minimum length of an n-gram is 1 (the minGramSize attribute) and the maximum length is
25 (the maxGramSize attribute). We also defined that the analysis should be started from the
beginning of the text (the side attribute set to front). So what would Solr do with our example
data? It will create the following tokens from the example text: X, XY, XYZ, XYZ1, XYZ12, and
so on. It will create tokens by adding the next character from the string to the previous token,
up to the maximum length of the n-gram filter that is given in the filter configuration.
So by typing the example query, we can be sure that the example document will be found
because of the n-gram filter defined in the configuration of the field. We also didn't define
the n-gram filter in the querying stage of analysis because we didn't want our query to be
analyzed in such a way that it could lead to false positive hits.
This functionality, as described, can also be used successfully to provide autocomplete
features to your application (if you are not familiar with the autocomplete feature please
take a look at http://en.wikipedia.org/wiki/Autocomplete).
Please remember that using n-grams will make your index a bit larger. Because of that you
should avoid having n-grams on all the fields in the index. You should carefully decide which
fields should use n-grams and which should not.
www.it-ebooks.info
Analyzing Your Text Data
96
There's more...
If you would like your field to be able to simulate SQL LIKE '%ABC' queries, you should
change the side attribute of the solr.EdgeNGramFilterFactory class to the back
value. The configuration should look like the following code snippet:
<filter class="solr.EdgeNGramFilterFactory" minGramSize="1"
maxGramSize="25" side="back"/>
It would change the end from which Solr starts to analyze the data. In our case it would start
from the end, and thus would produce n-grams as follows: I, OI, POI,2POI, 12POI, and so
on.
See also
ff If you want to propose another solution for that kind of search, please refer to the
recipe Splitting text by numbers and non-whitespace characters in this chapter
Splitting text by numbers and
non-whitespace characters
Analyzing the text data is not only about stemming, removing diacritics (if you are not familiar
with the word, please take a look at http://en.wikipedia.org/wiki/Diacritic), and
choosing the right format for the data. Let's assume that our client wants to be able to search
by words and numbers that construct product identifiers. For example, he would like to be able
to find the product identifier ABC1234XYZ by using ABC, 1234, or XYZ.
How to do it...
1. Let's start with the index that consists of three fields (add this to your schema.xml
file to the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true"/>
<field name="description" type="text_split" indexed="true"
stored="true" />
2. The second step is to define our text_split type which should look like the
following code (add this to your schema.xml file):
<fieldType name="text_split" class="solr.TextField">
<analyzer>
www.it-ebooks.info
Chapter 3
97
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.WordDelimiterFilterFactory"
generateWordParts="1" generateNumberParts="1" splitOnNumerics="1"
/>
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
</fieldType>
3. Now you can index your data. To do that let's create an example data file:
<add>
<doc>
<field name="id">1</field>
<field name="name">Test document</field>
<field name="description">ABC1234DEF BL-123_456
adding-documents</field>
</doc>
</add>
4. After indexing we can test how our data was analyzed. To do that let's run the
following query:
http://localhost:8983/solr/select?q=description:1234
Solr found our document which means that our field is working as intended.
The response from Solr will be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">description:1234</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="name">Test document</str>
<str name="description">ABC1234DEF BL-123_456 addingdocuments</
str></doc>
</result>
</response>
www.it-ebooks.info
Analyzing Your Text Data
98
How it works...
We have our index defined as three fields in the schema.xml file. We have a unique identifier
(an id field) indexed as a string value. We have a document name (the name field) indexed as
text (type which is provided with the example deployment of Solr), and a document description
(a description field) which is based on the text_split field which we defined ourselves.
Our type is defined to make the same text analysis, both on query time and on index time.
It consists of the whitespace tokenizer and two filters. The first filter is where the magic is
done. The solr.WordDelimiterFilterFactory behavior, in our case, is defined by
the following parameters:
ff generateWordParts: If this parameter is set to 1, it tells the filter to generate
parts of the word that are connected by non-alphanumeric characters such as
the dash character. For example, token ABC-EFG would be split into ABC and EFG.
ff generateNumberParts: If this parameter is set to 1, it tells the filter to generate
words from numbers connected by non-numeric characters, such as the dash
character. For example, token 123-456 would be split into 123 and 456.
ff splitOnNumerics: If this parameter is set to 1, it tells the filter to split letters
and numbers from each other. This means that token ABC123 would be split in
to ABC and 123.
The second filter is responsible for changing the words that lowercased the equivalents and
is discussed in the recipe How to lowercase the whole string in this chapter.
Therefore, after sending our test data to Solr we can run the example query to see if we
defined our filter properly. In addition, you probably know the result; yes, the result will contain
one document – the one that we send to Solr. That is because the word ABC1234DEF is split
into ABC, 1234, and DEF tokens, and thus can be found by the example query.
There's more...
In case you would like to preserve the original token that is passed to solr.
WordDelimiterFilterFactory, add the following attribute to the filter definition:
preserveOriginal="1"
See also
ff If you would like to know more about solr.WordDelimiterFilterFactory,
please refer to the recipe Splitting text by CamelCase in this chapter
www.it-ebooks.info
Chapter 3
99
Using Hunspell as a stemmer
Solr supports numerous stemmers for various languages. You can use various stemmers for
English, and there are ones available for French, German, and most of the European languages.
But sometimes they provide stemming results that are not of great quality. Alternatively, maybe
you are wondering if there is a stemmer out there that supports your language, which is not
included in Solr. No matter what the reason, if you are looking for a different stemmer you
should look at the Hunspell filter if it suits your needs, and this recipe will show you how to
use it in Solr.
Getting ready
Before starting, please check the http://wiki.openoffice.org/wiki/Dictionaries
page to see if Hunspell supports your language.
How to do it...
1. We should start by creating an index structure (just add the following entries to the
fields section of your schema.xml file) which looks like the following code:
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
<field name="name" type="text_english" indexed="true"
stored="true"/>
<field name="description" type="text_english" indexed="true"
stored="true" />
2. Now we should define the text_english type as follows (if you don't have it in your
schema.xml file, please add it to the types section of the file):
<fieldType name="text_english" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.PorterStemFilterFactory"/>
</analyzer>
</fieldType>
3. Let's assume that we are not satisfied with the quality of solr.
PorterStemFilterFactory and we would like to have that improved
by using Hunspell. In order to do that, we need to change the solr.
PorterStemFilterFactory definition to the following one:
<filter class="solr.HunspellStemFilterFactory" dictionary="en_
GB.dic" affix="en_GB.aff" ignoreCase="true" />
www.it-ebooks.info
Analyzing Your Text Data
100
So the final text_english type configuration would look like the following code:
<fieldType name="text_english" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.HunspellStemFilterFactory" dictionary=
"en_GB.dic" affix="en_GB.aff" ignoreCase="true" />
</analyzer>
</fieldType>
4. The last thing we need to do is place the en_GB.dic and en_GB.aff files in the
Solr conf directory (the one where you have all your configuration files stored). Those
files can be found at the http://wiki.openoffice.org/wiki/Dictionaries
page. They are the dictionaries for English used in Great Britain. And that's all;
nothing more needs to be done.
How it works...
Our index structure is very simple – it contains three fields of which two (name and
description) are used for full text searching, and we want those fields to use the text_
english field type and thus use solr.HunspellStemFilterFactory for stemming.
The configuration of the solr.HunspellStemFilterFactory filter factory is not difficult.
Of course, there are a few attributes of the filter tag that need to be specified:
ff class: This specifies the class implementing the filter factory we want to use,
which in our case is solr.HunspellStemFilterFactory.
ff dictionary: This specifies the name of the .dic file of the dictionary we want
to use.
ff affix: This specifies the name of the .aff file of the dictionary we want to use.
ff ignoreCase: This is used to ignore cases when matching words against the
dictionary. In our case, we want to ignore cases.
The last thing we need to do is provide Solr with the dictionary files so that the Hunspell filter
can do its work. Although this is simple, this part is crucial. The dictionaries define how well
Hunspell will work. Before using a new dictionary, you should always properly conduct A/B
testing and see if things did not get worse in your case.
One last thing about the dictionaries. If you would like to use other languages with Hunspell,
the only thing you will need to do is provide the new dictionary file and change the name
of the dictionaries, so change the dictionary and affix attributes of the solr.
HunspellStemFilterFactory definition.
www.it-ebooks.info
Chapter 3
101
Using your own stemming dictionary
Sometimes, stemmers provided with Lucene and Solr don't do what you would like them
to do. That's because most of them are based on an algorithmic approach and even the
best algorithms can come to a place where you won't like the results of their work and you
would like to make some modifications. Of course, modifications to the algorithm code can
be challenging and we don't usually do that. The good thing is that Solr supports a method
of overriding the stemmer work and this recipe will show you how to use it.
Getting ready
Before we continue please remember that the method described in this recipe may not work
with custom stemmers that are not provided with Solr.
How to do it... Let's say that we want some of the words to be stemmed in a way we want. For
example,
we want the word dogs to be stemmed as doggie (of course that's only an example).
1. What we have to do first is write the words dogs and doggie in a file (let's call it
override.txt). Words should be separated from each other by a tab character
and each line of the file should contain a single stemming overwrite. For example,
our override.txt file could look like this:
dogs doggie
2. Now we should put the override.txt file in the same directory as the schema.
xml file (usually its conf). Please remember to have that file written in UTF-8
encoding. If you have characters from the classic ASCII character set, they won't
be recognized properly if you don't use UTF-8.
3. Next we need to add the solr.StemmerOverrideFilterFactory filter to
our text types. I assume we only use text_english with the following definition
(put the following definition to your types section of the schema.xml file):
<fieldType name="text_english" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.PorterStemFilterFactory"/>
</analyzer>
</fieldType>
www.it-ebooks.info
Analyzing Your Text Data
102
In order for our list of protected words to work, we need to put solr.
StemmerOverrideFilterFactory before the stemming, which is solr.
PorterStemFilterFactory in our case. The final type definition for text_
english would look like the following code:
<fieldType name="text_english" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.StemmerOverrideFilterFactory"
dictionary="dict.txt" />
<filter class="solr.PorterStemFilterFactory"/>
</analyzer>
</fieldType>
This is what the analysis page of the Solr administration pages shows:
4. That's all. Now, the fields that are based on the text_english type will not
be stemmed.
www.it-ebooks.info
Chapter 3
103
How it works...
The work of the solr.StemmerOverrideFilterFactory class is simple – it changes the
words we want it to change and then marks them as protected so that the stemmer won't do
any further processing of those words. In order for this functionality to work properly, you should
remember to put solr.StemmerOverrideFilterFactory before any stemmers in your
analysis chain.
The actual configuration of solr.StemmerOverrideFilterFactory is pretty simple and
similar to other filters. It requires two attributes; the usual class attribute, which informs Solr
which filter factory should be used in order to create the filter, and the dictionary attribute,
which specifies the name of the file containing the dictionary that we want to use
for our custom stemming.
Looking at the analysis page of the Solr administration pages, we can see that our dogs
word was protected from being stemmed with the default stemmer and changed to what
we wanted, that is, doggie.
Protecting words from being stemmed
Sometimes, the stemming filters available in Solr do more than you would like them to do.
For example, they can stem brand names or the second name of a person. Sometimes, you
would like to protect some of the words that have a special meaning in your system or you
know that some words would cause trouble to a stemmer or stemmers. This recipe will show
you how to do it.
Getting started
Before we continue, please remember that the method described in this recipe may not work
with custom stemmers that are not provided with Solr.
How to do it...
In order to have the defined words protected we need a list of them. Let's say that we don't
want the words cats and dogs to be stemmed.
1. To achieve that, we should start by writing the words we want to be protected from
stemming into a file. Let's create the file called dontstem.txt with the following
contents:
cats
dogs
www.it-ebooks.info
Analyzing Your Text Data
104
2. Now let's put the created file in the same directory as the schema.xml file (usually
it's the conf directory). Please remember to have that file written in UTF-8 encoding.
If you have characters from the classic ASCII character set they won't be recognized
properly if you don't use UTF-8.
3. Now, we need to add the solr.KeywordMarkerFilterFactory filter to our text
types. I assume we only use the text_english type with the following definition:
<fieldType name="text_english" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.PorterStemFilterFactory"/>
</analyzer>
</fieldType>
In order for our list of protected words to work, we need to put solr.
KeywordMarkerFilterFactory before the stemming, which is solr.
PorterStemFilterFactory in our case. So the final type definition for the text_
english type would look like the following code:
<fieldType name="text_english" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.KeywordMarkerFilterFactory"
protected="dontstem.txt" />
<filter class="solr.PorterStemFilterFactory"/>
</analyzer>
</fieldType>
www.it-ebooks.info
Chapter 3
105
This is what the analysis page of the Solr administration pages shows:
4. That's all. Now, the fields that are based on the text_english type won't
be stemmed.
www.it-ebooks.info
Analyzing Your Text Data
106
How it works...
The whole idea is pretty simple. With the use of solr.KeywordMarkerFilterFactory,
we mark the protected words and that information is used by the stemmers available in Solr
and Lucene. In order for this functionality to work properly, you should remember to put the
solr.KeywordMarkerFilterFactory filter before any stemmers in your analysis chain.
The actual configuration of solr.KeywordMarkerFilterFactory is pretty simple and
similar to other filters. It requires two attributes; the usual class attribute, which informs
Solr which filter factory should be used in order to create the filter, and the attribute protected
which specifies the name of the file containing words that we want to protect from stemming.
Looking at the analysis page of the Solr administration pages, we can see that our
dogs word was protected from being stemmed, compared to the birds word which
was changed to bird.
www.it-ebooks.info
4
Querying Solr
In this chapter, we will cover:
ff Asking for a particular field value
ff Sorting results by a field value
ff How to search for a phrase, not a single word
ff Boosting phrases over words
ff Positioning some documents over others in a query
ff Positioning documents with words closer to each other first
ff Sorting results by a distance from a point
ff Getting documents with only a partial match
ff Affecting scoring with functions
ff Nesting queries
ff Modifying returned documents
ff Using parent-child relationships
ff Ignoring typos in terms of the performance
ff Detecting and omitting duplicate documents
ff Using field aliases
ff Returning a value of a function in the results
www.it-ebooks.info
Querying Solr
108
Introduction
Making a simple query is not a hard task, but making a complex one, with faceting, local
params, parameters dereferencing, and phrase queries can be a challenging task. On the top
of all that, you must remember to write your query with performance factors in mind. That's
why something that is simple at first sight can turn into something more challenging such as
writing a good, complex query. This chapter will try to guide you through some of the tasks you
may encounter during your everyday work with Solr.
Asking for a particular field value
There are many cases where you will want to ask for a particular field value. For example,
when searching for the author of a book in the Internet library or an e-commerce shop. Of
course Solr can do that, and this recipe will show you how to do it.
How to do it...
1. Let's start with the following index structure (just add the following to your
schema.xml file to the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="title" type="text" indexed="true" stored="true" />
<field name="author" type="string" indexed="true" stored="true"/>
2. To ask for a value in the author field, send the following query to Solr:
http://localhost:8983/solr/select?q=author:rafal
That's all. The documents you'll get from Solr will be the ones with the requested value in the
author field. Remember that the query shown in the example uses the standard query parser,
not DisMax.
How it works...
We defined three fields in the index, but this was only for the purpose of the example. As
you can see in the previous query, to ask for a particular field value, you need to send a q
parameter syntax such as FIELD_NAME:VALUE, and that's all there is to it. Of course you can
add the logical operator to the query to make it more complex. Remember that if you omit the
field name from the query your values will be checked again in the default search field that is
defined in the schema.xml file.
www.it-ebooks.info
Chapter 4
109
There's more...
When asking for a particular field value, there are a few things that are useful to know:
Querying for a particular value using the DisMax query parser
Sometimes you may need to ask for a particular field value when using the DisMax query parser.
Unfortunately the DisMax query parser doesn't support full Lucene query syntax and thus you
can't send a query like that, but there is a solution to it. You can use the extended DisMax query
parser which is an evolved DisMax query parser. It has the same list of functionalities as DisMax
and it also supports full Lucene query syntax. The following is the query shown in this task, but
by using edismax, it would look like the following:
http://localhost:8983/solr/select?q=author:rafal&defType=edismax
Querying for multiple values in the same field
You may sometimes need to ask for multiple values in a single field. For example, let's
suppose that you want to find the solr and cookbook values in the title field. To do
that you should run the following query (notice the brackets surrounding the values):
http://localhost:8983/solr/select?q=author:(solr cookbook)
Sorting results by a field value
Imagine an e-commerce site where you can't choose the sorting order of the results, you
can only browse the search results page-by-page and nothing more. That's terrible, right?
That's why with Solr you can specify the sort fields and order in which your search results
should be sorted. This recipe will show you how to do it.
How to do it...
Let's assume that you want to sort your data by an additional field, for example, the field that
contains the name of the author of the book.
1. First we add the following to your schema.xml file's field section:
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="title" type="text" indexed="true" stored="true" />
<field name="author" type="string" indexed="true" stored="true"/>
2. Now, let's create a simple data file which will look like the following code:
<add>
<doc>
www.it-ebooks.info
Querying Solr
110
<field name="id">1</field>
<field name="title">Solr cookbook</field>
<field name="author">Rafal Kuc</field>
</doc>
<doc>
<field name="id">2</field>
<field name="title">Solr results</field>
<field name="author">John Doe</field>
</doc>
<doc>
<field name="id">3</field>
<field name="title">Solr perfect search</field>
<field name="author">John Doe</field>
</doc>
</add>
3. As I wrote earlier, we want to sort the result list by author name in ascending order.
Additionally, we want the books that have the same author to be sorted by relevance
in the descending order. To do that we must send the following query
to Solr:
http://localhost:8983/solr/select?q=solr&sort=author+asc,
score+desc
The results returned by Solr are as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">solr</str>
<str name="sort">author asc,score desc</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">2</str>
<str name="title">Solr results</str>
<str name="author">John Doe</str>
</doc>
<doc>
<str name="id">3</str>
www.it-ebooks.info
Chapter 4
111
<str name="title">Solr perfect search</str>
<str name="author">John Doe</str>
</doc>
<doc>
<str name="id">1</str>
<str name="title">Solr cookbook</str>
<str name="author">Rafal Kuc</str>
</doc>
</result>
</response>
As you can see, our data is sorted exactly how we wanted it to be.
How it works...
As you can see I defined three fields in our index. The most interesting to us is the author
field, based on which we will perform the sorting operation. Notice one thing – the type on
which the field is based is the string type. In order to sort the values of the field from the
index, you need to prepare your data well, that is, use the appropriate number types (the ones
based on the Trie types), and to sort the text field using the string field type (or text type
using the KeywordTokenizer type and a lowercase filter).
The following what you see is the data which is very simple – it only adds three documents to
the index.
I've added one additional parameter to the query that was sent to Solr – the sort parameter.
This parameter defines the sort field with the order. Each field must be followed by the order in
which the data should be sorted; asc which tells Solr to sort the data in the ascending order,
and desc which tells Solr to sort in the descending order. Pairs of field and order should be
delimited with the comma character as shown in the example.
The result list that Solr returned tells us that we did a perfect job on defining the sort order.
How to search for a phrase, not a single
word
Imagine that you have an application that searches within millions of documents that
are generated by a law company. One of the requirements is to search the titles of the
documents as a phrase, but with stemming and lowercasing. So a string-based field is
not an option. In that case, is it possible to achieve this using Solr? Yes, and this recipe will
show you how to do that.
www.it-ebooks.info
Querying Solr
112
How to do it...
1. First let's define the following type (add this part to your schema.xml file):
<fieldType name="text" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.SnowballPorterFilterFactory"
language="English"/>
</analyzer>
</fieldType>
2. Now let's add the following fields to our schema.xml file:
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="title" type="text" indexed="true" stored="true" />
3. The third step is to create an example data which looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="title">2012 report</field>
</doc>
<doc>
<field name="id">2</field>
<field name="title">2009 report</field>
</doc>
<doc>
<field name="id">3</field>
<field name="title">2012 draft report</field>
</doc>
</add>
4. Now let's try to find the documents that have the phrase 2012 report in them.
To do that, make the following query to Solr:
http://localhost:8983/solr/select?q=title:"2012 report"
The result should be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
www.it-ebooks.info
Chapter 4
113
<int name="QTime">1</int>
<lst name="params">
<str name="q">title:"2012 report"</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="title">2012 report</str>
</doc>
</result>
</response>
The debug query (the debugQuery=on parameter) shows us the Lucene query that
was created:
<str name="parsedquery">PhraseQuery(title:"2012 report")</str>
As you can see we only got one document which is perfectly good. Now let's see how
that happened.
How it works...
As I said in the Introduction section, our requirement was to search for phrases over fields
that are stemmed and lowercased. If you want to know more about stemming please refer
to the Stemming your data recipe in Chapter 3, Analyzing Your Text Data. Lowercasing is
described in the Lowercasing the whole string recipe in Chapter 3.
We only need two fields because we will only search the title, and return the title and
unique identifier of the field; thus the configuration is as shown in the example.
The example data is quite simple so I'll skip commenting on it.
The query is something that we should be more interested in. The query is made to the standard
Solr query parser, thus we can specify the field name and the value we are looking for. The query
differs from the standard word searching query by the use of the " character at the start and
end of the query. It tells Solr to use the phrase query instead of the term query. Using the phrase
query means that Solr will search for the whole phrase not a single word. That's why only the
document with identifier 1 was found, because the third document did not match the phrase.
The debug query only ensured that the phrase query was made instead of the usual term
query, and Solr showed us that we created the right query.
www.it-ebooks.info
Querying Solr
114
There's more...
When using queries there is one thing that is very useful to know.
Defining the distance between words in a phrase
You may sometimes need to find documents that match a phrase, but are separated by some
other words. Let's assume that you would like to find the first and third document in
our example. This means that you want documents that could have an additional word
between the word 2010 and report. To do that, we add a so-called phrase slop to the
phrase. In our case the distance (slop) between words can be the maximum of one word, so
we add the ~1 part after the phrase definition:
http://localhost:8983/solr/select?q=title:"2012 report"~1
Boosting phrases over words
Imagine you are a search expert at a leading e-commerce shop in your region. One day
disaster strikes and your marketing department says that the search results are not good
enough. They would like you to favor documents that have the exact phrase typed by the
user over the documents that have matches for separate words. Can you do it? Of course
you can, and this recipe will show you how to achieve it.
Getting ready
Before you start reading this task I suggest you read the How to search for a phrase not a
single word recipe in this chapter. It will allow you to understand the recipe better.
How to do it...
I assume that we will be using the DisMax query parser, not the standard one. We will also
use the same schema.xml file that was used in the How to search for a phrase not a single
word recipe in this chapter.
1. Let's start with our sample data file which looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="title">Annual 2012 report last draft</field>
</doc>
<doc>
<field name="id">2</field>
<field name="title">2011 report</field>
www.it-ebooks.info
Chapter 4
115
</doc>
<doc>
<field name="id">3</field>
<field name="title">2012 draft report</field>
</doc>
</add>
2. As I already mentioned, we would like to boost those documents that have phrase
matches over others matching the query. To do that, run the following query to your
Solr instance:
http://localhost:8983/solr/select?defType=dismax&pf=title^100&q=20
12+report&qf=title&q.op=AND
You should get the following response:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="pf">title^100</str>
<str name="q">2012 report</str>
<str name="qf">title</str>
<str name="q.op">AND</str>
<str name="defType">dismax</str>
</lst>
</lst>
<result name="response" numFound="2" start="0">
<doc>
<str name="id">1</str>
<str name="title">Annual 2012 report last draft</str>
</doc>
<doc>
<str name="id">3</str>
<str name="title">2012 draft report</str>
</doc>
</result>
</response>
3. To visualize the results better, I decided to include the results returned by Solr for the
same query but without adding the pf parameter, and received the following results:
<?xml version="1.0" encoding="UTF-8"?>
<response>
www.it-ebooks.info
Querying Solr
116
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
<str name="qf">title</str>
<str name=" defType">dismax</str>
<str name="q.op">AND</str>
<str name="q">2012 report</str>
</lst>
</lst>
<result name="response" numFound="2" start="0">
<doc>
<str name="id">3</str>
<str name="title">2012 draft report</str>
</doc>
<doc>
<str name="id">1</str>
<str name="title">Annual 2012 report last draft</str>
</doc>
</result>
</response>
As you can see we fulfilled our requirement.
How it works...
Some of the parameters that are present in the example query may be new to you. The first
parameter is defType that tells Solr which query parser we will be using. In this example we
will be using the DisMax query parser (if you are not familiar with the DisMax query parser
please have a look at the following address http://wiki.apache.org/solr/DisMax).
One of the features of this query parser is the ability to tell what field should be used to search
for phrases, and we do that by adding the pf parameter. The pf parameter takes a list of
fields with the boost that corresponds to them, for example, pf=title^100 which means
that the phrase found in the title field will be boosted with a value of 100. The q parameter is
the standard query parameter that you are familiar with. This time we passed the words we
are searching for and the logical operator AND. This means that we are looking for documents
which contain the words 2012 and report. You should remember that you can't pass queries
such as fieldname:value to the q parameter and use the DisMax query parser. The fields
you are searching against should be specified using the qf parameter. In our case we told Solr
that we will be searching against the title field. We also included the q.op=AND parameter
because we want AND to be our logical operator for the query.
The results show us that we found two documents. The one that matches the exact query is
returned first and that is what we intended to achieve.
www.it-ebooks.info
Chapter 4
117
There's more...
You can of course boost phrases with standard query parsers, but that's not as elegant as the
DisMax query parser method. To achieve similar results, you should run the following query to
your Solr instance:
http://localhost:8983/solr/select?q=title:(2012+AND+report)+OR+title:
"2012+report"^100
The above query tells Solr to search for the words 2010 and report in a title field, and
search for a 2012 report phrase and, if found, to boost that phrase with the value of 100.
Positioning some documents over others on
a query
Imagine a situation when your client tells you that he/she wants to promote some of his/her
products by placing them at the top of the search result list. Additionally, the client would like
the product list to be flexible, that is, he/she would like to be able to define the list for some
queries and not for others. Many thoughts come into your mind such as boosting, index time
boosting, or maybe some special field to achieve that. But don't bother, Solr can help you with
a component that is known as solr.QueryElevationComponent.
How to do it...
The following recipe will help you to place document over others based on your priorities:
1. First of all let's modify the solrconfig.xml document. We need to add
the component definition. To do that add the following section to your
solrconfig.xml file:
<searchComponent name="elevator" class="solr.
QueryElevationComponent" >
<str name="queryFieldType">string</str>
<str name="config-file">elevate.xml</str>
</searchComponent>
2. Now let's add the proper request handler that will include the elevation component.
We will name it /promotion. Add this to your solrconfig.xml file:
<requestHandler name="/promotion" class="solr.SearchHandler">
<lst name="defaults">
www.it-ebooks.info
Querying Solr
118
<str name="echoParams">explicit</str>
<int name="rows">10</int>
<str name="df">name</str>
</lst>
<arr name="last-components">
<str>elevator</str>
</arr>
</requestHandler>
3. You may notice that the query elevation component contained information about
a mysterious elevate.xml file. Let's assume that we want the documents with
identifiers 3 and 1 to be in the first two places in the results list for the solr
query. For now you need to create that file in the configuration directory of your
Solr instance and paste the following content:
<?xml version="1.0" encoding="UTF-8" ?>
<elevate>
<query text="solr">
<doc id="3" />
<doc id="1" />
</query>
</elevate>
4. Now it's time for the schema.xml file. Our field definition part of the file should
contain the following code:
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
5. Now let's index the following data file:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr cookbook</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Solr master pieces</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Solr annual report</field>
</doc>
</add>
www.it-ebooks.info
Chapter 4
119
6. Now we can run Solr and test our configuration. To do that let's run the following query:
http://localhost:8983/solr/promotion?q=solr
The previous query should return the following result:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
<lst name="params">
<str name="q">solr</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">3</str>
<str name="name">Solr annual report</str>
</doc>
<doc>
<str name="id">1</str>
<str name="name">Solr cookbook</str>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Solr master pieces</str>
</doc>
</result>
</response>
The query without using the elevation component returned the following result:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">solr</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr cookbook</str>
</doc>
www.it-ebooks.info
Querying Solr
120
<doc>
<str name="id">2</str>
<str name="name">Solr master pieces</str>
</doc>
<doc>
<str name="id">3</str>
<str name="name">Solr annual report</str>
</doc>
</result>
</response>
As you can see the component worked. Now let's see how it works.
How it works...
The first part of the configuration defines a new search component with a name under
which the component will be visible to other components and the search handler (the
name attribute). In our case the component name is elevator and it's based on the
solr.QueryElevationComponent class (the class attribute). The following that
we have are two additional attributes that define the elevation component's behavior:
ff queryFieldType: This attribute tells Solr what type of field should be used to parse
the query text that is given to the component (for example, if you want the component
to ignore the letter case, you should set this parameter to the field type that
lowercases its contents)
ff config-file: This specifies the configuration file which will be used by the component
The next part of the solrconfig.xml configuration procedure is the search handler
definition. It simply tells Solr to create a new search handler with the name of /promotion
(to be the value of the name attribute) and using the solr.SearchHandler class (the class
attribute). In addition to that, the handler definition also tells Solr to include the component
named elevator in this search handler. This means that this search handler will use our
defined component. For your information, you can use more than one search component in a
single search handler. We've also included some standard parameters to the handler, such as
df, which specifies the default search field.
What we see next is the actual configuration of the elevator component. You can see that
there is a query defined (the query XML tag) with an attribute text="solr". This defines
the behavior of the component when a user passes solr to the q parameter. Under this tag
you can see a list of the documents' unique identifiers that will be placed at the top of the
results list for the defined query. Each document is defined by a doc tag and an id attribute
(which have to be defined on the basis of solr.StrField) which holds the unique identifier.
You can have multiple query tags in a single configuration file which means that the elevation
component can be used for a variety of queries.
www.it-ebooks.info
Chapter 4
121
The index configuration and example datafile are fairly simple. The index contains two fields
that are responsible for holding information about the document. In the example datafile,
we can see three documents present. As the explanation is not crucial, I'll skip discussing
it further.
The query you see in the example returns all the documents. The query is made to our new
handler with just a simple one word q parameter (the default search field is set to name in the
schema.xml file). Recall the elevate.xml file and the documents we defined for the query
we just passed to Solr. We told Solr that we want the document with id=3 in the first place of
the results list and we want the document with id=1 in the second place of the results list. As
you can see, the documents were positioned exactly as we wanted them so it seems that the
component did its job.
There's more...
There is one more thing I would like to say about the query elevation functionality in Solr.
Excluding documents with QueryElevationComponent
The elevate component can not only place documents on top of the results list, but it can also
exclude documents from the results list. To do that you should add the exclude="true"
attribute to the document definition in your elevate.xml file. This is what the example file
would look like:
<?xml version="1.0" encoding="UTF-8" ?>
<elevate>
<query text="solr">
<doc id="3" />
<doc id="1" exclude="true" />
<doc id="2" exclude="true" />
</query>
</elevate>
See also
If you would like to know how to mark the documents that were positioned by the solr.
QueryElevationComponent class, please read the Modifying returned documents recipe
in this chapter.
www.it-ebooks.info
Querying Solr
122
Positioning documents with words closer to
each other first
Imagine an e-commerce book shop where the users have only one way to find books, that is,
by searching. Most of the users requested that the OR operator should be the default logical
operator, so that we can have many results for most of the popular queries. Once every few
days an angry user calls the call center and says that by typing "solr cookbook" the first few
pages are not relevant to the query he/she typed in, so in other words this is not what he/
she searched for. So that's the problem, now what can be done? The answer is to boost
documents with query words closer to each other. This recipe will show you how to do it.
How to do it...
For the purpose of this task I will be using the DisMax query parser.
1. Let's start with the following index structure (just add the following to your
schema.xml file to the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="title" type="text" indexed="true" stored="true" />
<field name="author" type="string" indexed="true" stored="true"/>
2. Now, let's index the following data:
<add>
<doc>
<field name="id">1</field>
<field name="title">Solr perfect search cookbook</field>
</doc>
<doc>
<field name="id">2</field>
<field name="title">Solr example cookbook</field>
</doc>
<doc>
<field name="id">3</field>
<field name="title">Solr cookbook</field>
</doc>
</add>
3. In addition to that we need to define a new request handler in the solrconfig.xml
file, which looks like the following code:
<requestHandler name="/closer" class="solr.
StandardRequestHandler">
www.it-ebooks.info
Chapter 4
123
<lst name="defaults">
<str name="q">_query_:"{!dismax qf=$qfQuery mm=1 pf=$pfQuery
bq=$boostQuery v=$mainQuery}"</str>
<str name="qfQuery">title</str>
<str name="pfQuery">title^1000</str>
<str name="boostQuery">_query_:"{!dismax qf=$boostQueryQf
mm=100% v=$mainQuery}"^100</str>
<str name="boostQueryQf">title</str>
<str name="df">title</str>
</lst>
</requestHandler>
4. As I wrote earlier, we want to get the documents with the words typed by the user close
to each other first in the result list. Let's assume our user typed in the dreaded solr
cookbook query. To handle the query we use the new /closer request handler we
defined earlier and we send the query using the mainQuery parameter, not the q one
(I'll describe why this is so later). So the whole query looks as follows:
http://localhost:8983/solr/closer?mainQuery=solr+cookbook&fl=score,
id,title
The result list returned by Solr is the following:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">3</int>
</lst>
<result name="response" numFound="3" start="0"
maxScore="0.93303263">
<doc>
<str name="id">3</str>
<str name="title">Solr cookbook</str>
<float name="score">0.93303263</float>
</doc>
<doc>
<str name="id">1</str>
<str name="title">Solr perfect search cookbook</str>
<float name="score">0.035882458</float>
</doc>
<doc>
<str name="id">2</str>
<str name="title">Solr example cookbook</str>
<float name="score">0.035882458</float>
www.it-ebooks.info
Querying Solr
124
</doc>
</result>
</response>
We received the documents in the way we wanted. Now let's look at how that happened.
How it works...
First of all we have the index structure. For the purpose of the example, I assumed that our
book description will consist of three fields and we will be searching with the use of the title
field which is based on the standard text field defined in the standard schema.xml
file provided with the Solr distribution.
As you can see in the provided data file example there are three books. The first book has
two other words between the words solr and cookbook. The second book has one word
between the given words, and the third book has the words next to each other. In a perfect
situation, we would like to have the third book from the example file as the first one in the
result list, the second book from the file in the second place, and the first book from the
example data file as the last in the results list.
Now let's take a look at our new request handler. We defined it to be available under a name
/closer (the name attribute of the requestHandler tag). We also said that it should be
based on the solr.StandardRequestHandler class (in the class attribute). Next, in
the defaults list we have a number of parameters defining the query behavior we want to
achieve. First of all we have the q parameter. This contains the query constructed with the
use of local params. The _query_:"…" part of the q parameter is a way of specifying the
new query. We tell Solr that we want to use DisMax query parser (the !dismax part) and we
want to pass the value of the qfQuery parameter as the qf DisMax parser parameter. We
also want the "minimum should match" parameter to be equal one (mm=1), we want a phrase
query to be used (the one which is defined in the pfQuery (pf=$pfQuery) parameter) and
we want the boost query to be used – the one that is defined in the boostQuery parameter
(bq=$boostQuery). Finally we specify that we will pass the actual user query not with the q
parameter, but instead with the mainQuery parameter (v=$mainQuery).
Next we have boostQuery – another query constructed using local parameters. As you can
see we use the DisMax query parser (the !dismax query part), and we specify the qf and
mm DisMax query parser parameters. The value of the qf parameter will be taken from the
boostQueryQf parameter and the value of the mm parameter is set to 100%, so we want the
boost query to return only the documents that have all the words specified by the user. The
v attribute is responsible for passing the actual query, which in our case will be stored in the
mainQuery (v=$mainQuery part) parameter. We also said that we want our boost query
to be boosted by 100 (the ^100 part of the query). The boostQueryQf parameter is used
by the boost query to specify which fields should be used for search, in the query used for
boosting. Finally, the df parameter specifies the default search field.
www.it-ebooks.info
Chapter 4
125
Now let's discuss what the query is actually doing. The first query tells Solr to return all the
documents with at least one of the words that the user entered (this is defined by setting the
mm parameter to 1). But we also say that we want to boost phrases; that's why we use a phrase
query on the title field. In addition to that we specified that we want to use our boost query,
which will increase the boost of all the documents that have all the words entered by the user
(mm=100%). Combining all those factors we will end up with results that have the top documents
occupied by those documents that have all the words entered by the user present in the title
field and where all those words are close to each other.
The query is simple. We specify that we want to get a calculated score in the results for
each document, we want the id field, and the title field. We also pass the mainQuery
parameter because we have the v attribute of both the q and boostQuery parameters set
to the $mainQuery parameter. This means that Solr will take the mainQuery parameter
value and pass it to the v parameter of those queries. Because we prepared our request
handler configuration and pasted it into solrconfig.xml, now at query time we only
need to pass a single parameter that passes the words specified by our users.
The last thing is the results list. As you can see the documents are sorted in the way we
wanted them to be. You should take a look at one thing – the score field. This field shows
how relevant the document is to the query we sent to Solr.
Sorting results by a distance from a point
Suppose we have a search application that is storing information about the companies.
Every company is described by a name and two floating point numbers that represent the
geographical location of the company. One day your boss comes to your room and says that
he/she wants the search results to be sorted by distance from the user's location. This recipe
will show you how to do it.
Getting ready
Before continuing please read the Storing geographical points in the index recipe from
Chapter 3, Analyzing Your Text Data.
How to do it...
1. Let's begin with the following index (add the following to your schema.xml file to the
fields section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true"/>
www.it-ebooks.info
Querying Solr
126
<field name="location" type="location" indexed="true"
stored="true" />
<dynamicField name="*_coordinate" type="tdouble" indexed="true"
stored="false" />
2. We also have the following type defined in the schema.xml file:
<fieldType name="location" class="solr.LatLonType"
subFieldSuffix="_coordinate"/>
I assumed that the user location will be provided from the application that is making
a query.
3. Now let's index our example data file, which looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Company 1</field>
<field name="location">56.4,40.2</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Company 2</field>
<field name="location">50.1,48.9</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Company 3</field>
<field name="location">23.18,39.1</field>
</doc>
</add>
4. So our user is standing at the North Pole and is using our search application. Now
let's assume that we want to get the companies sorted in such a way that the ones
that are nearer the user are at the top of the results list. The query to find such
companies could look like the following query:
http://localhost:8983/solr/select?q=company&sort=geodist(location,
0.0,0.0)+asc
The result of that query would look as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
www.it-ebooks.info
Chapter 4
127
<int name="QTime">1</int>
<lst name="params">
<str name="q">company</str>
<str name="sort">geodist(location,0.0,0.0) asc</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">3</str>
<str name="name">Company 3</str>
<str name="location">23.18,39.1</str>
</doc>
<doc>
<str name="id">1</str>
<str name="name">Company 1</str>
<str name="location">56.4,40.2</str>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Company 2</str>
<str name="location">50.1,48.9</str>
</doc>
</result>
</response>
If you would like to calculate the distance by hand, you would see that the results are
sorted as they should be.
How it works...
As you can see in the index structure and in the data, every company is described by the
following three fields:
ff id: This specifies the unique identifier
ff name: This specifies the company name
ff location: This specifies the latitude and longitude of the company location
I'll skip commenting on how the actual location of the company is stored. If you want to
read more about it, please refer to the Storing geographical points in the index recipe
from Chapter 3, Analyzing Your Text Data.
www.it-ebooks.info
Querying Solr
128
We wanted to get the companies that match the given query and are sorted in the ascending
order from the North Pole. To do that we run a standard query with a non-standard sort.
The sort parameter consists of a function name, geodist, which calculates the distance
between points. In our example the function takes three parameters:
ff The first parameter specifies the field in the index that should be used to calculate
the distance
ff The second parameter is the latitude value of the point from which the distance will
be calculated
ff The third parameter is the longitude value of the point from which the distance will
be calculated
After the function there is the order of the sort which in our case is asc (ascending order).
See also
If you would like to learn how to return the calculated distance that we used for sorting please
refer to the Returning the value of a function in results recipe in this chapter.
Getting documents with only a partial match
Imagine a situation where you have an e-commerce library and you want to make a search
algorithm that tries to bring the best search results to your customers. But you noticed that
many of your customers tend to make queries with too many words, which result in an empty
results list. So you decided to make a query that will require the maximum of two of the
words that the user entered to be matched. This recipe will show you how to do it.
Getting ready
This method can only be used with the DisMax query parser. The standard query parser doesn't
support the mm parameter.
How to do it...
1. Let's begin with creating our index that has the following structure (add this to your
schema.xml file to the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="title" type="text" indexed="true" stored="true" />
As you can see our books are described by two fields.
www.it-ebooks.info
Chapter 4
129
2. Now let's look at the example data:
<add>
<doc>
<field name="id">1</field>
<field name="title">Solrcook book revised</field>
</doc>
<doc>
<field name="id">2</field>
<field name="title">Some book that was revised</field>
</doc>
<doc>
<field name="id">3</field>
<field name="title">Another revised book</field>
</doc>
</add>
3. The third step is to made a query that will satisfy the requirements. Such a query
could look like the following:
http://localhost:8983/solr/select?q=book+revised+another+
different+word+that+doesnt+count&defType=dismax&mm=2&q.op=AND
The preceding query will return the following results:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q.op">AND</str>
<str name="mm">2</str>
<str name="q">book revised another different word that doesnt
count</str>
<str name="defType">dismax</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">3</str>
<str name="title">Another revised book</str>
</doc>
<doc>
<str name="id">2</str>
www.it-ebooks.info
Querying Solr
130
<str name="title">Some book that was revised</str>
</doc>
<doc>
<str name="id">1</str>
<str name="title">Solrcook book revised</str>
</doc>
</result>
</response>
As you can see, even though the query was made up of too many words, the result list contains
all the documents from the example file. Now let's see how that happened.
How it works...
The index structure and the data are fairly simple. Every book is described by two fields:
a unique identifier and a title.
The query is the thing that we are interested in. We have passed about eight words to Solr
(the q parameter), we defined that we want to use the DisMax query parser (the defType
parameter), and we sent the mysterious mm parameter set to the value of 2. Yes, you are right,
the mm parameter, also called minimum should match, tells the DisMax query parser how
many of the words passed into the query must be matched with the document, to ascertain
that the document is a match. In our case we told the DisMax query parser that there should
be two or more words matched to identify the document as a match. We've also included
q.op=AND, so that the default logical operator for the query would be set to AND.
You should also note one thing – the document that has three words matched is at the top
of the list. The relevance algorithm is still there, which means that the documents with more
words that matched the query will be higher in the result list than those that have fewer
words that matched the query. The documentation about the mm parameter can be found at
http://wiki.apache.org/solr/DisMaxQParserPlugin.
Affecting scoring with functions
There are many situations where you would want to have an influence on how the score of the
documents is calculated. For example, you would perhaps like to boost the documents on the
basis of the purchases of it. Like in an e-commerce boost store, you would like to show relevant
results, but you would like to influence them by adding yet another factor to their score. Is it
possible? Yes, and this recipe will show you how to do it.
www.it-ebooks.info
Chapter 4
131
How to do it...
1. Let's start with the following index structure (just add the following to the field section
in your schema.xml file):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="title" type="text" indexed="true" stored="true" />
<field name="sold" type="int" indexed="true" stored="true" />
2. The example data looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="title">Solrcook book revised</field>
<field name="sold">5</field>
</doc>
<doc>
<field name="id">2</field>
<field name="title">Some book revised</field>
<field name="sold">200</field>
</doc>
<doc>
<field name="id">3</field>
<field name="title">Another revised book</field>
<field name="sold">60</field>
</doc>
</add>
3. So we want to boost our documents on the basis of a sold field while retaining the
relevance sorting. Our user typed revised into the search box, so the query would
look like the following:
http://localhost:8983/solr/select?defType=dismax&qf=title&q=revise
d&fl=*,score
And the results would be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="qf">title</str>
www.it-ebooks.info
Querying Solr
132
<str name="fl">*,score</str>
<str name="q">revised</str>
<str name="defType">dismax</str>
</lst>
</lst>
<result name="response" numFound="3" start="0"
maxScore="0.35615897">
<doc>
<str name="id">1</str>
<str name="title">Solrcook book revised</str>
<int name="sold">5</int>
<float name="score">0.35615897</float>
</doc>
<doc>
<str name="id">2</str>
<str name="title">Some book revised</str>
<int name="sold">200</int>
<float name="score">0.35615897</float>
</doc>
<doc>
<str name="id">3</str>
<str name="title">Another revised book</str>
<int name="sold">60</int>
<float name="score">0.35615897</float>
</doc>
</result>
</response>
4. Now let's add the sold factor by adding the following to the query:
bf=product(sold)
So our modified query would look like this:
http://localhost:8983/solr/select?defType=dismax&qf=title&q=revise
d&fl=*,score&bf=product(sold)
And the results for the preceding query are as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">36</int>
<lst name="params">
<str name="fl">*,score</str>
www.it-ebooks.info
Chapter 4
133
<str name="q">revised</str>
<str name="qf">title</str>
<str name="bf">product(sold)</str>
<str name="defType">dismax</str>
</lst>
</lst>
<result name="response" numFound="3" start="0"
maxScore="163.1048">
<doc>
<str name="id">2</str>
<str name="title">Some book revised</str>
<int name="sold">200</int>
<float name="score">163.1048</float>
</doc>
<doc>
<str name="id">3</str>
<str name="title">Another revised book</str>
<int name="sold">60</int>
<float name="score">49.07608</float>
</doc>
<doc>
<str name="id">1</str>
<str name="title">Solrcook book revised</str>
<int name="sold">5</int>
<float name="score">4.279089</float>
</doc>
</result>
</response>
As you can see, adding the parameter changed the whole results list. Now let's see why
that happened.
How it works...
The schema.xml file is simple. It contains the following three fields:
ff id: This field is responsible for holding the unique identifier of the book
ff title: This specifies the book title
ff sold: This specifies the number of pieces that have been sold during the last month
In the data we have three books. Each of the books has the same number of words in the title.
That's why when typing the first query all documents got the same score. As you can see,
the first book is the one with the fewest pieces sold and that's not what we want to achieve.
www.it-ebooks.info
Querying Solr
134
For the same reason we added the bf parameter. It tells Solr what function to use to affect
the scoring computation (in this case the result of the function will be added to the score of
the document). In our case it is the product function that returns the product of the values
we provide as its arguments; in our case the one and only argument of the function will be
the value of the book's sold field.
The result list of the modified query clearly shows how the scoring was affected by the function.
In the first place of the results list we have the book that was most popular during the last week.
The next book is the one which was less popular than the first book, but more popular than the
last book. The last book in the results is the least popular book.
See also
If you would like to know more about the functions available in Solr, please go to the Solr wiki
page at the following address: http://wiki.apache.org/solr/FunctionQuery.
Nesting queries
Imagine a situation where you need a query nested inside another query. Let's imagine that
you want to run a query using the standard request handler but you need to embed a query
that is parsed by the DisMax query parser inside it. This is possible with Solr 4.0 and this
recipe will show you how to do it.
How to do it...
1. Let's start with a simple index that has the following structure (just add the following
to the field section in your schema.xml file):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="title" type="text" indexed="true" stored="true" />
2. Now let's look at the example data:
<add>
<doc>
<field name="id">1</field>
<field name="title">Revised solrcook book</field>
</doc>
<doc>
<field name="id">2</field>
<field name="title">Some book revised</field>
</doc>
<doc>
www.it-ebooks.info
Chapter 4
135
<field name="id">3</field>
<field name="title">Another revised little book</field>
</doc>
</add>
3. Imagine you are using the standard query parser to support the Lucene query syntax,
but you would like to boost phrases using the DisMax query parser. At first it seems
that it is impossible, but let's assume that we want to find books that have the words
book and revised in their title field, and we want to boost the book revised
phrase by 10. Let's send a query like so:
http://localhost:8983/solr/select?q=book+revised+_query_:"{!dismax
qf=title pf=title^10 v=$qq}"&qq=book+revised&q.op=AND
The results of the preceding query should look like the following:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">3</int>
<lst name="params">
<str name="q.op">AND</str>
<str name="qq">book revised</str>
<str name="q">book revised _query_:"{!dismax qf=title
pf=title^10 v=$qq}"</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">2</str>
<str name="title">Some book revised</str>
</doc>
<doc>
<str name="id">1</str>
<str name="title">Revised solrcook book</str>
</doc>
<doc>
<str name="id">3</str>
<str name="title">Another revised little book</str>
</doc>
</result>
</response>
As you can see, the results list was sorted exactly the way we wanted. Now let's see how it works.
www.it-ebooks.info
Querying Solr
136
How it works...
As you can see our index is very simple. It consists of two fields – one holding the unique
identifier (the id field) and another one holding the title of the book (the title field).
Let's look at the query. The q parameter is built from two parts. The first one, book+revised,
is just a usual query composed from two terms. The second part of the query starts with a
strange looking expression, that is, _query_. This expression tells Solr that another query
should be made that will affect the results list. Notice that the expression is surrounded
with " characters. Then we will see the expression tells Solr to use the DisMax query parser
(the !dismax part) and the parameters that will be passed to the parser (qf and pf). The
v parameter is used to pass the value of the q parameter. The value passed to the DisMax
query parser in our case will be book+revised. This is called parameter dereferencing.
By using the $qq expression, we tell Solr to use the value of the qq parameter. Of course,
we could pass the value to the v parameter, but I wanted to show you how to use the
dereferencing mechanism. The qq parameter is set to book+revised and it is used by Solr
as a parameter for the query that was passed to the DisMax query parser. The last parameter,
q.op=AND tells Solr which logical operator should be used as the default one.
The results show that we achieved exactly what we wanted.
Modifying returned documents
Let's say we are using the elevate component that Solr provides to promote some books
when necessary. But as you may already know, the standard Solr response doesn't include
the information about document being elevated or not. What we would like to achieve is to
get that information somehow from Solr. Actually we would like it to be as simple as running
a Solr query and getting the results back. This recipe will show you how to use document
transformers with the elevation component.
How to do it...
1. First of all, let's assume we have the following index structure defined in the fields
section of our schema.xml file:
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
<field name="name" type="text" indexed="true" stored="true"/>
2. We also need to have the elevation component defined along with the search
component (place the following entries in your solrconfig.xml file):
<requestHandler name="/select" class="solr.SearchHandler">
<lst name="defaults">
www.it-ebooks.info
Chapter 4
137
<str name="echoParams">explicit</str>
<int name="rows">10</int>
<str name="df">name</str>
</lst>
<arr name="last-components">
<str>elevator</str>
</arr>
</requestHandler>
<searchComponent name="elevator" class="solr.
QueryElevationComponent">
<str name="queryFieldType">string</str>
<str name="config-file">elevate.xml</str>
</searchComponent>
3. The contents of the elevate.xml file located in the conf directory look like the
following code:
<elevate>
<query text="book">
<doc id="3" />
</query>
</elevate>
4. Our example data that we indexed looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Book 1</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Book 2</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Promoted document</field>
</doc>
</add>
5. Now let's query Solr with the following query:
http://localhost:8983/solr/select?q=book&df=name&fl=*,[elevated]
www.it-ebooks.info
Querying Solr
138
And the response we get from Solr is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
<lst name="params">
<str name="q">book</str>
<str name="df">name</str>
<str name="fl">*,[elevated]</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">3</str>
<str name="name">Promoted document</str>
<bool name="[elevated]">true</bool>
</doc>
<doc>
<str name="id">1</str>
<str name="name">Book 1</str>
<bool name="[elevated]">false</bool>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Book 2</str>
<bool name="[elevated]">false</bool>
</doc>
</result>
</response>
As you can see each document does not only have its name and identifier, but also the
information about whether it was elevated or not.
How it works...
Our index structure consists of two fields, the id field which is our unique key and the name
field used for holding the name of the document. Please remember that in order to use the
elevation component you have to have a unique key defined in your schema.xml file, and this
field has to be based on the string type.
The /select request handler configuration is quite standard, although we've added the
last-components sections that define what component should be used during a query.
We defined that we want to use the component named elevator.
www.it-ebooks.info
Chapter 4
139
The next thing we did is the elevator search component definition. It is based on the solr.
QueryElevationComponent class (the class attribute) and we set its name to elevator
(the attribute name). In addition to that, we specified two attributes needed by the query
elevation component:
ff queryFieldType: This specifies the name of the type that will be used to analyze
the incoming text. We specified the string type because we want only exact
matches to include elevated documents.
ff config-file: This specifies the name of the configuration file that stores the
elevation definitions.
The elevate.xml file we use for storing the query elevation component is simple. The root tag
is named elevate and can have multiple query tags inside it. Each query tag is responsible
for elevating documents for a query defined with the text attribute. Inside the query tag we
can have multiple doc tags with an id attribute, which should have a value of the identifier of
the document to which we want add to results or modify positions. In our case, we want the
document with an identifier value of 3 to be placed in the first position when users enter the
book query.
The query we sent was simple; we asked for documents that have book in the default field
(the df parameter) which is name in our case. In addition to that, we want all stored fields to
be returned (the * part of the fl parameter) and we also want to activate one of the document
transformers, which is responsible for marking the documents that were elevated by the query
elevation component, by adding the [elevated] part of the fl parameter. This transformer
adds the <bool name="[elevated]">true</bool> field if the document was elevated,
and <bool name="[elevated]">false</bool> if the document wasn't elevated.
Using parent-child relationships
When using Solr you are probably used to having a flat structure of documents without any
relationships. However, there are situations where decomposing relationships is a cost we
can't take. Because of that Solr 4.0 comes with a join functionality that allows us to use some
basic relationships. For example, imagine that our index consists of books and workbooks and
we would like to use that relationship. This recipe will show you how to do it.
How to do it...
1. First of all, let's assume that we have the following index structure (just place the
following in the fields section of your schema.xml file):
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
<field name="name" type="text" indexed="true" stored="true"
multiValued="false"/>
www.it-ebooks.info
Querying Solr
140
<field name="type" type="string" indexed="true" stored="true"/>
<field name="book" type="string" indexed="true" stored="true"/>
2. Now let's look at our test data that we are going to index:
<add>
<doc>
<field name="id">1</field>
<field name="name">Book 1</field>
<field name="type">book</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Book 2</field>
<field name="type">book</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Workbook A</field>
<field name="type">workbook</field>
<field name="book">1</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">Workbook B</field>
<field name="type">workbook</field>
<field name="book">2</field>
</doc>
</add>
3. Now, let's assume we want to get all the books from Solr that have workbooks
for them. Also we want to narrow the books we got to only those that have the
character 2 in their names. In order to do that, we run the following query:
http://localhost:8983/solr/select/?q={!join from=book to=id}
type:workbook&fq=name:2
The Solr response for the preceding query is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
www.it-ebooks.info
Chapter 4
141
<lst name="params">
<str name="fq">name:2</str>
<str name="q">{!join from=book to=id}type:workbook</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">2</str>
<str name="name">Book 2</str>
<str name="type">book</str>
</doc>
</result>
</response>
As you can see, the returned document was exactly the one we expected.
How it works...
Although the example index structure is simple I would like to comment on it. The id field is
responsible for holding the unique identifier of the document, the name field is the document
name, and the type field holds the document's types. The book field is optional and specifies
the identifier of the parent document. So you can see that in our example data, we have two
parent documents (those with an id field value of 1 and 2) and two child documents (those
with an id field value of 3 and 4).
Let's pause for a bit now before looking at the query, and look at our example data. If we only
query for workbooks, we would get documents with identifier values of 3 and 4. The parent
for the document with the id field equal to 3 is 1, and the parent for the document with the
id field equal to 4 is 2. If we filter 1 and 2 with the filter fq=name:2, we should only get the
document with the id field value equal to 2 as the result. So looking at the query result it
works as intended, but how does the query actually work?
I'll begin the description from the join part, that is, q={!join from=book to=id}
type:workbook. As you can see we used local params to choose the different type of
query parser – the join query parser (the !join part of the query). We specified that child
documents should use the book field (the from parameter) and join it with the id field (the to
parameter). The type:workbook part specifies the query we run, that is, we want only those
documents that have the workbook value in the type field. The fq parameter, which narrows
the result set to only those documents that have the value 2 in the name field, is applied after
the join is executed, so we only apply it to the parent documents.
www.it-ebooks.info
Querying Solr
142
Ignoring typos in terms of performance
Sometimes there are situations where you would like to have some kind of functionality that
would allow you to give your user the search results even though he/she made a typo or even
multiple typos. In Solr, there are multiple ways to undo that: using a spellchecker component
to try and correct the user's mistake, using the fuzzy query, or for example, using the ngram
approach. This recipe will concentrate on the third approach and show you how to use ngrams
to handle user typos.
How to do it...
For the purpose of the recipe, let's assume that our index is built up of four fields:
identifier, name, description, and the description_ngram field which
will be processed with the ngram filter.
1. So let's start with the fields definition of our index which should look like the following
code (place this in your schema.xml file in the fields section):
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
<field name="name" type="text" indexed="true" stored="true"/>
<field name="description" type="text" indexed="true" stored="true"
/>
<field name="description_ngram" type="text_ngram" indexed="true"
stored="false" />
2. As we want to use the ngram approach, we will include the following filter in our
text_ngram field type definition:
<filter class="solr.NGramFilterFactory" minGramSize="2"
maxGramSize="2" />
The filter will be responsible for dividing the indexed data and queries into two
bi-grams. To better illustrate what I mean, take a look at the following screenshot,
which shows how the filter worked for the word "multiple":
www.it-ebooks.info
Chapter 4
143
So the whole text_ngram type definition will look like the following code:
<fieldType name="text_ngram" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.NGramFilterFactory" minGramSize="2"
maxGramSize="2" />
</analyzer>
</fieldType>
3. We also need to add the copy field definition to our schema.xml file, to automatically
copy the value of the description field to the description_ngram field. The copy
field definition looks as follows:
<copyField source="description" dest="description_ngram" />
4. Now we can index our data. For the purpose of the recipe I used the following
data sample:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr Cookbook 4.0</field>
<field name="description">Solr Cookbook 4.0 contains multiple
recipes helping you with your every day work with Solr :)</field>
</doc>
</add>
5. After indexing it, I decided to test if my query can handle a single typo in each of the
words provided to the query, so I've sent the following query to Solr, where the words
I was really interested in were "contains" and "multiple":
q=description:(kontains+multyple) description_
ngram:(kontains+multyple)&q.op=OR
The result of the query was as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="indent">true</str>
<str name="q">description:(kontains multyple) description_
ngram:(kontains multyple)</str>
www.it-ebooks.info
Querying Solr
144
<str name="q.op">OR</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr Cookbook 4.0</str>
<str name="description">Solr Cookbook 4.0 contains multiple
recipes helping you with your every day work with Solr :)</
str></doc>
</result>
</response>
As you can see the document we were interested in was found. So let's see how that worked.
How it works...
As you can see from the index structure, we have two fields, namely name and description,
which we defined to use the text_ngram field because we want these fields to support the
returning of the search results even when the user enters a typo of some sort. To allow this
we use the solr.NGramFilterFactory filter with two attributes defined, namely, the
minGramSize which sets the minimum size of the produced ngram, and the maxGramSize
which sets the maximum size of the produced ngram. With both of these attributes set to 2,
we configured the solr.NGramFilterFactory filter to produce tokens called 2-grams, that
are built of two characters. The third attribute of the filter tag is the class attribute that
specifies
the filter factory class we want to use.
Let's concentrate on the provided screenshot (refer to step 2 in the How to do it... section) to
discuss how the solr.NGramFilterFactory filter works in our case. As I wrote earlier, we
want the ngram filter to produce grams built up of two characters. You can see how the filter
we've chosen works. From the word multiple it created the following bi-grams (n-grams built
from 2 characters):
mu ul lt ti ip pl le
So, the idea of the algorithm is quite simple – divide the word, so that we take the first
character and the character after it, and we make a bi-gram from it. Then we take the next
character and the character after it and create the second bi-gram and so on until we can't
make any more bi-grams.
www.it-ebooks.info
Chapter 4
145
Now if you look at the query there are two words we are looking for and both of them contain
a typo. The kontains word should be contain without a typo and the multyple should be
multiple without a typo. Our query also specifies that the logical query operator we want to
use is the OR operator. We use it because we want to match all documents with even a single
match to any bi-gram. If we turn the kontains and multyple tokens into bi-grams, we would
get the following (I'll use the pipe (|) character to separate the words from each other):
ko on nt ta ai in ns | mu ul lt ty yp pl le
If we turn the contains multiple tokens into bi-grams we would get the following:
co on nt ta ai in ns | mu ul lt ti ip pl le
If you compare those bi-grams you would see that only three of those differ between the proper
words and the ones with typos. The rest of them are the same. Because of that our query
finds the document we indexed. You may wonder why we queried both the description and
description_ngram fields. We did that because we don't know if the client's query is the
one with typos or without. If it is without, we want the documents with better matches to be
higher up on the results lists, than the ones that are not perfectly matched.
Of course all of that doesn't come without any downsides. One of the major downsides of this
approach is the growth of the index size because of the number of tokens produced by the
ngram filter. The second downside is the number of results produced with such an approach;
there will be many more results than you are used to and that's why we did a query to both the
description and description_ngram fields. We wanted to increase the score value of
the perfectly matched documents (you can also boost the description field higher during a
query). You can also try having the same approach work with the edismax query parser and
the "minimum should match" (mm) parameter, but this is beyond the scope of this recipe.
Detecting and omitting duplicate documents
Imagine your data consists of duplicates because they come from different sources. For
example, you have books that come from different suppliers, but you are only interested in a
single book with the same name. Of course you could use the field collapsing feature during the
query, but that affects query performance and we would like to avoid that. This recipe will show
you how to use the Solr deduplication functionality.
How to do it...
1. We start with the simple index structure. This should be placed in the fields section
of your schema.xml file:
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
www.it-ebooks.info
Querying Solr
146
<field name="name" type="text" indexed="true" stored="true"
multiValued="false"/>
<field name="type" type="string" indexed="true" stored="true"
multiValued="false"/>
2. For the purpose of the recipe, we assume that we have the following data stored in
the data.xml file:
<add>
<doc>
<field name="name">This is a book we are indexing and we think
it will be a dupe because it's almost the same as the second document
we are going to index</field>
<field name="type">book</field>
</doc>
<doc>
<field name="name">This is the book we are indexing and we think
it will be a dupe because it's almost the same as the second
document we are going to index</field>
<field name="type">book</field>
</doc>
</add>
As you can see, the file contains two documents and they only differ by a single word;
the first document contains is the is a book phrase, while the second contains the
is the book phrase. In my opinion the second document is a dupe of the first one.
3. In order to have those two documents detected and overwritten, we need to create
a new update request processor chain called dedupe and configure org.apache.
solr.update.processor.SignatureUpdateProcessorFactory as the first
update processor. So the appropriate section of our solrconfig.xml file should
look like the following code:
<updateRequestProcessorChain name="dedupe">
<processor class="org.apache.solr.update.processor.
SignatureUpdateProcessorFactory">
<bool name="enabled">true</bool>
<bool name="overwriteDupes">true</bool>
<str name="signatureField">id</str>
<str name="fields">name</str>
<str name="signatureClass">org.apache.solr.update.processor.
TextProfileSignature</str>
</processor>
<processor class="solr.LogUpdateProcessorFactory" />
<processor class="solr.RunUpdateProcessorFactory" />
</updateRequestProcessorChain>
www.it-ebooks.info
Chapter 4
147
4. Now let's index our data by running the following command:
curl 'http://localhost:8983/solr/update?update.
chain=dedupe&commit=true' --data-binary @data.xml -H 'Contenttype:
application/xml'
5. If everything went well, we should only see the second document as the first one
should be overwritten. So we should check that by running the following query:
http://localhost:8983/solr/select?q=*:*
The response to it was the following:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">*:*</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="name">This is the book we are indexing and we think it
will be a dupe because it's almost the same as the second
document we are going to index</str>
<str name="type">book</str>
<str name="id">a095014df10f76513387af0450768ffb</str>
</doc>
</result>
</response>
As you can see we got only a single document, and if you look again at the example data,
you would notice that it is the second document we sent, so the first one was overwritten.
How it works...
Our index structure is simple and consists of three fields – the id field which holds the unique
identifier, the name field which is a name of the book, and the type field which holds the type
of the book.
The example data you see doesn't contain the id field, which isn't a mistake, it was prepared
this way on purpose. We want our deduping to use the id field to generate a unique identifier
for us and use it to overwrite duplicate documents. Also, you can see that the two sample
documents are almost the same, so they should be marked as dupes and we should only
see one of them in the index, probably the second one.
www.it-ebooks.info
Querying Solr
148
Next we define a new update request processor chain in the solrconfig.xml file
with the name dedupe (the name property). The first processor we need to add in order
to have the deduping functionality is org.apache.solr.update.processor.
SignatureUpdateProcessorFactory. We do so by setting the class attribute of the
processor tag to the mentioned class. The next few properties configure the org.apache.
solr.update.processor.SignatureUpdateProcessorFactory behavior. By setting
the enabled property to true, we turn on the deduping mechanism. overwriteDupes set to
true tells Solr that we want the duplicate documents to be overwritten. The signatureField
field configures the name of the field where the generated signature will be stored, which in our
case is the id field. This is crucial, because Solr will use that information to identify duplicate
documents. The fields field contains information of which fields (a list separated by the
comma character) should be used to identify the duplication. We decided to use the name
field. Finally, the signatureClass class is the class implementing the signature calculation.
We've chosen org.apache.solr.update.processor.TextProfileSignature because
it works best on longer text and we expect that. You can also choose org.apache.solr.
update.processor.MD5Signature and org.apache.solr.update.processor.
Lookup3Signature. The last two processors, solr.LogUpdateProcessorFactory and
solr.RunUpdateProcessorFactory, write information about the update to the log file and
run the update.
As you can see in the response for our "match all documents" query, only the second document
is present. This is because when the index was empty the first document was indexed. Then, the
second document came and it was identified as a dupe and thus it overwrote the first one.
Using field aliases
Imagine your products have multiple prices, and depending on your client's location you search
one of the defined fields. So you have a field for price in US dollars, in Euros, and so on. But what
you would like to do is return the field you are using for displaying the price of the document as a
"price" no matter what field you use. This recipe will show you how to do it.
How to do it...
1. Let's begin with the following index structure (put all the entries in the fields
section of your schema.xml file):
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
<field name="name" type="text" indexed="true" stored="true"/>
<field name="price_usd" type="double" indexed="true" stored="true"
/>
<field name="price_eur" type="double" indexed="true" stored="true"
/>
<field name="price_pln" type="double" indexed="true" stored="true"
/>
www.it-ebooks.info
Chapter 4
149
2. We will also use the following test data:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr Cookbook 4.0</field>
<field name="price_usd">40.00</field>
<field name="price_pln">120.00</field>
<field name="price_eur">30.00</field>
</doc>
</add>
3. Let's assume that we have a client from the United States of America and he/she
searches for the word solr and for products with the price in US dollars ranging from
20 to 50. The query would look like the following:
q=name:solr&fq=price_usd:[20+TO+50]&fl=id,name,price_usd
And the results of the preceding query would be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="fq">price_usd:[20 TO 50]</str>
<str name="fl">id,name,price_usd</str>
<str name="q">name:solr</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr Cookbook 4.0</str>
<double name="price_usd">40.0</double>
</doc>
</result>
</response>
4. As you can see, we have our sample document returned but we've got the price_
usd value returned as well. We would like it to be named price. So let's modify
our fl parameter value, and instead of specifying id,name,price_usd we pass
id,name,price:price_usd. So the whole query would look as follows:
q=name:solr&fq=price_usd:[20+TO+50]&fl=id,name,price:price_usd
www.it-ebooks.info
Querying Solr
150
And the returned results would be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="fq">price_usd:[20 TO 50]</str>
<str name="fl">id,name,price:price_usd</str>
<str name="q">name:solr</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr Cookbook 4.0</str>
<double name="price">40.0</double>
</doc>
</result>
</response>
As you can see in the result document we got a field called price instead of price_usd
field. Now, let's see how that works.
How it works...
The index structure is pretty simple, it only contains the field responsible for holding the
identifier, name of the document, and three prices in different currencies. All the fields
are marked as stored because we want to return them (not all at the same time though)
at query time. The sample data is also simple so I decided to skip commenting on that.
The first query is simple. We are searching for the value solr in the name field and we
want only the documents with the value of the price_usd field to be between 20 and 50.
We also want to return (the fl parameter) the following fields as a document: id, name,
and price_usd.
The interesting things come with the second query. As you can see there is a different fl
parameter that you may be used to. The first part of the fl parameter is pretty obvious;
we want to return the id and name fields. The second part is new though; we specified
the following value: price:price_usd. This means that we want the price_usd field
to be returned as price. That is how field aliasing works; you add the value ALIAS_
NAME:FIELD_NAME to the fl parameter and in the results, instead of FIELD_NAME,
Solr will return ALIAS_NAME.
www.it-ebooks.info
Chapter 4
151
Returning a value of a function in the results
Imagine you have a service where your users can search for different companies. Your users
can enter a simple keyword(s) and then return all the companies matching that keyword(s).
But a day comes when you give your users the ability to choose their location, and you would
like to show how far they are from each company returned in the results. This recipe will show
you how to do it.
Getting ready
Before reading further I advise you to read the Using field aliases recipe in the current
chapter and the Storing geographical points in the index recipe from Chapter 3, Analyzing
Your Text Data.
How to do it...
1. For the purpose of the recipe, let's assume that we have the following index structure
(put the following field's definition into your schema.xml file in the fields section):
<field name="id" type="string" indexed="true" stored="true"
required="true" multiValued="false" />
<field name="name" type="text" indexed="true" stored="true"/>
<field name="loc" type="location" indexed="true" stored="true"/>
<dynamicField name="*_coordinate" type="double" indexed="true"
stored="false" />
2. Next, we need to define the location field type. It should look like the following
code (put the following definition in to your schema.xml file in the types section):
<fieldType name="location" class="solr.LatLonType"
subFieldSuffix="_coordinate"/>
3. Let's also assume that we have the following data indexed:
<add>
<doc>
<field name="id">1</field>
<field name="name">Company 1</field>
<field name="loc">56.4,40.2</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Company 2</field>
<field name="loc">50.1,48.9</field>
</doc>
www.it-ebooks.info
Querying Solr
152
<doc>
<field name="id">3</field>
<field name="name">Company 3</field>
<field name="loc">23.18,39.1</field>
</doc>
</add>
4. Now, in order to get all the documents with the word company in the name field
we would run the following query:
q=name:company&fl=*
5. We have the information that our client's location is 50.0, 28.0 and we would like to
show our client the distance from his/her location to each of the companies we return
in the results. In order to do that we add the following part to the fl parameter:
dist:geodist(loc,50.0,28.0)
So the whole query looks like the following:
q=name:company&fl=*,dist:geodist(loc,50.0,28.0)
And the response from Solr is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
<str name="q">name:company</str>
<str name="fl">*,dist:geodist(loc,50.0,28.0)</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">1</str>
<str name="name">Company 1</str>
<str name="loc">56.4,40.2</str>
<double name="dist">1077.4200268973314</double>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Company 2</str>
<str name="loc">50.1,48.9</str>
<double name="dist">1487.4260767512278</double>
</doc>
www.it-ebooks.info
Chapter 4
153
<doc>
<str name="id">3</str>
<str name="name">Company 3</str>
<str name="loc">23.18,39.1</str>
<double name="dist">3134.746384852772</double>
</doc>
</result>
</response>
As you can see, in addition to all the stored fields, Solr returned the additional field called
dist. Let's now see how that worked.
How it works...
The index structure is simple, it contains the identifier (the id field), name of the company
(the name field), and the geographical location of the company (the loc field). Description
of how geographical points should be stored were described in Chapter 3, Analyzing Your
Text Data, in the Storing geographical points in the index recipe, so please refer to that for
the explanation.
The initial query returning all the companies that have the word company in their name field
returns all the stored fields (the fl=* part of the query). The interesting part comes with the
dist:geodist(loc,50.0,28.0) part of the fl parameter. As you remember from the
Using field aliases recipe, we told Solr that we want to have a new field called dist returned
and we want it to be a value of the dist function query which takes three parameters: the field
in the index (in our case it is loc), the latitude, and the longitude, and returns the distance
between the point stored in the loc field, and the point described by the latitude and longitude.
The value is then returned as the dist field of each of the returned documents.
www.it-ebooks.info
www.it-ebooks.info
5
Using the Faceting
Mechanism
In this chapter we will cover:
ff Getting the number of documents with the same field value
ff Getting the number of documents with the same value range
ff Getting the number of documents matching the query and the sub query
ff Removing filters from faceting results
ff Sorting faceting results in alphabetical order
ff Implementing the autosuggest feature using faceting
ff Getting the number of documents that don't have a value in the field
ff Having two different facet limits for two different fields in the same query
ff Using decision tree faceting
ff Calculating faceting for relevant document groups
Introduction
One of the advantages of Solr is the ability to group results on the basis of some fields'
contents. The Solr classification mechanism, called faceting, provides the functionalities
which can help us in several tasks that we need to do in everyday work, from getting the
number of documents with the same values in a field (for example, the companies from the
same city) using the ability of date and range faceting, to the autocomplete features based on
the faceting mechanism. This chapter will show you how to handle some of the common tasks
when using the faceting mechanism.
www.it-ebooks.info
Using the Faceting Mechanism
156
Getting the number of documents with the
same field value
Imagine a situation where besides the search results, you have to return the number of
documents with the same field value. For example, imagine that you have an application
that allows the user to search for companies in Europe, and your client wants the number
of companies in the cities where the companies that were found by the query are located.
To do this, you could of course run several queries but Solr provides a mechanism called
faceting that can do that for you. This recipe will show you how to do it.
How to do it...
For getting the number of documents with the same field value, follow these steps:
1. To start, let's assume that we have the following index structure (just add this
to your schema.xml file in the field definition section; we will use the city field
to do the faceting):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="city" type="string" indexed="true" stored="true" />
2. The next step is to index the following example data:
<add>
<doc>
<field name="id">1</field>
<field name="name">Company 1</field>
<field name="city">New York</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Company 2</field>
<field name="city">New Orleans</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Company 3</field>
<field name="city">New York</field>
</doc>
</add>
3. Let's suppose that our hypothetical user searches for the word company. The query
that will get us what we want should look like this:
http://localhost:8983/solr/select?q=name:company&facet=true&facet.
field=city
www.it-ebooks.info
Chapter 5
157
The result of the query should be like this:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="facet">true</str>
<str name="facet.field">city</str>
<str name="q">name:company</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="city">New York</str>
<str name="id">1</str>
<str name="name">Company 1</str>
</doc>
<doc>
<str name="city">New Orleans</str>
<str name="id">2</str>
<str name="name">Company 2</str>
</doc>
<doc>
<str name="city">New York</str>
<str name="id">3</str>
<str name="name">Company 3</str>
</doc>
</result>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields">
<lst name="city">
<int name="New York">2</int>
<int name="New Orleans">1</int>
</lst>
</lst>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
</response>
As you can see, besides the normal results list, we got faceting results with the numbers that
we wanted. Now let's look at how that happened.
www.it-ebooks.info
Using the Faceting Mechanism
158
How it works...
The index structure and the data are pretty simple and they make the example easier to
understand. The company is described by three fields. We are particularly interested in the
city field. This is the field that we want to use to get the number of companies that have
the same value in this field—which basically means that they are in the same city.
To do that, we run a query to Solr and inform the query parser that we want the documents
that have the word company in the title field. Additionally we say that we want to enable
the faceting mechanism, by using the facet=true parameter. The facet.field parameter
tells Solr which field to use to calculate faceting numbers. You can specify the facet.field
parameter multiple times to get faceting numbers for different fields in the same query.
As you can see in the results list, the results of all types of faceting are grouped in the list
with the name="facet_counts" attribute. The field based faceting is grouped under the
list with the name="facet_fields" attribute. Every field that you specified using the
facet.field parameter has its own list which has the attribute name, the same as the
value of the parameter in the query—in our case it is city. Then finally you can see the
results that we are interested in: the pairs of values (name attribute) and how many
documents have the value in the specified field.
There's more...
There are two more things I would like to share about field faceting:
ff How to show facets with counts greater than zero: The default behavior of Solr is to
show all the faceting results irrespective of the counts. If you want to show only the
facets with counts greater than zero than you should add the facet.mincount=1
parameter to the query (you can set this parameter to another value if you are
interested in any arbitrary value).
ff Lexicographical sorting of the faceting results: If you want to sort the faceting
results lexicographically, and not by the highest count (which is the default behavior),
then you need to add the facet.sort=index parameter.
Getting the number of documents with the
same value range
Imagine that you have an application where users can search the index to find a car for rent.
One of the requirements of the application is to show a navigation panel, where the user can
choose the price range for the cars that they are interested in. To do it in an efficient way, we
will use range faceting and this recipe will show you how to do it.
www.it-ebooks.info
Chapter 5
159
How to do it...
For getting the number of documents with the same value range, follow these steps:
1. Let's begin with the following index structure (just add this to your schema.xml
file in the field definition section; we will use the price field to do the faceting):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="price" type="float" indexed="true" stored="true" />
2. The example data that we will use is like this:
<add>
<doc>
<field name="id">1</field>
<field name="name">Super Mazda</field>
<field name="price">50</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Mercedes Benz</field>
<field name="price">210</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Bentley</field>
<field name="price">290</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Super Honda</field>
<field name="price">99.90</field>
</doc>
</add>
3. Now, as you recall, our requirement was to show the navigation panel with
price ranges. To do that, we need to get that data from Solr. We also know
that the minimum price for car rent is 1 dollar and the maximum is 400
dollars. To get the price ranges from Solr, we send the following query:
http://localhost:8983/solr/select?q=*:*&rows=0&facet=true&facet.
range=price&facet.range.start=0&facet.range.end=400&facet.range.
gap=100
www.it-ebooks.info
Using the Faceting Mechanism
160
The query will produce the following result list:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">3</int>
<lst name="params">
<str name="facet">true</str>
<str name="q">*:*</str>
<str name="facet.range.start">0</str>
<str name="facet.range">price</str>
<str name="facet.range.end">400</str>
<str name="facet.range.gap">100</str>
<str name="rows">0</str>
</lst>
</lst>
<result name="response" numFound="4" start="0"/>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields"/>
<lst name="facet_dates"/>
<lst name="facet_ranges">
<lst name="price">
<lst name="counts">
<int name="0.0">2</int>
<int name="100.0">0</int>
<int name="200.0">2</int>
<int name="300.0">0</int>
</lst>
<float name="gap">100.0</float>
<float name="start">0.0</float>
<float name="end">400.0</float>
</lst>
</lst>
</lst>
</response>
So we got exactly what we wanted. Now let's see how it works.
www.it-ebooks.info
Chapter 5
161
How it works...
As you can see, the index structure is simple. There are three fields, one responsible for
the unique identifier, one responsible for the car name, and the last one responsible for
the price of rent.
The query is where all the magic is done. As we are not interested in the search results, we
ask for all documents in the index (q=*:* parameter) and we tell Solr not to return the search
results (rows=0 parameter). Then we tell Solr that we want the faceting mechanism to be
enabled for the query (facet=true parameter). We will not be using the standard faceting
mechanism, that is, the field based faceting. Instead we will use range faceting which is
optimized to work with ranges. So, we tell Solr which field will be used for range faceting by
adding the parameter facet.range with the price value. That means that the price field
will be used for the range faceting calculation. Then we specify the lower boundary from which
the range faceting calculation will begin. We do this by adding the facet.range.start
parameter; in our example we set it to 0. Next we have the facet.range.end parameter
which tells Solr when to stop the calculation of the range faceting. The last parameter
(facet.range.gap) informs Solr about the length of the periods that will be calculated.
Remember that when using the range faceting mechanism you must specify the
three parameters:
ff facet.range.start
ff facet.range.end
ff facet.range.gap
Otherwise, the range faceting mechanism won't work.
In the faceting results you can see the periods and the number of documents that were found
in each of them. The first period can be found under the <int name="0.0"> tag. This period
consists of prices from 0 to 100 (in mathematical notation it would be <0; 100>). It contains
two cars. The next period can be found under the <int name="100.0"> tag and consists of
prices from 100 to 200 (in mathematical notation it would be <100; 200>), and so on.
Getting the number of documents matching
the query and subquery
Imagine a situation where you have an application that has a search feature for cars. One of
the requirements is not only to show search results, but also to show the number of cars with
the price period chosen by the user. There is also another thing—those queries must be fast
because of the number of queries that will be run. Can Solr handle that? The answer is yes.
This recipe will show you how to do it.
www.it-ebooks.info
Using the Faceting Mechanism
162
How to do it...
For getting the number of documents matching the query and subquery, follow these steps:
1. Let's start with creating an index with the following structure (just add this to
your schema.xml file in the field definition section; we will use the price field
to do the faceting):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="price" type="float" indexed="true" stored="true" />
2. Now let's index the following sample data:
<add>
<doc>
<field name="id">1</field>
<field name="name">Car 1</field>
<field name="price">70</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Car 2</field>
<field name="price">101</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Car 3</field>
<field name="price">201</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">Car 4</field>
<field name="price">99.90</field>
</doc>
</add>
Now, recall our requirement cars that match the query (let's suppose that our user
typed car), and show the counts in the chosen price periods. For the purpose of the
recipe let's assume that the user has chosen two periods of prices:
?? 10 to 80
?? 90 to 300
www.it-ebooks.info
Chapter 5
163
3. The query to achieve such a requirement should look like this:
http://localhost:8983/solr/select?q=name:car&facet=true&facet.
query=price:[10 TO 80]&facet.query=price:[90 TO 300]
The result list of the query should look like this:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="facet">true</str>
<arr name="facet.query">
<str>price:[10 TO 80]</str>
<str>price:[90 TO 300]</str>
</arr>
<str name="q">name:car</str>
</lst>
</lst>
<result name="response" numFound="4" start="0">
<doc>
<str name="id">1</str>
<str name="name">Car 1</str>
<float name="price">70.0</float>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Car 2</str>
<float name="price">101.0</float>
</doc>
<doc>
<str name="id">3</str>
<str name="name">Car 3</str>
<float name="price">201.0</float>
</doc>
<doc>
<str name="id">4</str>
<str name="name">Car 4</str>
<float name="price">99.9</float>
</doc>
</result>
www.it-ebooks.info
Using the Faceting Mechanism
164
<lst name="facet_counts">
<lst name="facet_queries">
<int name="price:[10 TO 80]">1</int>
<int name="price:[90 TO 300]">3</int>
</lst>
<lst name="facet_fields"/>
<lst name="facet_dates"/>
</lst>
</response>
How it works...
As you can see, the index structure is simple. There are three fields, one responsible for the
unique identifier, one responsible for the car name, and the last one responsible for the price.
Next we have the query. First you can see a standard query where we tell Solr that we want to
get all the documents that have the word car in the name field (the q=name:car parameter).
Next, we say that we want to use the faceting mechanism by adding the facet=true
parameter to the query. This time we will use the query faceting type. This means that we
can pass the query to the faceting mechanism and as a result we will get the number of
documents that match the given query. In our example case, we wanted two periods like this:
ff One from the price of 10 to 80
ff Another from the price of 90 to 300
This is achieved by adding the facet.query parameter with the appropriate value. The first
period is defined as a standard range query to the price field (price:[10 TO 80]). The
second query is very similar, just with different values. The value passed to the facet.query
parameter should be a Lucene query written using the default query syntax.
As you can see in the results, the query faceting results are grouped under the <lst
name="facet_queries"> XML tag with the names exactly as in the queries sent to Solr.
You can see that Solr correctly calculated the number of cars in each of the periods, which
means that this is a perfect solution for us when we can't use the range faceting mechanism.
Removing filters from faceting results
Let's assume for the purpose of this recipe that you have an application that can search for
companies within a city and state. But the requirements say that you should show not only
the search results but also the number of companies in each city and the number of
companies in each state (in the Solr way we say that you want to exclude the filter query
from the faceting results). Can Solr do that in an efficient way? Sure it can, and this recipe
will show you how to do it.
www.it-ebooks.info
Chapter 5
165
Getting ready
Before you start reading this recipe, please take a look at the Getting the number of
documents with the same field value recipe in this chapter.
How to do it...
1. We start with the following index structure (just add this to your schema.xml file in
the field definition section; we will use the city and state fields to do the faceting):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="city" type="string" indexed="true" stored="true" />
<field name="state" type="string" indexed="true" stored="true />
2. The second step would be to index the following example data:
<add>
<doc>
<field name="id">1</field>
<field name="name">Company 1</field>
<field name="city">New York</field>
<field name="state">New York</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Company 2</field>
<field name="city">New Orleans</field>
<field name="state">Luiziana</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Company 3</field>
<field name="city">New York</field>
<field name="state">New York</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">Company 4/field>
<field name="city">New York</field>
<field name="state">New York</field>
</doc>
</add>
www.it-ebooks.info
Using the Faceting Mechanism
166
3. Let's suppose that our hypothetical user searched for the word company, and told
our application that he needs the companies matching the word in the state of New
York. In that case, the query that will fulfill our requirement should look like this:
http://localhost:8983/solr/select?q=name:company&facet=true
&fq={!tag=stateTag}state:"New York"&facet.field={!ex=stateTag}
city&facet.field={!ex=stateTag}state
The result for the query will look like this:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="facet">true</str>
<arr name="facet.field">
<str>{!ex=stateTag}city</str>
<str>{!ex=stateTag}state</str>
</arr>
<str name="fq">{!tag=stateTag}state:"New York"</str>
<str name="q">name:company</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">1</str>
<str name="name">Company 1</str>
<str name="city">New York</str>
<str name="state">New York</str>
</doc>
<doc>
<str name="id">3</str>
<str name="name">Company 3</str>
<str name="city">New York</str>
<str name="state">New York</str>
</doc>
<doc>
<str name="id">4</str>
<str name="name">Company 4</str>
<str name="city">New York</str>
<str name="state">New York</str>
</doc>
www.it-ebooks.info
Chapter 5
167
</result>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields">
<lst name="city">
<int name="New York">3</int>
<int name="New Orleans">1</int>
</lst>
<lst name="state">
<int name="New York">3</int>
<int name="Luiziana">1</int>
</lst>
</lst>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
</response>
Now let's see how it works.
How it works...
The index structure is pretty simple—it contains four fields that describe the company.
The search will be performed against the name field, while the filtering and the faceting
is done with the use of the state and city fields.
So let's get on with the query. As you can see, we have some typical elements there. First
the q parameter, which just tells Solr where and what to search for. Then the facet=true
parameter that enables the faceting mechanism. So far, so good. Following that, you have
a strange looking filter query (the fq parameter) with the value of fq={!tag=stateTag}
state:"New York". It tells Solr to only show those results that have New York in the
state field. By adding the {!tag=stateTag} part, we basically gave that filter query
a name (stateTag), which we will use further.
Now, look at the two facet.field parameters. Our requirement was to show the number
of companies in all states and in all cities. The only thing that was preventing us from getting
those numbers was the filter query we added to the query. So let's exclude it from the faceting
results. How to do it ? It's simple—just add {!ex=stateTag} to the beginning of each of the
facet.field parameters, like this: facet.field={!ex=stateTag}city. It tells Solr to
exclude the filter with the passed name.
As you can see in the results list, we got the correct numbers which means that the exclude
works as intended.
www.it-ebooks.info
Using the Faceting Mechanism
168
Sorting faceting results in alphabetical
order
Imagine a situation where you have a website, where you present some kind of
advertisements, for example, house rental advertisements. One of the requirements is to
show a list of cities in which the offer, that matched the query typed by the user, are located.
So the first thing you think is to use the faceting mechanism – and that's a good idea. But
then, your boss tells you that he is not interested in the counts and you have to sort the
results in the alphabetical order. So, is Solr able to do it? Of course it is and this recipe will
show you how to do it.
Getting ready
Before you start reading this recipe, please take a look at the Getting the number of
documents with the same field value recipe in this chapter.
How to do it...
1. For the purpose of the recipe let's assume that we have the following index structure
(just add this to your schema.xml file to the field definition section; we will use the
city field to do the faceting):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="city" type="string" indexed="true" stored="true" />
2. This index structure is responsible for holding information about companies and their
location. Now, let's index the example data matching the presented index structure:
<add>
<doc>
<field name="id">1</field>
<field name="name">House 1</field>
<field name="city">New York</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">House 2</field>
<field name="city">Washington</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">House 3</field>
www.it-ebooks.info
Chapter 5
169
<field name="city">Washington</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">House 4</field>
<field name="city">San Francisco</field>
</doc>
</add>
3. Let's assume that our hypothetical user typed house in the search box. The query
to return the search results with the faceting results sorted alphabetically should
be like this:
http://localhost:8983/solr/select?q=name:house&facet=true&facet.
field=city&facet.sort=index
The results returned by Solr for the query should look like this:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="facet">true</str>
<str name="facet.field">city</str>
<str name="facet.sort">index</str>
<str name="q">name:house</str>
</lst>
</lst>
<result name="response" numFound="4" start="0">
<doc>
<str name="city">New York</str>
<str name="id">1</str>
<str name="name">House 1</str>
</doc>
<doc>
<str name="city">Washington</str>
<str name="id">2</str>
<str name="name">House 2</str>
</doc>
<doc>
<str name="city">Washington</str>
<str name="id">3</str>
<str name="name">House 3</str>
www.it-ebooks.info
Using the Faceting Mechanism
170
</doc>
<doc>
<str name="city">San Francisco</str>
<str name="id">4</str>
<str name="name">House 4</str>
</doc>
</result>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields">
<lst name="city">
<int name="New York">1</int>
<int name="San Francisco">1</int>
<int name="Washington">2</int>
</lst>
</lst>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
</response>
As you can see the faceting results returned by Solr are not sorted by counts but in
alphabetical order. Now let's see how it works.
How it works...
The index structure and the example data are only here to help us make a query so I'll skip
discussing them.
The query shown in the recipe differs from the standard faceting query by only one
parameter—facet.sort. It tells Solr how to sort the faceting results. The parameter
can be assigned one of two values:
ff count – which tells Solr to sort the faceting results placing the highest counts first
ff index – which tells Solr to sort the faceting results by index order, which means that
the results will be sorted lexicographically
For the purpose of the recipe we chose the second option and as you can see in the returned
results, we got what we wanted.
www.it-ebooks.info
Chapter 5
171
Implementing the autosuggest feature using
faceting
There are plenty of web-based applications that help users choose what they want to search
for. One of the features that helps users is the autocomplete (or autosuggest) feature, like
the one that most of the most used search engines have. Let's assume that we have an
e-commerce library and we want to help the user to choose a book title—we want to enable
autosuggest on the basis of the title. This recipe will show you how to do that.
Getting ready
Before you start reading this recipe, please take a look at the Getting the number of
documents with the same field value recipe in this chapter.
How to do it...
1. Let's begin with the assumption of having the following index structure (just add
this to your schema.xml file in the fields definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="title" type="text" indexed="true" stored="true" />
<field name="title_autocomplete" type="lowercase" indexed="true"
stored="true">
2. We also want to add some field copying to do some operations automatically.
To do that we need to add the following line after the fields section in your
schema.xml file:
<copyField source="title" dest="title_autocomplete" />
3. The lowercase field type should look like this (just add this to your schema.xml
file to the type definitions):
<fieldType name="lowercase" class="solr.TextField">
<analyzer>
<tokenizer class="solr.KeywordTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory" />
</analyzer>
</fieldType>
www.it-ebooks.info
Using the Faceting Mechanism
172
4. Now, let's index a sample data file which could look like this:
<add>
<doc>
<field name="id">1</field>
<field name="title">Lucene or Solr ?</field>
</doc>
<doc>
<field name="id">2</field>
<field name="title">My Solr and the rest of the world</field>
</doc>
<doc>
<field name="id">3</field>
<field name="title">Solr recipes</field>
</doc>
<doc>
<field name="id">4</field>
<field name="title">Solr cookbook</field>
</doc>
</add>
5. Let's assume that our hypothetical user typed the letters so in the search box and
we want to give him the first 10 suggestions with the highest counts. We also want
to suggest the whole titles, not just single words. To do that, we should send the
following query to Solr:
http://localhost:8983/solr/select?q=*:*&rows=0&facet=true&facet.
field=title_autocomplete&facet.prefix=so
As a result for the query, Solr returned the following output:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">16</int>
<lst name="params">
<str name="facet">true</str>
<str name="q">*:*</str>
<str name="facet.prefix">so</str>
<str name="facet.field">title_autocomplete</str>
<str name="rows">0</str>
</lst>
</lst>
www.it-ebooks.info
Chapter 5
173
<result name="response" numFound="4" start="0"/>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields">
<lst name="title_autocomplete">
<int name="solr cookbook">1</int>
<int name="solr recipes">1</int>
</lst>
</lst>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
</response>
As you can see, we got what we wanted in the faceting results. Now let's see how it works.
How it works...
You can see that our index structure defined in the schema.xml file is pretty simple.
Every book is described by two fields, id and title. The additional field will be used
to provide the autosuggest feature.
The copy field section is there to automatically copy the contents of the title field to
the title_autocomplete field.
The lowercase field type is a type we will use to provide the autocomplete feature; this is
the same for lowercase words typed by the users as well as uppercase words. If we want to
show different results for uppercased and lowercased letters then the string type will be
sufficient.
Now let's take a look at the query. As you can see we are searching the whole index (the
parameter q=*:*), but we are not interested in any search results (the rows=0 parameter).
We tell Solr that we want to use the faceting mechanism (facet=true parameter) and that
it will be field-based faceting on the basis of the title_autocomplete field (the facet.
field=title_autocomplete parameter). The last parameter, facet.prefix, can be
something new. Basically it tells Solr to return only those faceting results that begin with the
prefix specified as the value of this parameter, which in our case is the value of so. The use of
this parameter enables us to show the suggestions that the user is interested in, and we can
see in the results that we achieved what we wanted.
There's more...
There is one more thing I would like to say about autosuggestion functionality.
www.it-ebooks.info
Using the Faceting Mechanism
174
Suggesting words not whole phrases
If you want to suggest words instead of a whole phrase you don't have to change much
of the previous configuration. Just change the type of title_autocomplete to the type
based on solr.TextField (for example, the text_ws field type). You should remember,
though, not to use heavily analyzed text (like stemmed text) to be sure that your word won't
be modified too much.
Getting the number of documents that don't
have a value in the field
Let's imagine we have an e-commerce library where we put some of our books on a special
promotion, for example, we give them away for free. We want to share that knowledge with our
customers and say: Hey! You searched for Solr, we found this, but we also have X books that
are free! To do that, we index the books that are free without the price defined. But how do
you make a query to Solr to retrieve the data that we want? This recipe will show you how.
Getting ready
Before you start reading this recipe, please take a look at the Getting the number of
documents matching the query and the subquery recipe in this chapter.
How to do it...
1. Let's begin with the following index structure (just add this to your schema.xml
file in the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="title" type="text" indexed="true" stored="true" />
<field name="price" type="float" indexed="true" stored="true">
2. We will also use the following sample data:
<add>
<doc>
<field name="id">1</field>
<field name="title">Lucene or Solr ?</field>
<field name="price">11</field>
</doc>
<doc>
<field name="id">2</field>
<field name="title">My Solr and the rest of the world</field>
<field name="price">44</field>
</doc>
www.it-ebooks.info
Chapter 5
175
<doc>
<field name="id">3</field>
<field name="title">Solr recipes</field>
<field name="price">15</field>
</doc>
<doc>
<field name="id">4</field>
<field name="title">Solr cookbook</field>
</doc>
</add>
As you can see, the first three documents have a value in the price field, while
the last one doesn't. So now, for the purpose of the example, let's assume that
our hypothetical user is trying to find books that have solr in their title field.
3. Besides the search results, we want to show the number of documents that don't
have a value in the price field. To do that, we send the following query to Solr:
http://localhost:8983/solr/select?q=title:solr&facet=true&facet.
query=!price:[* TO *]\
The query should result in the following output from Solr:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
<str name="facet">true</str>
<str name="facet.query">!price:[* TO *]</str>
<str name="q">title:solr</str>
</lst>
</lst>
<result name="response" numFound="4" start="0">
<doc>
<str name="id">3</str>
<float name="price">15.0</float>
<str name="title">Solr recipes</str>
</doc>
<doc>
<str name="id">4</str>
<str name="title">Solr cookbook</str>
</doc>
<doc>
www.it-ebooks.info
Using the Faceting Mechanism
176
<str name="id">1</str>
<float name="price">11.0</float>
<str name="title">Lucene or Solr ?</str>
</doc>
<doc>
<str name="id">2</str>
<float name="price">44.0</float>
<str name="title">My Solr and the rest of the world</str>
</doc>
</result>
<lst name="facet_counts">
<lst name="facet_queries">
<int name="!price:[* TO *]">1</int>
</lst>
<lst name="facet_fields"/>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
</response>
As you can see we got the proper results. Now let's see how it works.
How it works...
You can see that our index structure defined in the schema.xml file is pretty simple. Every
book is described by three fields, id, title, and price. Their names speak for the type of
information they will hold.
The query is in most parts something you should be familiar with. First, we tell Solr that we
are searching for documents that have the word solr in the title field (the q=title:solr
parameter). Then we say that we want to have the faceting mechanism enabled by adding the
facet=true parameter. Then we add a facet query parameter that tells Solr to return the
number of documents that don't have a value in the price field. We do that by adding the
facet.query=!price:[* TO *] parameter. How does that work? You should be familiar
with how the facet.query parameter works, so I'll skip that part. The price:[* TO *]
expression tells Solr to count all the documents that have a value in the price field. By
adding the ! character before the fieldname, we tell Solr to negate the condition and in fact
we get the number of documents that don't have any value in the specified field.
www.it-ebooks.info
Chapter 5
177
Having two different facet limits for two
different fields in the same query
Imagine a situation where you have a database of cars in your application. Besides the
standard search results, you want to show two faceting by field results. The first of those
two faceting results, the number of cars in each category, should be shown without any
limits, while the second faceting, the one showing the cars by their manufacturer, should
be limited to a maximum of 10 results. Can we achieve it in one query? Yes, we can, and
this recipe will show you how to do it.
Getting ready
Before you start reading this recipe please take a look at the Getting the number of
documents with the same field value recipe in this chapter.
How to do it...
1. For the purpose of the recipe, let's assume that we have the following index structure
(just add this to your schema.xml file in the field definition section; we will use the
category and manufacturer fields to do the faceting):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="category" type="string" indexed="true" stored="true"
/>
<field name="manufacturer" type="string" indexed="true"
stored="true" />
2. We will need some sample data. For example we can use a file that has the
following content:
<add>
<doc>
<field name="id">1</field>
<field name="name">Super Mazda car</field>
<field name="category">sport</field>
<field name="manufacturer">mazda</field>
</doc>
<doc>
www.it-ebooks.info
Using the Faceting Mechanism
178
<field name="id">2</field>
<field name="name">Mercedes Benz car</field>
<field name="category">limousine</field>
<field name="manufacturer">mercedes</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Bentley car</field>
<field name="category">limousine</field>
<field name="manufacturer">bentley</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">Super Honda car</field>
<field name="category">sport</field>
<field name="manufacturer">honda</field>
</doc>
</add>
3. For the purpose of the example, let's assume that our hypothetical user is trying to
search the index for the word car. To do that we should send Solr the following query:
http://localhost:8983/solr/select?q=name:car&facet=true&facet.
field=category&facet.field=manufacturer&f.category.facet.limit=-
1&f.manufacturer.facet.limit=10
The query resulted in the following response from Solr:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="f.category.facet.limit">-1</str>
<str name="facet">true</str>
<str name="q">name:car</str>
<arr name="facet.field">
<str>category</str>
<str>manufacturer</str>
</arr>
<str name="f.manufacturer.facet.limit">10</str>
</lst>
</lst>
<result name="response" numFound="4" start="0">
<doc>
www.it-ebooks.info
Chapter 5
179
<str name="id">3</str>
<str name="name">Bentley car</str>
<str name="category">limousine</str>
<str name="manufacturer">bentley</str>
</doc>
<doc>
<str name="id">1</str>
<str name="name">Super Mazda car</str>
<str name="category">sport</str>
<str name="manufacturer">mazda</str>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Mercedes Benz car</str>
<str name="category">limousine</str>
<str name="manufacturer">mercedes</str>
</doc>
<doc>
<str name="id">4</str>
<str name="name">Super Honda car</str>
<str name="category">sport</str>
<str name="manufacturer">honda</str>
</doc>
</result>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields">
<lst name="category">
<int name="limousine">2</int>
<int name="sport">2</int>
</lst>
<lst name="manufacturer">
<int name="bentley">1</int>
<int name="honda">1</int>
<int name="mazda">1</int>
<int name="mercedes">1</int>
</lst>
</lst>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
</response>
Now let's see how it works.
www.it-ebooks.info
Using the Faceting Mechanism
180
How it works...
Our data is very simple. As you can see in the field definition section of the schema.xml
file and the example data, every document is described by four fields—id, name, category,
and manufacturer. I think that their names speak for themselves and I don't need to
discuss them.
The first parts of the query are pretty standard. We ask for documents which have the word
car in their name field. Then we tell Solr to enable faceting (the facet=true parameter) and
we tell it what field will be used to calculate faceting results (the facet.field=category
and the facet.field=manufacturer parameters). Then we specify the limits. By adding
the parameter limits in a way shown in the example (f.FIELD_NAME.facet.limit) we
tell Solr to set the limits for the faceting calculation for the particular field. In our example
query, by adding the f.category.facet.limit=-1 parameter we told Solr that we don't
want any limits on the number of faceting results for the category field. By adding the
f.manufacturer.facet.limit=10 parameter we told Solr that we want a maximum of 10
faceting results for the manufacturer field.
Following the pattern you can specify per-field values for faceting properties such as sorting
and minimum count.
Using decision tree faceting
Imagine that in our store we have products divided into categories. In addition to that, we
store information about the stock of the items. Now, we want to show our crew how many of
the products in the categories are in stock and how many we are missing. The first thing that
comes to mind is using the faceting mechanism and some additional calculation. But why
bother, when Solr 4.0 can do that calculation for us with the use of so called pivot faceting.
This recipe will show you how to use it.
How to do it...
The following steps illustrate the use of pivot faceting:
1. Let's start with the following index structure (just add this to your schema.xml
file in the field definition section; we will use the category and stock fields
to do the faceting):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="category" type="string" indexed="true" stored="true"
/>
<field name="stock" type="boolean" indexed="true" stored="true" />
www.it-ebooks.info
Chapter 5
181
2. Now let's index the following example data:
<add>
<doc>
<field name="id">1</field>
<field name="name">Book 1</field>
<field name="category">books</field>
<field name="stock">true</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Book 2</field>
<field name="category">books</field>
<field name="stock">true</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Workbook 1</field>
<field name="category">workbooks</field>
<field name="stock">false</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">Workbook 2</field>
<field name="category">workbooks</field>
<field name="stock">true</field>
</doc>
</add>
3. Let's assume we are running a query from the administration panel of our
shop and we are not interested in the documents at all; we only want to know
how many documents are in stock or out of stock for each of the categories.
The query implementing that logic should look like this:
http://localhost:8983/solr/select?q=*:*&rows=0&facet=true&facet.
pivot=category,stock
The response to the query is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">76</int>
<lst name="params">
<str name="facet">true</str>
www.it-ebooks.info
Using the Faceting Mechanism
182
<str name="indent">true</str>
<str name="facet.pivot">category,stock</str>
<str name="q">*:*</str>
<str name="rows">0</str>
</lst>
</lst>
<result name="response" numFound="4" start="0">
</result>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields"/>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
<lst name="facet_pivot">
<arr name="category,stock">
<lst>
<str name="field">category</str>
<str name="value">books</str>
<int name="count">2</int>
<arr name="pivot">
<lst>
<str name="field">stock</str>
<bool name="value">true</bool>
<int name="count">2</int>
</lst>
</arr>
</lst>
<lst>
<str name="field">category</str>
<str name="value">workbooks</str>
<int name="count">2</int>
<arr name="pivot">
<lst>
<str name="field">stock</str>
<bool name="value">false</bool>
<int name="count">1</int>
</lst>
<lst>
<str name="field">stock</str>
<bool name="value">true</bool>
<int name="count">1</int>
</lst>
</arr>
</lst>
</arr>
</lst>
</lst>
</response>
You will notice that we received what we wanted, now let's see how it works.
www.it-ebooks.info
Chapter 5
183
How it works...
Our data is very simple. As you can see in the field definition section of the schema.xml file
and the example data, every document is described by four fields—id, name, category, and
stock. I think that their names speak for themselves and I don't need to discuss them.
The interesting things start with the query. We specified that we want the query to match all
the documents (q=*:* parameter), but we don't want to see any documents in the response
(rows=0 parameter). In addition to that, we want to have faceting calculation (facet=true
parameter) and we want to use the decision tree faceting, also known as pivot faceting. We
do that by specifying which fields should be included in the tree faceting. In our case we
want the top level of the pivot facet to be calculated on the basis of the category field,
and the second level (the one nested in the category field calculation) should be based
on the values available in the stock field. Of course, if you would like to have another value
of another field nested under the stock field you can do that by adding another field to the
facet.pivot query parameter. Assuming you would like to see faceting on the price field
nested under the stock field, your facet.pivot parameter would look like this: facet.
pivot=category,stock,price.
As you can see in the response, each nested faceting calculation result is written inside
the <arr name="pivot"> XML tag. So let's look at the response structure. The first
level of your facet pivot tree is based on the category field. You can see two books (<int
name="count">2</int>) in the books category (<str name="value">books</str>),
and these books have the stock field (<str name="field">stock</str>) set to true
(<bool name="value">true</bool>). For the workbooks category, the situation is a
bit different, because you can see two different sections there—one for documents with the
stock field equal to false, and the other with the stock field set to true. But in the end,
the calculation is correct and that's what we wanted!
Calculating faceting for relevant documents
in groups
If you have ever used the field collapsing functionality of Solr you may be wondering if there is a
possibility of using that functionality and faceting. Of course there is, but the default behavior still
works so that you get the faceting calculation on the basis of documents not document groups.
In this recipe, we will learn how to query Solr so that it returns facets calculated for the most
relevant document in each group in order for your user facet counts to be more or less grouped.
Getting ready
Before reading this recipe please look at the Using field to group results, Using query to group
results, and Using function query to group results recipes in Chapter 8, Using Additional Solr
Functionalities. Also, if you are not familiar with faceting functionality, please read the first
three recipes in this chapter.
www.it-ebooks.info
Using the Faceting Mechanism
184
How to do it...
1. As a first step we need to create an index. For the purpose of the recipe let's assume
that we have the following index structure (just add this to your schema.xml file to
the field definition section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="category" type="string" indexed="true" stored="true"
/>
<field name="stock" type="boolean" indexed="true" stored="true" />
2. The second step is to index the data. We will use some example data which looks
like this:
<add>
<doc>
<field name="id">1</field>
<field name="name">Book 1</field>
<field name="category">books</field>
<field name="stock">true</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Book 2</field>
<field name="category">books</field>
<field name="stock">true</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Workbook 1</field>
<field name="category">workbooks</field>
<field name="stock">false</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">Workbook 2</field>
<field name="category">Workbooks</field>
<field name="stock">true</field>
</doc>
</add>
www.it-ebooks.info
Chapter 5
185
3. So now it's time for our query. So, let's assume we want our results to be grouped
on the values of the category field, and we want the faceting to be calculated on
the stock field. And remember that we are only interested in the most relevant
document from each result group when it comes to faceting. So, the query that
would tell Solr to do what we want should look like this:
http://localhost:8983/solr/select?q=*:*&facet=true&facet.
field=stock&group=true&group.field=category&group.truncate=true
The results for the query would look as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
<lst name="params">
<str name="facet">true</str>
<str name="q">*:*</str>
<str name="group.truncate">true</str>
<str name="group.field">category</str>
<str name="group">true</str>
<str name="facet.field">stock</str>
</lst>
</lst>
<lst name="grouped">
<lst name="category">
<int name="matches">4</int>
<arr name="groups">
<lst>
<str name="groupValue">books</str>
<result name="doclist" numFound="2" start="0">
<doc>
<str name="id">1</str>
<str name="name">Book 1</str>
<str name="category">books</str>
<bool name="stock">true</bool></doc>
</result>
</lst>
<lst>
<str name="groupValue">workbooks</str>
<result name="doclist" numFound="2" start="0">
<doc>
<str name="id">3</str>
www.it-ebooks.info
Using the Faceting Mechanism
186
<str name="name">Workbook 1</str>
<str name="category">workbooks</str>
<bool name="stock">false</bool>
</doc>
</result>
</lst>
</arr>
</lst>
</lst>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields">
<lst name="stock">
<int name="false">1</int>
<int name="true">1</int>
</lst>
</lst>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
</response>
As you can see everything worked as it should. Now let's see how it works.
How it works...
Our data is very simple. As you can see in the field definition section of the schema.xml file
and the example data, every document is described by four fields—id, name, category, and
stock. I think that their names speak for themselves and I don't need to discuss them.
As it comes to the query, we fetch all the documents from the index (the q=*:* parameter).
Next, we say that we want to use faceting and we want it to be calculated on the stock field.
We want a grouping mechanism to be active and we want to group documents on the basis of
the category field (all the query parameters responsible for defining the faceting and grouping
behavior are described in the appropriate recipes in this book, so please look at those if you
are not familiar with those parameters). And finally something new—the group.truncate
parameter is set to true. If set to true, like in our case, facet counts will be calculated using
only the most relevant document in each of the calculated groups. So in our case, for the group
with the category field equal to books, we have the true value in the stock field and for the
second group we have false in the stock field. Of course we are looking at the most relevant
documents, so the first ones in our case. So, as you can easily see, we've got two facet counts
for the stock field, both with a count of 1, which is what we would expect.
There is one thing more—at the time of writing this book, the group.truncate parameter
was not supported when using distributed search, so please be aware of that.
www.it-ebooks.info
6
Improving Solr
Performance
In this chapter we will cover:
ff Paging your results quickly
ff Configuring the document cache
ff Configuring the query result cache
ff Configuring the filter cache
ff Improving Solr performance right after the start up or commit operation
ff Caching whole result pages
ff Improving faceting performance for low cardinality fields
ff What to do when Solr slows down during indexing
ff Analyzing query performance
ff Avoiding filter caching
ff Controlling the order of execution of filter queries
ff Improving the performance of numerical range queries
Introduction
Performance of the application is one of the most important factors. Of course, there are
other factors, such as usability and availability—we could recite many more—but one of the
most crucial is performance. Even if our application is perfect in terms of usability, the
users won't be able to use it if they will have to wait for minutes for the search results.
www.it-ebooks.info
Improving Solr Performance
188
The standard Solr deployment is fast enough, but sooner or later a time will come when
you will have to optimize your deployment. This chapter and its recipes will try to help you
with the optimization of Solr deployment.
If your business depends on Solr, you should keep monitoring it even after optimization.
There are numerous solutions available in the market, from the generic and open-sourced
ones such as Gangila (http://ganglia.sourceforge.net/) to search-specific ones
such as Scalable Performance Monitoring (http://www.sematext.com/spm/index.
html) from Sematext.
Paging your results quickly
Imagine a situation where you have a user constantly paging through the search results.
For example, one of the clients I was working for was struggling with the performance of his
website. His users tend to search for a word and then page through the result pages – the
statistical information gathered from the application logs showed that typical users changed
the page about four to seven times. Apart from improving the query relevance (which isn't
what we will talk about in this recipe), we decided to optimize the paging. How do we do that?
This recipe will show you.
How to do it...
So, let's get back to my client deployment. As I mentioned, typical users typed a word into
the search box and then used the paging mechanism to go through a maximum of seven
pages. My client's application was showing 20 documents on a single page. So, it can be
easily calculated that we need about 140 documents in advance, apart from the first 20
documents returned by the query.
1. So what we did was actually pretty simple. First of all, we modified the
queryResultWindowSize property in the solrconfig.xml file and changed
it to the following value:
<queryResultWindowSize>160</queryResultWindowSize>
2. We then changed the maximum number of documents that can be cached for a
single query to 160, by adding the following property to the solrconfig.xml file:
<queryResultMaxDocsCached>160</queryResultMaxDocsCached>
We also modified queryResultCache, but that's a discussion for another recipe. To learn
how to change that cache, please refer to the How to configure the query result cache recipe
in this chapter.
www.it-ebooks.info
Chapter 6
189
How it works...
So how does Solr behave with the changes proposed in the preceding section? First of all,
queryResultWindowSize tells Solr to store (in documentCache) a maximum of the 160
documents IDs with every query. Therefore, after doing the initial query, we gather more
documents than we actually need. Because of this we are sure that when a user clicks on
the next page button, which is present in our application, the results will be taken from the
cache. So there won't be a need for intensive I/O operations. You must remember that the
160 documents IDs will be stored in the cache and won't be visible in the results list, as the
result size is controlled by the rows parameter.
The queryResultMaxDocsCached property tells Solr about the maximum number of
document IDs that can be cached for a single query (please remember than in this case, the
cache stores the document identifiers and not whole documents). We told Solr that we want
a maximum of 160 document IDs for a single query, because the statistics showed us that
we don't need more, at least for a typical user.
Of course, there is another thing that should be done – setting the query result cache size,
but that is discussed in another recipe.
Configuring the document cache
Cache can play a major role in your deployment's performance. One of the caches that you can
configure when setting up Solr is the document cache. It is responsible for storing the Lucene
internal documents that have been fetched from the disk. The proper configuration of this
cache can save precious I/O calls and therefore boost the whole deployment performance.
This recipe will show you how to properly configure the document cache.
How to do it...
For the purpose of this recipe, I assumed that we are dealing with the deployment of Solr
where we have about 100, 000 documents. In our case, a single Solr instance is getting a
maximum of 10 concurrent queries and the maximum number of documents that a query
can fetch is 256.
With the preceding parameters, our document cache should look similar to the following code
snippet (add this code to the solrconfig.xml configuration file):
<documentCache
class="solr.LRUCache"
size="2560"
initialSize="2560"/>
www.it-ebooks.info
Improving Solr Performance
190
Notice that we didn't specify the autowarmCount parameter—this is because the document
cache uses Lucene's internal ID to identify documents. These identifiers can't be copied
between index changes and thus we can't automatically warm this cache.
How it works...
The document cache configuration is simple. We define it in the documentCache XML tag
and specify a few parameters that define the document cache's behavior. First of all, the
class parameter tells Solr which Java class should be used for implementation. In our
example, we use solr.LRUCache because we will be adding more information into the
cache than we will be fetching from it. When you see that you are getting more information
than you add, consider using solr.FastLRUCache. The next parameter tells Solr the
maximum size of the cache (the size parameter). As the Solr wiki says, we should always
set this value to more than the maximum number of results returned by the query multiplied
by the maximum concurrent queries than we think will be sent to the Solr instance. This will
ensure that we always have enough place in the cache, so that Solr will not have to fetch the
data from the index multiple times during a single query.
The last parameter tells Solr the initial size of the cache (the initialSize parameter). I
tend to set it to the same value as the size parameter to ensure that Solr won't be wasting
its resources on cache resizing.
The more fields marked as stored in the index structure, the higher
the memory usage of this cache will be.
Please remember that when using the values shown in this example, you must always observe
your Solr instance and act when you see that your cache is acting in the wrong way. Remember
that having a very large cache with very low hit rate can be worse than having no cache at all.
Along with everything else, you should pay attention to your cache usage as your Solr instances
work. If you see evictions, then this may be a signal that your caches are too small. If you
have a very poor hit rate, then it's sometimes better to turn the cache off. Cache setup is one
of those things in Apache Solr that is very dependent on your data, queries, and users; so I'll
repeat once again—keep an eye on your caches and don't be afraid to react and change them.
Configuring the query result cache
The major Solr role in a typical e-commerce website is handling user queries. Of course, users
of the site can type multiple queries in the Search box and we can't easily predict how many
unique queries there may be. But, using the logs that Solr gives us, we can check how many
different queries there were in the last day, week, month, or year. Using this information, we
can configure the query result cache to suit our needs in the most optimal way, and this recipe
will show you how to do it.
www.it-ebooks.info
Chapter 6
191
How to do it...
For the purpose of this recipe, let's assume that one Solr instance of our e-commerce website
is handling about 10 to 15 queries per second. Each query can be sorted by four different
fields (the user can choose by which field). The user can also choose the order of sort. By
analyzing the logs for the past three months, we know that there are about 2000 unique
queries that users tend to type in the search box of our application. We also noticed that
our users don't usually use the paging mechanism.
On the basis of this information, we configure our query results cache as follows (add this
code to the solrconfig.xml configuration file):
<queryResultCache
class="solr.LRUCache"
size="16000"
initialSize="16000"
autowarmCount="4000"/>
How it works...
Adding the query result cache to the solrconfig.xml file is a simple task. We define it in
the queryResultCache XML tag and specify a few parameters that define the query result's
cache behavior. First of all, the class parameter tells Solr which Java class should be used
for implementation. In our example, we use solr.LRUCache because we will be adding
more information into the cache than we will fetching from it. When you see that you are get
more information than you add, consider using solr.FastLRUCache. The next parameter
tells Solr about the maximum size of the cache (the size parameter). This cache should be
able to store the ordered identifiers of the objects that were returned by the query with its
sort parameter and the range of documents requested. This means that we should take
the number of unique queries, multiply it by the number of sort parameters and the number
of possible orders of sort. So in our example, the size should be at least the result of the
following equation:
size = 2000 * 4 * 2
In our case, it is 16,000.
I tend to set the initial size of this cache to the maximum size; so in our case, I set the
initialSize parameter to a value of 16000. This is done to avoid the resizing of the cache.
The last parameter (autowarmCount) says how many entries should be copied when Solr
invalidates caches (for example, after a commit operation). I tend to set this parameter to
a quarter of the maximum size of the cache. This is done because I don't want the caches
to be warming for too long. However, please remember that the auto-warming time depends
on your deployment and the autowarmCount parameter should be adjusted if needed.
www.it-ebooks.info
Improving Solr Performance
192
Please remember that when using the values shown in this example, you must always observe
your Solr instance and act when you see that your cache is acting in the wrong way.
Along with everything else, you should pay attention to your cache usage as your Solr instances
work. If you see evictions, then this may be a signal that your caches are too small. If you
have a very poor hit rate, then it's sometimes better to turn the cache off. Cache setup is one
of those things in Apache Solr that is very dependent on your data, queries, and users; so I'll
repeat once again—keep an eye on your caches and don't be afraid to react and change them.
Configuring the filter cache
Almost every client of mine who uses Solr, tends to forget or simply doesn't know how to use
filter queries or simply filters. People tend to add another clause with a logical operator to the
main query—they forget how efficient filters can be, at least when used wisely. And that's why
whenever I can, I tell people using Solr to use filter queries. But when using filter queries, it is
nice to know how to set up a cache that is responsible for holding the filters results – the filter
cache. This recipe will show you how to properly set up the filter cache.
How to do it...
For the purpose of this recipe, let's assume that we have a single Solr slave instance to
handle all the queries coming from the application. We took the logs from the last three
months and analyzed them. From this we know, that our queries are making about 2000
different filter queries. By getting this information, we can set up the filter cache for our
instance. This configuration should look similar to the following code snippet (add this
code to the solrconfig.xml configuration file):
<filterCache
class="solr.FastLRUCache"
size="2000"
initialSize="2000"
autowarmCount="1000"/>
That's it. Now let's see what those values mean.
How it works...
As you may have noticed, adding the filter cache to the solrconfig.xml file is a simple
task; you just need to know how many unique filters your Solr instance is receiving. We define
this in the filterCache XML tag and specify a few parameters that define the query result
cache behavior. First of all, the class parameter tells Solr which Java class should be used
for implementation. In our example, we use solr.LRUCache because we will be adding more
information into the cache than we will fetching from it. When you see that you are getting
more information than you add, consider using solr.FastLRUCache.
www.it-ebooks.info
Chapter 6
193
The next parameter tells Solr the maximum size of the cache (the size parameter). In our
case, we said that we have about 2000 unique filters and we set the maximum size to that
value. This is done because each entry of the filter cache stores the unordered sets of Solr
document identifiers that match the given filter. In this way, after the first use of the filter,
Solr can use the filter cache to apply filtering and thus save the I/O operations.
The next parameter – initialSize tells Solr about the initial size of the filter cache. I tend
to set it's value to the same as that of the size parameter to avoid cache resizing. So in our
example, we set it to the value of 2000.
The last parameter (autowarmCount) says how many entries should be copied when Solr
invalidates caches (for example, after a commit operation). I tend to set this parameter to
a quarter of the maximum size of the cache. This is done because I don't want the caches
to be warming for too long. However, please remember that the auto-warming time depends
on your deployment and the autowarmCount parameter should be adjusted if needed.
Please remember that when using the values shown in this example, you must always observe
your Solr instance and act when you see that your cache is acting in the wrong way.
Along with everything, you should pay attention to your cache usage as your Solr instances
work. If you see evictions, then this may be a signal that your caches are too small. If you have
a very poor hit rate, then it's sometimes better to turn the cache off. Cache setup is one of those
things in Apache Solr that is very dependent on your data, queries, and users; so I'll repeat once
again—keep an eye on your caches and don't be afraid to react and change them. For example,
take a look at the following screenshot that shows that the filter cache is probably too small,
because the evictions are happening (this is a screenshot of the Solr administration panel):
www.it-ebooks.info
Improving Solr Performance
194
Improving Solr performance right after the
startup or commit operation
Anyone with some experience with Solr would have noticed that – right after the startup, Solr
doesn't have as much of an improved query performance as after running a while. This happens
because Solr doesn't have any information stored in caches, the I/O is not optimized, and so on.
Can we do something about it? Of course we can, and this recipe will show you how to do it.
How to do it...
The following steps will explain how we can enhance Solr performance right after the startup
or commit operation:
1. First of all, we need to identify the most common and the heaviest queries that we send
to Solr. I have two ways of doing this—first of all, I analyze the logs that Solr produces
and see how queries behave. I tend to choose those queries that are run often and
those that run slowly in my opinion. The second way of choosing the right queries is by
analyzing the application that use Solr and seeing what queries they produce, which
queries will be the most crucial, and so on. Based on my experience, the log-based
approach is usually much faster and can be done using self-written scripts.
But let's assume that we have identified the following queries as good candidates:
q=cats&fq=category:1&sort=title+desc,value+desc,score+desc
q=cars&fq=category:2&sort=title+desc
q=harry&fq=category:4&sort=score+desc
2. What we will do next is just add the so called warming queries to the solrconfig.
xml file. So the listener XML tag definition in the solrconfig.xml file should
look similar to the following code snippet:
<listener event="firstSearcher"
class="solr.QuerySenderListener">
<arr name="queries">
<lst>
<str name="q">cats</str>
<str name="fq">category:1</str>
<str name="sort">
title desc,value desc,score desc
</str>
<str name="start">0</str>
www.it-ebooks.info
Chapter 6
195
<str name="rows">20</str>
</lst>
<lst>
<str name="q">cars</str>
<str name="fq">category:2</str>
<str name="sort">title desc</str>
<str name="start">0</str>
<str name="rows">20</str>
</lst>
<lst>
<str name="q">harry</str>
<str name="fq">category:4</str>
<str name="sort">score desc</str>
<str name="start">0</str>
<str name="rows">20</str>
</lst>
</arr>
</listener>
Basically we added the so-called warming queries to the startup of Solr. Now let's
see how it works.
How it works...
By adding the preceding fragment of configuration to the solrconfig.xml file, we told
Solr that we want it to run those queries whenever a firstSearcher event occurs. The
firstSearcher event is fired whenever a new searcher object is prepared and there is
no searcher object available in the memory. So basically, the firstSearcher event
occurs right after Solr startup.
So what happens after Solr startup? After adding the preceding fragment, Solr runs each
of the defined queries. By doing this, the caches get populated with the entries that are
significant for the queries that we identified. This means that if we did the job right, we
have Solr configured and ready to handle the most common and heaviest queries right
after its startup.
Let's just go over what all the configuration options mean. The warm up queries are always
defined under the listener XML tag. The event parameter tells Solr what event should
trigger the queries; in our case, it is firstSearcher. The class parameter is the Java
class that implements the listener mechanism. Next, we have an array of queries that
are bound together by the array tag with the name="queries" parameter. Each of
the warming queries is defined as a list of parameters that are grouped by the lst tag.
www.it-ebooks.info
Improving Solr Performance
196
There's more...
There is one more thing that I would like to mention (in the following section).
Improving Solr performance after commit operations
If you are interested in improving the performance of your Solr instance, you should also look
at the newSearcher event. This event occurs whenever a commit operation is performed
by Solr (for example, after replication). Assuming that we identified the same queries as
before as good candidates to warm the caches, we should add the following entries to the
solrconfig.xml file:
<listener event="newSearcher" class="solr.QuerySenderListener">
<arr name="queries">
<lst>
<str name="q">cats</str>
<str name="fq">category:1</str>
<str name="sort">title desc,value desc,score desc</str>
<str name="start">0</str>
<str name="rows">20</str>
</lst>
<lst>
<str name="q">cars</str>
<str name="fq">category:2</str>
<str name="sort">title desc</str>
<str name="start">0</str>
<str name="rows">20</str>
</lst>
<lst>
<str name="q">harry</str>
<str name="fq">category:4</str>
<str name="sort">score desc</str>
<str name="start">0</str>
<str name="rows">20</str>
</lst>
</arr>
</listener>
Please remember that the warming queries are especially important for the caches that
can't be automatically warmed.
www.it-ebooks.info
Chapter 6
197
Caching whole result pages
Imagine a situation where you have an e-commerce library and your data changes rarely. What
can you do to take away the stress on your search servers? The first thing that comes to mind
is caching; for example, HTTP caching. And yes, that is a good point. But do we have to set up
external caches prior to Solr, or can we tell Solr to use its own caching mechanism? We can
use Solr to cache whole result pages and this recipe will show you how to do it.
Getting ready
Before you continue to read this recipe, it would be nice for you to know some basics about
the HTTP cache headers. To learn something about it, please refer to the RFC document that
can be found on the W3 site at http://www.w3.org/Protocols/rfc2616/rfc2616-
sec13.html.
How to do it...
So let's configure the HTTP cache. To do this, we need to configure the Solr request
dispatcher. Let's assume that our index changes every 60 minutes.
1. Let's start by replacing the request dispatcher definition in the solrconfig.xml
file with the following content:
<requestDispatcher handleSelect="true">
<httpCaching lastModifiedFrom="openTime"
etagSeed="Solr">
<cacheControl>max-age=3600, public</cacheControl>
</httpCaching>
</requestDispatcher>
2. Now, let's try sending a query similar to the following to see the HTTP headers:
http://localhost:8983/solr/select?q=book
We get the following HTTP headers:
HTTP/1.1 200 OK
Cache-Control: max-age=3600, public
Expires: Tue, 11 Sep 2012 16:44:56 GMT
Last-Modified: Tue, 11 Sep 2012 15:43:24 GMT
ETag: "YzAwMDAwMDAwMDAwMDAwMFNvbHI="
Content-Type: application/xml; charset=UTF-8
Transfer-Encoding: chunked
From this we can tell that cache works.
www.it-ebooks.info
Improving Solr Performance
198
How it works...
The cache definition is defined inside the requestDispatcher XML tag. The
handleSelect="true" attribute describes error handling and it should be set to
true. Then, we see the httpCaching tag (notice the lack of the <httpCaching
never304="true"> XML tag), which actually configures the HTTP caching in Solr. The
lastModifiedFrom="openTime" attribute defines that the last modified HTTP header
will be relative to when the current searcher object was opened (for example, relative to the
last replication execution date). You can also set this parameter value to dirLastMod to
be relative to when the physical index was modified. Next, we have the eTagSeed attribute,
which is responsible for generating the ETag HTTP cache header.
The next configuration tag is the cacheControl tag, which can be used to specify the
generation of the cache control HTTP headers. In our example, adding the max-age=3600
parameter tells Solr that it should generate an additional HTTP cache header, which will
confirm that the cache is valid for a maximum of one hour. The public directive means
that the response can be cached by any cache type.
As you can see from the response, the headers that we got as a part of the results returned
by Solr tell us that we got what we wanted.
Improving faceting performance for low
cardinality fields
Let's assume that our data which we use to calculate faceting can be considered to have low
distinct values. For example, we have an e-commerce shop with millions of products – clothes.
Each document in our index, apart from name and price, is also described by additional
information – target size. So, we have values such as XS, S, M, L, XL, and XXL (that is, six
distinct values), and each document can only be described with a single value. In addition to
this, we run field faceting on that information and it doesn't work fast by default. This recipe
will show you how to change that.
How to do it...
The following steps will explain how we can improve faceting performance for low
cardinality fields:
1. Let's begin with the following index structure (add the following entries to your
schema.xml fields section):
<field name="id " type="string" indexed="true"
stored="true" required="true" />
www.it-ebooks.info
Chapter 6
199
<field name="name " type="text " indexed="true"
stored="true" />
<field name="size" type="string" indexed="true"
stored="true" />
The size field is the one in which we store our XS, S, M, L, XL, and XXL values
(remember: one value per document).
2. Assuming that our user typed black skirt into the Search box, our query would
look similar to the following code snippet:
q=name:(black+skirt)&q.op=AND&facet=true&facet.field=size
Assuming that the query is matching one-fourth of our documents, we can expect
the query to be executing longer than usual. This is because the default faceting
calculation is optimized for fields that have many unique values in the index and
we have the opposite—we have many documents but few unique terms.
3. In order to speed up faceting in our case, let's add the facet.method=enum
parameter to our query, so that it looks similar to the following code snippet:
q=name:(black+skirt)&q.op=AND&facet=true&facet.field=size&facet.
method=enum
If you measure the performance before and after the change you will notice the difference;
let's discuss why.
How it works...
Let's take a look at the query—we search for the given words in the name field using the AND
logical operator (q.op parameter). As our requirements state, we also run faceting on the
size field (facet=true and facet.field=size parameters).
We know that our fields have only six distinct values, and we also assumed that our queries
can return vast amount of documents. To handle such faceting calculation faster than the
default method, we decided to use the enum method of facet calculation. The default faceting
calculation method (facet.method=fc) iterates over documents that match the query and
sums the terms that appear in the field that we are calculating faceting on. The enum method
does the other thing – it enumerates all the terms in the field that we want to calculate
faceting on, and intersects the documents that match the query with the documents that
match the enumerated terms. In this way, less time and processing is needed to calculate
field faceting for low cardinality fields, such as size in our case, and thus we see faster
query execution.
It is good to know that for field faceting on Boolean fields, Solr uses the enum faceting method
by default.
www.it-ebooks.info
Improving Solr Performance
200
There's more...
You can also use the faceting method for each field you perform faceting upon.
Specifying faceting method per field
If you have multiple fields on which you run faceting, then you may only want to change the
method for one of them (or more than one, but not all). To do that, instead of adding the
facet.method=enum parameter, you can add the facet.FIELD_NAME.method=enum
parameter for each field whose faceting calculation method you would want to change. For
example, if you would like to change the faceting method for the size field, you can add the
following parameter:
facet.size.method=enum
What to do when Solr slows down during
indexing
One of the most common problems when indexing a vast amount of data is the indexing time.
Some of the problems with indexing time are not easily resolvable, but others are. Imagine that
you need to index about 300,000 documents that are in a single XML file. You run the post.
sh bash script that is provided with Solr and you wait, wait, and wait. Something is wrong –
when you index 10,000 documents you need about a minute, but now you are waiting about
an hour and the commit operation didn't take place. Is there something we can do to speed
it up? Sure, and this recipe will tell you how to.
How to do it...
The solution to the situation is very simple – just add the commit operation every now and then.
But as you may have noticed, I mentioned that our data is written in a single XML file. So, how do
we add the commit operation to that kind of data? Send it in parallel to the indexing process?
No, we need to enable the auto commit mechanism. To do that, let's modify the solrconfig.
xml file, and change the update handler definition to the following one:
<updateHandler class="solr.DirectUpdateHandler2">
<autoCommit>
<maxTime>60000</maxTime>
<openSearcher>true</openSearcher>
</autoCommit>
</updateHandler>
www.it-ebooks.info
Chapter 6
201
If you start the indexing described in the indexing process, you will notice that a commit
command will be sent once a minute while the indexing process is takes place. Now, let's
see how it works.
How it works...
Solr tends to slow down the indexing process when indexing a vast amount of data without the
commit commands being sent once in a while. This behavior is completely understandable
and is bound to the memory and how much of it Solr can use.
We can avoid the slowing down behavior by adding the commit command after the set
amount of time or set amount of data. In this recipe, we choose the first approach.
We assumed that it would be good to send the commit command once every minute. So we add
the <autoCommit> section with the <maxTime> XML tag set to a value of 60000. This value is
specified in milliseconds. We've also specified that we want the search to be reopened after the
commit and thus the data available for search (the <openSearcher>true</openSearcher>
option). If you would only like to write the data to the index and not have it available for search,
just change the <openSearcher>true</openSearcher> option to false. That's all we
need to do. After this change, Solr will send a commit command after every minute passes
during the indexing operation, and we don't have to worry that Solr indexing speed will
decrease over time.
There's more...
There are two more things about automatic commits that should be mentioned.
Commit after a set amount of documents
Sometimes, there is a need to rely not on the time between commit operations, but on the
amount of documents that were indexed. If this is the case, we can choose to automatically
send the commit command after a set amount of documents are processed. To do this, we
add the <maxDocs> XML tag with the appropriate amount. For example, if we want to send
the commit command after every 50000 documents, the update handler configuration
should look similar to the following code snippet:
<updateHandler class="solr.DirectUpdateHandler2">
<autoCommit>
<maxDocs>50000</maxDocs>
<openSearcher>true</openSearcher>
</autoCommit>
</updateHandler>
www.it-ebooks.info
Improving Solr Performance
202
Commit within a set amount of time
There may be situations when you want some of the document to be committed faster than
the auto commit settings. In order to do that, you can add the commitWithin attribute to
the <add> tag of your data XML time. This attribute will tell Solr to commit the documents
within the specified time (specified in milliseconds). For example, if we want the portion of
documents to be indexed within 100 milliseconds, our data file would look similar to the
following code snippet:
<add commitWithin="100">
<doc>
<field name="id">1</field>
<field name="title">Book 1</field>
</doc>
</add>
Analyzing query performance
Somewhere along the experience with Apache Solr (and not only Solr), you'll end up at a point
where some of your queries are not running as you would like them to run – some of them are
just slow. Of course, such a situation is not desirable and we have to do something to make
those queries run faster. But how do we know which part of the query is the one we should
look at ? This recipe will tell you what information you can get from Solr.
How to do it...
The following steps will help you analyze query performance:
1. Let's start with the assumption that we have a query that has parts that are not as
fast as we would like it to be. The query is as follows:
http://localhost:8983/solr/select?q=metal&facet=true&facet.
field=date&facet.query=from:[10+TO+2000]
2. In order to get the information we want, we need to add the debugQuery=true
parameter to our query, so that it looks similar to the following code snippet:
http://localhost:8983/solr/select?q=metal&facet=true&facet.
field=date&facet.query=from:[10+TO+2000]&debugQuery=true
The response from Solr is as follows (I've cut some parts of the response, because
it is quite large and we are only interested in the last section):
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">427</int>
www.it-ebooks.info
Chapter 6
203
</lst>
<result name="response" numFound="61553" start="0">
<doc>
(...)
</doc>
</result>
<lst name="facet_counts">
<lst name="facet_queries">
<int name="from:[10 TO 2000]">50820</int>
</lst>
<lst name="facet_fields">
<lst name="date">
<int name="0">61553</int>
</lst>
</lst>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
<lst name="debug">
<str name="rawquerystring">metal</str>
<str name="querystring">metal</str>
<str name="parsedquery">Body:metal</str>
<str name="parsedquery_toString">Body:metal</str>
<lst name="explain">
(...)
</lst>
<str name="QParser">LuceneQParser</str>
<lst name="timing">
<double name="time">426.0</double>
<lst name="prepare">
<double name="time">15.0</double>
<lst name="org.apache.solr
.handler.component.QueryComponent">
<double name="time">14.0</double>
</lst>
<lst name="org.apache.
solr.handler.component.FacetComponent">
<double name="time">0.0</double>
</lst>
<lst name="org.apache.solr
.handler.component.MoreLikeThisComponent">
<double name="time">0.0</double>
</lst>
<lst name="org.apache.solr
.handler.component.HighlightComponent">
<double name="time">0.0</double>
</lst>
www.it-ebooks.info
Improving Solr Performance
204
<lst name="org.apache.solr
.handler.component.StatsComponent">
<double name="time">0.0</double>
</lst>
<lst name="org.apache.solr
.handler.component.DebugComponent">
<double name="time">0.0</double>
</lst>
</lst>
<lst name="process">
<double name="time">411.0</double>
<lst name="org.apache.solr
.handler.component.QueryComponent">
<double name="time">43.0</double>
</lst>
<lst name="org.apache.solr
.handler.component.FacetComponent">
<double name="time">360.0</double>
</lst>
<lst name="org.apache.solr
.handler.component.MoreLikeThisComponent">
<double name="time">0.0</double>
</lst>
<lst name="org.apache.solr
.handler.component.HighlightComponent">
<double name="time">0.0</double>
</lst>
<lst name="org.apache.solr
.handler.component.StatsComponent">
<double name="time">0.0</double>
</lst>
<lst name="org.apache.solr
.handler.component.DebugComponent">
<double name="time">8.0</double>
</lst>
</lst>
</lst>
</lst>
</response>
As you can see in the preceding response, there is some information about query time.
So let's see what it means.
www.it-ebooks.info
Chapter 6
205
How it works...
Let's not concentrate on the query, because it is only an example that allows us to discuss
what we want to achieve. We've added a single parameter to the query – debugQuery=true.
This parameter turns on the debug mode in Solr, as you can see in the response.
The debug mode is divided into few categories. All these categories are nested inside the
<lst name="debug"> XML tag. The first few entries let you see how the query parser
parses your query and how it is passed to Lucene, but it's beyond the scope of this chapter
to explain this. Similar information is nested inside the <lst name="explain"> XML tag;
we will talk about it in Chapter 9, Dealing with Problems.
What we are interested in is the information nested inside the <lst name="timing">
XML tag. The first information you see under this tag is the total time of your query, which
in our case is 426 milliseconds (<double name="time">426.0</double>). We have
the following two lists:
ff <lst name="prepare"> holds information regarding the query preparation time
ff <lst name="process"> holds information regarding the query execution time
You can see that nested inside those lists are components and their time.
The prepare list tells us how much time each component spends during the query
preparation phase. For example, we can see that org.apache.solr.handler.
component.QueryComponent spent 14.0 milliseconds during preparation time.
The process list tells us how much time was spent during the query processing phase,
which is the phase that is usually the longest one, because of all the computation and
I/O operations needed to execute the query. You can see that in our case, there were three
components that were working for longer than 0 milliseconds. The last one (org.apache.
solr.handler.component.DebugComponent) is the component that we added with
the query parameter, and we can skip it as it won't be used during production queries.
The second component, which was running for 43 milliseconds, was org.apache.solr.
handler.component.QueryComponent, which is responsible for parsing the query
and running it. It still takes about 10 percent time of the whole query, which is not what
we are looking for. The component that took the most amount of the query execution time
is org.apache.solr.handler.component.FacetComponent; it was working for
360 milliseconds, so for almost 90 percent of the query execution time.
As you can see, with the use of the debugQuery parameter, we identified which part of the
query is problematic and we can start optimizing it; But it's beyond the scope of this recipe.
www.it-ebooks.info
Improving Solr Performance
206
Avoiding filter caching
Imagine that some of the filters you use in your queries are not good candidates for caching.
You may wonder why, for example, those filters have a date and time with seconds or are
spatial filters scattered all over the world. Such filters are quite unique and when added to
the cache, their entries can't be reused much. Thus they are more or less useless. Caching
such filters is a waste of memory and CPU cycles. Is there something you can do to avoid filter
queries caching? Yes, there is a way and this recipe will show you how to do it.
How to do it...
Let's assume we have the following query being used to get the information we need:
q=solr+cookbook&fq=category:books&fq=date:2012-06-12T13:22:12Z
The filter query we don't want to cache is the one filtering our documents on the basis of the
date field. Of course, we still want the filtering to be done. In order to turn off caching, we
need to add {!cache=false} to our filter with the date field, so that our query should look
similar to the following code snippet:
q=solr+cookbook&fq=category:books&fq={!cache=false}date:2012-06-
12T13:22:12Z
Now let's take a look at how this works.
How it works...
The first query is very simple; we just search for the words solr cookbook and we want the
result set to be narrowed in the books category. We also want to narrow the results further to
only those that have 2012-06-12T13:22:12Z in the date field.
As you can imagine, if we have many filters with such dates as the one in the query, the
filter cache can be filled very fast. In addition to this, if you don't reuse the same value for
that field, the entry in the field cache becomes pretty useless. That's why, by adding the
{!cache=false} part to the filter query, we tell Solr that we don't want the filter query
results to be put into the filter cache. With such an approach we won't pollute the filter cache
and thus save some CPU cycles and memory. There is one more thing – the filters that are
not cached will be executed in parallel with the query, so this may be an improvement to your
query execution time.
www.it-ebooks.info
Chapter 6
207
Controlling the order of execution of filter
queries
If you use filter queries extensively, which isn't a bad thing at all, you may be wondering if
there is something you can do to improve the execution time of some of your filter queries.
For example, if you have some filter queries that use heavy function queries, you may want
to have them executed only on the documents that passed all the other filters. Let's see how
we can do this.
Getting ready
Before continuing reading please read the Avoiding filter caching recipe in this chapter.
How to do it...
The following steps will explain how we can control the order of execution of filter queries:
1. Let's assume we have the following query being used to get the information we need:
q=solr+cookbook&fq=category:books&fq={!frange l=10 u=100}log(sum(s
qrt(popularity),100))&fq={!frange l=0 u=10}if(exists(price_a),sum(
0,price_a),sum(0,price))
2. For the purpose of this recipe, let's also assume that fq={!frange l=10 u=100}
log(sum(sqrt(popularity),100)) and fq={!frange l=0 u=10}if(exis
ts(price_a),sum(0,price_a),sum(0,price)) are the filter queries that are
heavy and we would like those filters to be executed as the previous ones. We would
also like the second filter to execute only on the documents that were narrowed by
other filters. In order to do this, we need to modify our query so that it looks similar to
the following code snippet:
q=solr+cookbook&fq=category:books&fq={!frange l=10 u=100
cache=false cost=50}log(sum(sqrt(popularity),100))&fq={!frange l=0
u=10 cache=false cost=150}if(exists(price_promotion),sum(0,price_
promotion),sum(0,price))
As you can see, we've added other two attributes: cache=false and cost having values as
50 and 150. Let's see what they mean.
www.it-ebooks.info
Improving Solr Performance
208
How it works...
As you can see, we search for the words solr cookbook in the first query and we want the
result set to be narrowed by book category. We also want the documents to be narrowed to
only those that have a value of the log(sum(sqrt(popularity),100)) function between
10 and 100. In addition to this, the last filter query specifies that we want our documents to
be filtered to only those that have a price_promotion field (price if price_promotion
isn't filled) value between 0 and 10.
Our requirements are such that the second filter query (the one with log function query)
should be executed after the fq=category:books filter query and the last filter should
be executed in the end, only on the documents narrowed by other filters. To do this, we set
those two filters to not cache and we introduced the cost parameter. The cost parameter
in filter queries specifies the order in which non-cached filter queries are executed; the higher
the cost value, the later the filter query will be executed. So our second filter (the one with
cost=50) should be executed after the fq=category:books filter query and the last filter
query (the one with cost=150) are executed. In addition to this, because the cost of the
second non-cached filter query is higher or equal to 100, this filter will be executed only on
the documents that matched the main query and all the other filters. So our requirements
have been completed.
Forgive me, but I have to say it once again—please remember that the cost attribute only
works when the filter query is not cached.
Improving the performance of numerical
range queries
Let's assume we have the Apache Solr 4.0 deployment where we use range queries. Some
of those are run against string fields, while others are run against numerical fields. Using
different techniques, we identified that our numerical range queries execute slower than we
would like. The usual question arises – is there something that we can do ? Of course, and
this recipe will show you what.
How to do it...
The following steps will explain how we can control the order of execution of numerical
range queries:
1. Let's begin with the definition of a field that we use to run our numerical
range queries:
<field name="price" type="float" indexed="true" stored="true"/>
www.it-ebooks.info
Chapter 6
209
2. The second step is to define the float field type:
<fieldType name="float" class="solr.TrieFloatField"
precisionStep="8" positionIncrementGap="0"/>
3. Now the usual query that is run against the preceding field is as follows:
q=*:*&fq=price:[10.0+TO+59.00]&facet=true&facet.field=price
4. In order to have your numerical range queries performance improved, there is just a
single thing you need to do – decrease the precisionStep attribute of the float
field type; for example, from 8 to 4. So, our field type definition would look similar to
the following code snippet:
<fieldType name="float" class="solr.TrieFloatField"
precisionStep="4" positionIncrementGap="0"/>
After the preceding change, you will have to re-index your data and your numerical
queries should be run faster. How faster, depends on your setup. Now let's take a
look at how it works.
How it works...
As you can see, in the preceding examples, we used a simple float-based field to run
numerical range queries. Before the changes, we specified precisionStep on our field type
as 8. This attribute (specified in bits) tells Lucene (which Solr is built on top of) how many
tokens should be indexed for a single value in such a field. Smaller precisionStep values
(when precisionStep > 0) will lead to more tokens being generated by a single value and
thus make range queries faster. Because of this, when we decreased the precisionStep
value from 8 to 4, we saw a performance increase.
However, please remember that decreasing the precisionStep value will lead to slightly
larger indices. Also, setting the precisionStep value to 0 turns off indexing of multiple
tokens per value, so don't use that value if you want your range queries to perform faster.
www.it-ebooks.info
www.it-ebooks.info
7
In the Cloud
In this chapter we will cover:
ff Creating a new SolrCloud cluster
ff Setting up two collections inside a single cluster
ff Managing your SolrCloud cluster
ff Understanding the SolrCloud cluster administration GUI
ff Distributed indexing and searching
ff Increasing the number of replicas on an already live cluster
ff Stopping automatic document distribution among shards
Introduction
As you know, Apache Solr 4.0 introduced the new SolrCloud feature that allows us to use
distributed indexing and searching on a full scale. We can have automatic index distribution
across multiple machines, without having to think about doing it in our application. In this
chapter, we'll learn how to manage our SolrCloud instances, how to increase the number
of replicas, and have multiple collections inside the same cluster.
Creating a new SolrCloud cluster
Imagine a situation where one day you have to set up a distributed cluster with the use of Solr.
The amount of data is just too much for a single server to handle. Of course, only you can set
up a second server or go for another master database with another set of data. But before
Solr 4.0, you would have to take care of the data distribution yourself. In addition to this, you
would also have to take care of setting up replication, thinking about data duplication, and so
on. You don't have to do this now because Solr 4.0 can do it for you. Let's see how.
www.it-ebooks.info
In the Cloud
212
Getting ready
Before continuing, I advise you to read the Installing standalone ZooKeeper recipe in Chapter
1, Apache Solr Configuration. This recipe shows how to set up a ZooKeeper cluster ready for
production use. However, if you already have ZooKeeper running, you can skip that recipe.
How to do it...
Let's assume we want to create a cluster that will have four Solr servers. We would also like
to have our data divided between four Solr servers in such a way that we would have the
original data sharded to two machines. In addition to this we would also have a copy of each
shard available, in case something happens with one of the Solr instances. I also assume that
we already have our ZooKeeper cluster setup, ready, and available at the 192.168.0.10
address on port 9983.
1. Let's start with populating our cluster configuration into the ZooKeeper cluster. In
order to do this, you need to run the following command:
java -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.
configName=twoShardsTwoReplicasConf -DnumShards=2
-DzkHost=192.168.0.10:9983 -jar start.jar
2. Now that we have our configuration populated, let's start the second node with the
following command:
java -DzkHost=192.168.0.10:9983 -jar start.jar
3. We now have our two shards created and want to create replicas. This is very simple
since we have already created the configuration. We just need to start two additional
servers with the following command run on each of them:
java -DzkHost=192.168.0.10:9983 -jar start.jar
If you look at the cloud configuration of the Solr administration panel, you will see that you
have a cluster that has four nodes, where the first two nodes act as leaders for the shards
and the other two nodes act as their replicas. You can start indexing your data to one of the
servers now, and Solr will take care of data distribution and will also automatically copy the
data to the replicas. Let's see how this works.
www.it-ebooks.info
Chapter 7
213
How it works...
What we need to do first is send all the configuration files to ZooKeeper in order for the Solr
servers to be able to fetch it from there. That's why, when running the first server (only during
the first start of it), we add the -Dboostrap_confdir and -Dcollection.configName
parameters. The first parameter specifies the location of the directory with the configuration
files that we would like to put into ZooKeeper. The second parameter specifies the name of
your configuration. During the first start, we also need to specify the number of shards that
should be available in our cluster, and in this example we set it to 2 (the -DnumShards
parameter). The -DzkHost parameter is used to tell Solr about the location and the port
used by the Zookeeper cluster.
As you can see, all the other commands are similar to the ones you used while running the
Solr instances. The only difference is that we specify one additional parameter, -DzkHost,
which tells Solr where to look for the ZooKeeper server on the cluster.
When setting up the SolrCloud cluster, please remember to choose the number of shards
wisely, because you can't change that for your existing cluster, at least not right now. You can
add replicas to an already created cluster, but the number of shards will remain constant.
There's more...
There is one more thing that I would like to mention – the possibility of running a ZooKeeper
server embedded into Apache Solr 4.0.
Starting the embedded ZooKeeper server
You can also start an embedded ZooKeeper server shipped with Solr for your test
environment. In order to do this, you should pass the -DzkRun parameter instead
of -DzkHost=192.168.0.10:9983, but only in the command that sends our
configuration to the ZooKeeper cluster. So the final command should look similar
to the following code snippet:
java -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName
=twoShardsTwoReplicasConf -DzkHost=192.168.0.10:9983 -DnumShards=2 -jar
start.jar
www.it-ebooks.info
In the Cloud
214
Setting up two collections inside a single
cluster
Imagine that you would like to have more than a single collection inside the same Apache
Solr 4.0 cluster. For example, you would like to store books in one collection and users in
the second one. SolrCloud allows that, and this recipe will show you how to do it.
Getting ready
Before continuing, I advise you to read the Installing standalone ZooKeeper recipe in Chapter
1, Apache Solr Configuration, because this recipe assumes that we already have ZooKeeper up
and running. We assume that ZooKeeper is running on localhost and is listening on port 2181.
How to do it...
1. Since we want to start a new SolrCloud cluster that doesn't have any collections
defined, we should start with the solr.xml file. On both instances of Solr, the
solr.xml file should look similar to the following code snippet:
<?xml version="1.0" encoding="UTF-8" ?>
<solr persistent="true">
<cores adminPath="/admin/cores"
defaultCoreName="collection1" host="${host:}"
hostPort="${jetty.port:}"
hostContext="${hostContext:}"
zkClientTimeout="${zkClientTimeout:15000}">
</cores>
</solr>
2. Let's assume that we have two SolrCloud instances that form a cluster, both running
on the same physical server, one on port 8983 and the second one on 9983. They
are started with the following commands:
java -Djetty.port=8983 -DzkHost=localhost:2181 -jar start.jar
java -Djetty.port=9983 -DzkHost=localhost:2181 -jar start.jar
3. Now, we need to add the configuration files, which we want to create collections with,
to ZooKeeper. Let's assume that we have all the configuration files stored in /usr/
share/config/books/conf for the books collection, and the configuration files for
the users collection stored in /usr/share/config/users/conf. To send these files
to ZooKeeper, we should run the following commands from our $SOLR_HOME directory:
cloud-scripts/zkcli.sh -cmdupconfig -zkhost localhost:2181
-confdir /usr/share/config/books/conf -confnamebookscollection
www.it-ebooks.info
Chapter 7
215
And:
cloud-scripts/zkcli.sh -cmdupconfig -zkhost localhost:2181
-confdir /usr/share/config/users/conf -confnameuserscollection
4. We have pushed our configurations into the ZooKeeper, so we can now create the
collections we want. In order to do this, we use the following commands:
curl 'http://localhost:8983/solr/admin/collections?action=CREATE&n
ame=bookscollection&numShards=
2&replicationFactor=0'
And:
curl 'http://localhost:8983/solr/admin/collections?action=CREATE&n
ame=userscollection&numShards=
2&replicationFactor=0'
5. Now, just to test if everything went well, we will query the newly created collections
as follows:
curl 'http://localhost:8983/solr/bookscollection/select?q=*:*'
The response to the preceding command will be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">39</int>
<lst name="params">
<str name="q">*:*</str>
</lst>
</lst>
<result name="response" numFound="0" start="0"
maxScore="0.0">
</result>
</response>
As you can see, Solr responded correctly. But as we don't have any data indexed,
we got 0 documents.
How it works...
As you can see, our solr.xml file on both the instances is the same and it doesn't contain
any information about the cores. This is done on purpose, since we want to have a clean
cluster – one without any collections present.
www.it-ebooks.info
In the Cloud
216
The mentioned configuration directories should store all the files (solrconfig.xml,
schema.xml, and stopwords.txt) that are needed for your Solr instance to work, if you
use one. Please remember this before sending them to ZooKeeper or else Solr will fetch
those files from ZooKeeper and create collections using them.
Now, let's look at the most interesting aspect – the scripts used to upload the configuration
files to ZooKeeper. We used the zkcli.sh script provided with the standard Solr 4.0
distribution and placedit in the cloud-scripts directory by default. The first thing is the cmd
parameter, which specifies what we want to do – in this case upconfig means that we want
to upload the configuration files. The zkhost parameter allows us to specify the host and port
of the ZooKeeper instance we want to put the configuration to. confdir is one of the most
crucial parameters and it specifies the directory in which the Solr configuration files are stored
– the ones that should be sent to ZooKeeper (in our case, /usr/share/config/users/
conf and /usr/share/config/books/conf). Finally the last parameter, confname,
specifies the name of the collection we will use the configuration with.
The command in the fourth step lets us create the actual collection in the cluster. In order to do
this, we send a request to the /admin/collections handler, which uses the newly introduced
collections API. We tell Solr that we want to create a new collection (the action=CREATE
parameter) with the name of bookscollection (name=bookscollection). Please note that
the name specified in the name parameter is the same as the confname parameter value used
during configuration files upload. The last two parameters specify the number of shards and
replicas that the collection should be created with. The number of shards is the initial number of
cores that will be used to hold the data in the collection (numShards). The number of replicas
(replicationFactor) is the exact number of copies of the shards that can be distributed
among many servers, and may increase query throughput and reliability.
Managing your SolrCloud cluster
In addition to creating a new collection with the API exposed by SolrCloud, we are also allowed
to use two additional operations. The first is to delete our collection and the second one is
to reload the whole collection. Along with the ability to create new collections, we are able
to dynamically manage our cluster. This recipe will show you how to use the delete and
reload operations and where they can be useful.
www.it-ebooks.info
Chapter 7
217
Getting ready
The content of this recipe is based on the Setting up two collections inside a single cluster
recipe in this chapter. Please read it before continuing.
How to do it...
I assume that we already have two collection deployed on our cluster –bookscollection
and userscollection – the same ones that we configured in the Setting up two
collections inside a single cluster recipe in this chapter. So our cluster view looks
similar to the following screenshot:
1. First, let's delete one of the collections – userscollection. To do this, we send the
following command:
curl 'http://localhost:8983/solr/admin/collections?action=DELETE&n
ame=userscollection'
www.it-ebooks.info
In the Cloud
218
2. Now, let's look at our cluster view once again:
As you can see, the userscollection collection was deleted.
3. Now, let's see how the reloading of collections works. In order to test it, let's
update the spellings.txt file located at /usr/share/config/books/conf
directory. The original file looks similar to the following code snippet:
pizza
history
After the update, it will look similar to the following code snippet:
after
update
4. Now, we need to update the collection configuration in ZooKeeper. To do this we
use the following command, which is run from our Solr instance's home directory:
cloud-scripts/zkcli.sh -cmdupconfig -zkhost localhost:2181
-confdir /usr/share/config/books/conf -confnamebookscollection
5. Now that we have the updated version of our configuration files to
bookscollection in ZooKeeper, we can send the reload command to Solr:
curl 'http://localhost:8983/solr/admin/collections?action=RELOAD&n
ame=bookscollection'
www.it-ebooks.info
Chapter 7
219
6. First, let's check if the Solr administration panel sees the changes in ZooKeeper.
To do this, we'll use the tree view of the cloud section and navigate to /configs/
bookscollection/spellings.txt. We should be able to see something similar
to the following screenshot:
7. In the final check, let's see if Solr itself sees the update. In order to do this we run the
following command:
curl 'http://localhost:8983/solr/bookscollection/admin/
file?file=spellings.txt'
The response of the preceding command would be as follows:
after
update
So it seems like everything is working as it should. Now let's see how it works.
How it works...
We begin with a cluster that contains two collections. But we want to delete one of them and
update the second one. In order to do this we use the collections API provided by Solr 4.0.
www.it-ebooks.info
In the Cloud
220
We start by sending the delete action (action=DELETE) to the /solr/admin/
collections URL, which is the default address that the collections API is available at.
In addition to this, we need to provide the name of the collection we want to delete – to do
this, we use the name parameter with the name of the collection that we want to delete. After
sending the command and refreshing the Solr administration panel, we see that the second
collection was deleted just as we wanted.
Now, let's discuss the process of updating the second collection. First of all, we've changed
the contents of the spellings.txt file in order to see how it works. However, be careful
when updating collections, because some changes may force you to re-index your data; but
let's get back to our update. So after we update the file, we use one of the scripts provided
with Solr 4.0 in order to upload all the configuration files that belong to this collection into the
ZooKeeper ensemble (if you are not familiar with that command, please see the Setting up
two collections inside a single cluster recipe, later in this chapter). Now, we needed to tell Solr
to reload our collection by sending the reload command (action=RELOAD) to the same
URL as the delete command. Of course, just like with the delete command, we needed to
provide the name of the collection we want to reload using the name parameter.
As you can see, on the previous screenshot, the collection was updated at least in the
ZooKeeper ensemble. However, we want to be sure that Solr sees those changes, so we use
the /admin/file handler to get the contents of the spellings.txt file. In order to do this,
we pass the file=spellings.txt parameter to that handler. As you can see, Solr returned
the changed contents, so the collection was updated and reloaded successfully.
Understanding the SolrCloud cluster
administration GUI
With the release of Solr 4.0, we've got the ability to use a fully-distributed Solr cluster
with fully-distributed indexing and searching. Along with this comes the reworked Solr
administration panel with parts concentrated on Cloud functionalities. This recipe will
show you how to use this part of the administration panel; for example, how to see your
cluster distribution and detailed information about shards and replicas.
Getting ready
This recipe assumes that the SolrCloud cluster is up and running. If you are not familiar with
setting up the SolrCloud cluster, please refer to the Creating a new SolrCloud cluster recipe
in this chapter.
www.it-ebooks.info
Chapter 7
221
How to do it...
1. First of all, let's see how we can check how our cluster distribution looks. In order
to do this, let's open our web browser to http://localhost:8983/solr/ (or
the address of the host and port of any of the Solr instances that form the cluster)
and open the Cloud graph view. We should be able to see something similar to the
following screenshot:
2. There is also a second view of the same information that can be accessed by viewing
the Graph (Radial) section, and it should look similar to the following screenshot:
www.it-ebooks.info
In the Cloud
222
3. Looks nice, doesn't it? However, there is some additional information that can be
retrieved. So now, let's look at the Tree section of the Cloud administration panel:
As you can see, there is some very detailed information available. So now, let's look at what
it means.
How it works...
First of all, remember that the best way to get used to the new administration panel is to just
run a simple SolrCloud cluster by yourself and play with it. However, let's look at the provided
examples to see what information we have there.
As you can see, in the first two screenshots provided, our cluster consists of a single collection
named collection1. It consists of two shards (shard1 and shard2) and each shard
lives on a single node. One of each shards is the primary one (the ones at gr0-vaio:8983
and gr0-vaio:7983), and each of them has a replica (the ones at gr0-vaio:6983 and
gr0-vaio:5983). Both diagrams shown in the screenshots provide the same amount of
information and they only differ in the way they present the data.
www.it-ebooks.info
Chapter 7
223
Now, let's look and discuss the last screenshot – the Tree view of the Cloud section of the
Solr administration panel. As you can see, there is much more information available there.
The tree presented in the administration panel is what your ZooKeeper ensemble sees.
The first thing is clusterstate.json, which holds detailed information about the current
state of the cluster.
Next, you can see the collections section, which holds information about each collection
deployed in the cluster – you can see the information about each shard and its replicas, such
as leaders, and some detailed information needed by the Solr and ZooKeeper.
In addition to the preceding information, you can also see the configuration files
(the /configs section) that were sent to the ZooKeeper and are used as the
configuration files for your collection or collections.
Not visible in the screenshot is the additional information connected to ZooKeeper,
which is not needed during the usual work with Solr, so I decided to omit discussing it.
Distributed indexing and searching
Having a distributed SolrCloud cluster is very useful; you can have multiple shards and replicas,
which are automatically handled by Solr itself. This means that your data will be automatically
distributed among shards and replicated between replicas. However, if you have your data
spread among multiple shards, you probably want them to be queried while you send the
query. With earlier versions of Solr before 4.0, you had to manually specify the list of shards
that should be queried. Now you don't need to do that, and this recipe will show you how to
make your queries distributed.
Getting ready
If you are not familiar with setting up the SolrCloud cluster, please refer to the Creating a new
SolrCloud cluster recipe in this chapter. If you are not familiar with how to modify the returned
documents using the fl parameter, please read the Modifying returned documents recipe in
Chapter 4, Querying Solr.
www.it-ebooks.info
In the Cloud
224
How to do it...
1. First of all, let's assume we have a cluster that consist of three nodes and we have
a single collection deployed on that cluster; a collection with three shards. For the
purpose of this recipe, I'm using the example configuration files provided with Solr
and the example documents stored in the XML files in the exampledocs directory
of the Solr distribution package. If we look at the Solr administration panel, this is
what the Cloud graph will show:
2. Now, the best thing about distributed indexing and searching—if you are using Solr
4.0 and its distributed searching and indexing capabilities—is that you don't need to
do anything in addition to sending the proper indexing and searching requests to one
of the shards. So, in order to have the example files indexed, I've run the following
command from the exampledocs directory of the Solr instance running on port 8983:
java -jar post.jar *.xml
3. Now, let's use the non-distributed queries to check if the documents were sent to all
the shards. In order to do this, we run three queries. The first query is run to the Solr
instance holding the first shard:
curl 'http://localhost:8983/solr/select?q=*:*&rows=0&distrib=false'
Its response will be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
www.it-ebooks.info
Chapter 7
225
<str name="distrib">false</str>
<str name="q">*:*</str>
<str name="rows">0</str>
</lst>
</lst>
<result name="response" numFound="8" start="0">
</result>
</response>
4. The second query is run to the Solr instance holding the second shard:
curl 'http://localhost:7983/solr/select?q=*:*&rows=0&distrib=false'
Its response will be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
<str name="distrib">false</str>
<str name="q">*:*</str>
<str name="rows">0</str>
</lst>
</lst>
<result name="response" numFound="10" start="0">
</result>
</response>
5. The third query is run to the Solr instance holding the last shard:
curl 'http://localhost:6983/solr/select?q=*:*&rows=0&distrib=false'
Its response will be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
<str name="distrib">false</str>
<str name="q">*:*</str>
<str name="rows">0</str>
</lst>
</lst>
<result name="response" numFound="14" start="0">
</result>
</response>
www.it-ebooks.info
In the Cloud
226
6. Everything seems to be in the perfect order now, at least by judging the number of
documents. So now, let's run the default distributed query to see if all the shards
were queried. In order to do this we run the following query:
curl 'http://localhost:8983/solr/select?q=*:*&fl=id,[shard]&ro
ws=50'
Since the response was quite big, I decided to cut it a bit and show only a single
document from each shard:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">58</int>
<lst name="params">
<str name="fl">id,[shard]</str>
<str name="q">*:*</str>
<str name="rows">50</str>
</lst>
</lst>
<result name="response" numFound="32" start="0"
maxScore="1.0">
<doc>
<str name="id">SP2514N</str>
<str name="[shard]">gr0-vaio:6983/solr/collection1/
</str>
</doc>
...
<doc>
<str name="id">GB18030TEST</str>
<str name="[shard]">gr0-vaio:7983/solr/collection1/
</str>
</doc>
...
<doc>
<str name="id">IW-02</str>
<str name="[shard]">gr0-vaio:8983/solr/collection1/
</str>
</doc>
...
</result>
</response>
As you can see, we got documents from each shard that builds our cluster, so it works as
intended. Now, let's look at exactly how it works.
www.it-ebooks.info
Chapter 7
227
How it works...
As you can see, as shown in the previous screenshot, our test cluster created for the purpose
of this recipe contains thee Solr instances, where each of them contains a single shard of the
collection deployed on the cluster. This means that the data indexed to any of the shards will
be automatically divided and distributed among the shards. In order to choose which shard
the document should go to, Solr uses a hash value of the identifier of the document.
During indexing, we sent the documents to the Solr instance that is working on port
8983. However, as our example queries show, when querying only a particular shard (the
distrib=false parameter), each of them hosts different amount of documents, which
is expected. If we had many more documents, the amount of documents on each shard
would be probably almost the same if not equal. As you must have guessed by now, the
distrib=false parameter forces the query to be run on the Solr server that it was sent
to in a non-distributed manner, and we want such behavior to see how many documents
are hosted on each of the shards.
Let's now focus on the query that was used to fetch all the documents in the cluster. It's a
query that you are probably used to – fetching all the documents (q=*:*) and returning a
maximum of 50 documents (rows=50). In addition, we specify the fl parameter in such a
way that the returned document contains the id field and the information about the shard
the document was fetched from (fl=id,[shard]). As you can see, we got documents
coming from all the shards that build the collection in the response. This is because when
using the SolrCloud deployment, Solr automatically queries all the relevant shards that are
needed to be queried in order to query the whole collection. The information about shards
(and replicas, if they exist) is fetched from ZooKeeper, so we don't need to specify it.
Increasing the number of replicas on an
already live cluster
If you used Solr before the release of the 4.0 version, you are probably familiar with replication.
The way deployments usually worked is that there was a single master server and multiple slave
servers that were pulling the index from the master server. In Solr 4.0, we don't have to worry
about replication and pulling interval – it's done automatically. We can also set up our instances
in a way to achieve a similar setup as that of multiple replicas of a single shard where data is
stored. This recipe will show you how to do it.
www.it-ebooks.info
In the Cloud
228
Getting ready
If you are not familiar with setting up a SolrCloud cluster, please refer to the Creating a new
SolrCloud cluster recipe in this chapter.
How to do it...
For the purpose of this recipe, I'll assume that we want to have a cluster with a single shard
running just like the usual Solr deployment, and we want to add two additional replicas to that
shard. So, we have more servers to handle the queries.
1. The first step is starting a new Solr 4.0 server. We will use the configuration provided
with the example Solr server, but you can use your own if you want. We will also use
the ZooKeeper server embedded into Solr, but again, you can use the standalone one.
So finally, the command that we use for starting the first instance of Solr is as follows:
java -Dbootstrap_confdir=solr/collection1/conf -Dcollection.
configName=collection1 -DzkRun -DnumShards=1 -jar start.jar
2. Now, let's take a look at the Solr administration panel to see how our cluster
state looks:
As you can see, we have a single shard in our collection that has a single replica. This
can be a bit misleading, because the single replica is actually the initial shard we've
created. So we actually have a single shard and zero copies of it. As we said earlier,
we want to change that in order to have two additional replicas of our shard. In order
to do this, we need to run two additional Solr instances. I'll run them on the same
machine as the first one on ports 7893 and 6893. But in a real life situation, you'd
probably want to have them on different servers.
www.it-ebooks.info
Chapter 7
229
3. In order to run these two additional Solr servers, we use the following commands:
java -Djetty.port=7983 -DzkHost=localhost:9983 -jar start.jar
java -Djetty.port=6983 -DzkHost=localhost:9983 -jar start.jar
4. Now, let's see how our cluster state changes, by looking at the cluster state in
the Solr administration panel again. The cluster state information looks similar
to the following screenshot after we start the two additional instances of Solr:
As you see, we still have our initial shard. But right now, we also have two additional replicas
present that will be automatically updated and will hold the same data as the primary shard
that we created in the beginning.
www.it-ebooks.info
In the Cloud
230
How it works...
We start our single shard instance with the command that allows us to run the embedded
ZooKeeper server along with Solr. The embedded ZooKeeper server is started at the port
whose number is the Solr port + 1000, which in our case if 9983. bootstrap_confdir
specifies the directory where the Solr configuration files are stored, which will be sent to the
ZooKeeper. collection.configName specifies the name of the collection, numShards
specifies the amount of shards the collection should have, and zkRun tells Solr that we want
the embedded ZooKeeper to be run. Of course, this was only used as an example, and in a
production environment you should set up a standalone ZooKeeper server.
As shown in the previous screenshot, you can see that our collection consists of a single
shard and the only replica we have is this shard. So, we have a single primary shard with
no data replication at all. In order to create two replicas that will be automatically populated
with exactly the same data as the primary shard, we just need to start the two additional Solr
servers. For the purpose of the recipe, we started these new instances on the same machine,
but usually in a production environment you would set them up on separate machines.
As you can see in the second screenshot, after adding these two new Solr instances, our
cluster is composed of a primary shard and two replicas, which will have their contents
updated automatically. So we've got what we wanted.
Stopping automatic document distribution
among shards
In most cases, the standard distribution of documents between your SolrCloud instances
will be enough, and what's more, it will be the right way to go. However, there are situations
where controlling the documents distribution outside of Solr (that is, in your application) may
be better. For example, imagine that you'll only allow your users to search in the data they
indexed. In such situations, it would be good to have documents for a single client stored in a
single shard (if that's possible). In such cases, automatic documents distribution based on the
documents identifier may not be the best way. Solr allows us to turn off automatic document
distribution and this recipe will show you how to do that.
Getting ready
If you are not familiar with setting up the SolrCloud cluster, please refer to the Creating a new
SolrCloud cluster recipe in this chapter. If you are not familiar with how to modify the returned
documents using the fl parameter, please read the Modifying the returned documents recipe
in Chapter 4, Querying Solr.
www.it-ebooks.info
Chapter 7
231
How to do it...
1. Let's assume that we have the following index structure (schema.xml) defined,
and that we already have it stored in ZooKeeper:
<fields>
<field name="id" type="string" indexed="true"
stored="true" required="true" />
<field name="userName" type="string" indexed="true"
stored="true" />
<field name="data" type="text" indexed="true"
stored="true" />
<field name="_version_" type="long" indexed="true"
stored="true"/>
</fields>
2. We have two files that contain user data. One is called data1.xml, and it holds the
data for user1 and looks similar to the following code snippet:
<add>
<doc>
<field name="id">1</field>
<field name="userName">user1</field>
<field name="data">Data of user1</field>
</doc>
</add>
The second one is called data2.xml, and it holds the data for user2:
<add>
<doc>
<field name="id">2</field>
<field name="userName">user2</field>
<field name="data">Data of user2</field>
</doc>
<doc>
<field name="id">3</field>
<field name="userName">user2</field>
<field name="data">Another data of user2</field>
</doc>
</add>
3. In order to be able to stop the automatic document distribution between shards,
we need the following update request processor chain to be defined in the
solrconfig.xml file:
<updateRequestProcessorChain>
<processor class="solr.LogUpdateProcessorFactory" />
www.it-ebooks.info
In the Cloud
232
<processor class="solr.RunUpdateProcessorFactory" />
<processor class="
solr.NoOpDistributingUpdateProcessorFactory" />
</updateRequestProcessorChain>
4. I assume that we already have a cluster containing at least two nodes up and
running, these nodes use the preceding configuration files, and that our collection
name is collection1. One of the nodes is running on a server with the IP address
as 192.168.1.1 and the second one is running on a server with the IP address as
192.168.1.2.
5. As we discussed earlier, we want to manually distribute the data to Solr instances.
In our case, we would like the data from the data1.xml file to be indexed on the Solr
server running at 192.168.1.1, and the data from data2.xml to be indexed on the
Solr instance running on 192.168.1.2. So, we use the following commands to index
the data:
java -Durl=http://192.168.1.1:8983/solr/collection1/update -jar
post.jar data1.xml
java -Durl=http://192.168.1.2:8983/solr/collection1/update -jar
post.jar data2.xml
6. Now, let's test if it works. In order to do this, we will use the Solr functionality that
enables us to see which shard the document is stored at. In our case, it will be the
following query:
curl http://localhost:7983/solr/select?q=*:*&fl=*,[shard]
The response will be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">24</int>
<lst name="params">
<str name="q">*:*</str>
<str name="fl">*,[shard]</str>
</lst>
</lst>
<result name="response" numFound="3" start="0"
maxScore="1.0">
<doc>
<str name="id">2</str>
www.it-ebooks.info
Chapter 7
233
<str name="userName">user2</str>
<str name="data">Data of user2</str>
<str name="[shard]">
192.168.1.2:8983/solr/collection1/
</str>
</doc>
<doc>
<str name="id">3</str>
<str name="userName">user2</str>
<str name="data">Another data of user2</str>
<str name="[shard]">
192.168.1.2:8983/solr/collection1/
</str>
</doc>
<doc>
<str name="id">1</str>
<str name="userName">user1</str>
<str name="data">Data of user1</str>
<str name="[shard]">
192.168.1.1:8983/solr/collection1/
</str>
</doc>
</result>
</response>
It seems that we have achieved what we wanted, so let's see how it works.
How it works...
Our schema.xml file is very simple. It contains three fields that are used by our data
files at the _version_ field used internally by Solr. The actual data is nothing new
as well, so I'll skip discussing it.
The thing we want to look at is the update request processor chain definition.
As you can see, apart from the standard solr.LogUpdateProcessorFactory
and solr.RunUpdateProcessorFactory processors, it contains a solr.
NoOpDistributingUpdateProcessorFactory processor. You can think
of this additional processor as the one that forces the update command to
be indexed on the node it was sent to.
www.it-ebooks.info
In the Cloud
234
We used the standard post.jar library distributed with Solr in order to index the data. In
order to specify which server the data should be sent to, we use the –Durl parameter. We
use two available servers to send the data to – the one running at 192.168.1.1 that should
contain one document after indexing, and the one running at 192.168.1.2 that should
contain two documents. In order to check this, we use a query that returns all the documents
(q=*:*). In addition, we specify the fl parameter in such a way that the returned document
contains not only all the stored fields, but also the shard the document was fetched from
(fl=*,[shard]).
As you can see, in the results returned by Solr, the documents that belong to user2 (the ones
with id field equal to 2 and 3) were fetched from the Solr server running at 192.168.1.2
(<str name="[shard]">192.168.1.2:8983/solr/collection1/</str>), and
the one belonging to user1 came from the Solr instance running at 192.168.1.1 (<str
name="[shard]">192.168.1.1:8983/solr/collection1/</str>). So, everything
is just as we wanted it to be.
One more thing: please remember that when turning off automatic documents distribution,
you may end up with shards being uneven. This is because of the different number of
documents being stored in each of them. So, you have to carefully plan your distribution.
www.it-ebooks.info
8
Using Additional Solr
Functionalities
In this chapter we will cover:
ff Getting more documents similar to those returned in the results list
ff Highlighting matched words
ff How to highlight long text fields and get good performance
ff Sorting results by a function value
ff Searching words by how they sound
ff Ignoring defined words
ff Computing statistics for the search results
ff Checking the user's spelling mistakes
ff Using field values to group results
ff Using queries to group results
ff Using function queries to group results
Introduction
There are many features of Solr that we don't use every day. You may not encounter
highlighting words, ignoring words, or statistics computation in everyday use, but they
can come in handy in many situations. In this chapter, I'll try to show how to overcome
some typical problems that can be fixed by using some of the Solr functionalities. In
addition to that we will see how to use the Solr grouping mechanism in order to get
documents that have some fields in common.
www.it-ebooks.info
Using Additional Solr Functionalities
236
Getting more documents similar to those
returned in the results list
Imagine a situation where you want to show similar documents to those returned by Solr. Let's
imagine a situation where you have an e-commerce library shop, and you want to show users
the books similar to the ones they found while using your application. This recipe will show you
how to do that.
How to do it...
1. Let's start with the following index structure (just add this to your schema.xml file,
to the field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true"
termVectors="true" />
2. Next, let's use the following test data:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr Cookbook first edition</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Solr Cookbook second edition</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Solr by example first edition</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">My book second edition</field>
</doc>
</add>
3. Let's assume that our hypothetical user wants to find books that have cookbook and
second in their names. But, we also want to show him/her similar books. To do that
we send the following query:
http://localhost:8983/solr/select?q=cookbook+second&mm=2&qf=name&d
efType=edismax&mlt=true&mlt.fl=name&mlt.mintf=1&mlt.mindf=1
www.it-ebooks.info
Chapter 8
237
The results returned by Solr for the preceding query are as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
<lst name="params">
<str name="mm">2</str>
<str name="mlt.mindf">1</str>
<str name="mlt.fl">name</str>
<str name="q">cookbook second</str>
<str name="mlt.mintf">1</str>
<str name="qf">name</str>
<str name="mlt">true</str>
<str name="defType">edismax</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">2</str>
<str name="name">Solr Cookbook second edition</str>
<long name="_version_">1415606105364496384</long>
</doc>
</result>
<lst name="moreLikeThis">
<result name="2" numFound="3" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr Cookbook first edition</str>
<long name="_version_">1415606105279561728</long>
</doc>
<doc>
<str name="id">4</str>
<str name="name">My book second edition</str>
<long name="_version_">1415606105366593536</long>
</doc>
<doc>
<str name="id">3</str>
<str name="name">Solr by example first edition</str>
<long name="_version_">1415606105365544960</long>
</doc>
</result>
</lst>
</response>
Now let's see how it works.
www.it-ebooks.info
Using Additional Solr Functionalities
238
How it works...
As you can see the index structure and the data are really simple. One thing to note is the
termVectors attribute set to true in the name field definition. It is a good thing to have
when using the more like this component, and should be used whenever possible in
the fields on which we plan to use this component.
Now let's take a look at the query. As you can see, we added some additional parameters
besides the standard q one (and the ones such as mm and defType which specify how our
query should be handled). The parameter mlt=true says that we want to add the more
like this component to the result processing. The mlt.fl parameter specifies which
fields we want to use with the more like this component. In our case we will use the
name field. The mlt.mintf parameter asks Solr to ignore terms from the source document
(the ones from the original result list) with the term frequency below the given value. In our
case we don't want to include the terms that will have a frequency lower than 1. The last
parameter, mlt.mindf, tells Solr that words appearing less than the value of the parameter
documents should be ignored. In our case we want to consider words that appear in at least
one document.
Last is the search results. As you can see, there is an additional section (<lst
name="moreLikeThis">) that is responsible for showing us the more like this
component results. For each document in the results there is one more like this section
added to the response. In our case, Solr added a section for the document with the unique
identifier 3 (<result name="3" numFound="3" start="0">), and there were three
similar documents found. The value of the id attribute is assigned the value of the unique
identifier of the document for which the similar documents are calculated for.
Highlighting matched words
Imagine a situation where you want to show your users which words were matched in the
document shown in the results list. For example, you want to show which words in the book
name were matched and display that to the user. Do you have to store the documents and
do the matching on the application side? The answer is no. We can force Solr to do that for
us and this recipe will show you how to do that.
How to do it...
1. We begin by creating the following index structure (just add this to your schema.xml
file, to the field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
www.it-ebooks.info
Chapter 8
239
2. Our test data looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr Cookbook first edition</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Solr Cookbook second edition</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Solr by example first edition</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">My book second edition</field>
</doc>
</add>
3. Let's assume that our user is searching for the word book. To tell Solr that we want
to highlight the matches, we send the following query:
http://localhost:8983/solr/select?q=name:book&hl=true
The response from Solr should be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
<lst name="params">
<str name="hl">true</str>
<str name="q">name:book</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">4</str>
<str name="name">My book second edition</str>
</doc>
</result>
www.it-ebooks.info
Using Additional Solr Functionalities
240
<lst name="highlighting">
<lst name="4">
<arr name="name">
<str>My &lt;em&gt;book&lt;/em&gt; second edition</str>
</arr>
</lst>
</lst>
</response>
As you can see, besides the normal results list we got the highlighting results (the highlighting
results are grouped by the <lst name="highlighting"> XML tag). The word book is
surrounded by the <em> and </em> HTML tags. So everything is working as intended. Now
let's see how it works.
How it works...
As you can see the index structure and the data are really simple, so I'll skip discussing this
part of the recipe. Please note that in order to use the highlighting mechanism, your fields
should be stored and not analysed by aggressive filters (such as stemming). Otherwise the
highlighting results can be misleading to the users. Let's think of a simple example of such
behavior – imagine the user types the word bought in the search but Solr highlighted the
word buy because of the stemming algorithm.
The query is also not complicated. We can see the standard q parameter that passes the
query to Solr. But there is also one additional parameter, the hl parameter set to true.
This parameter tells Solr to include the highlighting component results to the results list.
As you can see in the results list, in addition to the standard results, there is a new section
<lst name="highlighting">, which contains the highlighting results. For every
document, in our case the only one found (<lst name="4"> means that the highlighting
result is presented for the document with the unique identifier value of 4), there is a list
of fields that contain the sample data with the matched words (or words) highlighted.
By highlighted I mean surrounded by the HTML tag, in this case the <em> tag.
You should also remember one other thing: if you are using the standard LuceneQParser
query parser then the default field used for highlighting will be the one set in the schema.
xml file. If you are using DismaxQParser then the default fields used for highlighting are
the ones specified by the qf parameter.
There's more...
There are a few things that can be useful when using the highlighting mechanism.
www.it-ebooks.info
Chapter 8
241
Specifying the fields for highlighting
In many real life situations we want to decide what fields we would want to show the
highlighting for. To do that, you must add an additional parameter – hl.fl with the list
of fields separated by the comma character. For example, if we would like to show the
highlighting for the fields name and description, our query should look as follows:
http://localhost:8983/solr/select?q=name:book&hl=true&hl.
fl=name,description
Changing the default HTML tags that surround the matched word
There are situations where you would like to change the default <em> and </em> HTML tags
to the ones of your choice. To do that you should add the hl.simple.pre and hl.simple.
post parameters. The first one specifies the prefix that will be added in front of the matched
word and the second one specifies the postfix that will be added after the matched word. For
example, if you would like to surround the matched word with the <b> and </b> HTML tags
the query would look like this:
http://localhost:8983/solr/select?q=name:book&hl=true&hl.simple.
pre=<b>&hl.simple.post=</b>
How to highlight long text fields and get
good performance
In certain situations, the standard highlighting mechanism may not be performing as well as
you would like it to be. For example, you may have long text fields and you want the highlighting
mechanism to work with them. This recipe will show you how to do that.
How to do it...
1. We begin the index structure configuration which looks as follows (just add this
to your schema.xml file, to the field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true"
termVectors="true" termPositions="true" termOffsets="true" />
2. The next step is to index the data. We will use the test data which looks like the
following code:
<add>
<doc>
<field name="id">1</field>
www.it-ebooks.info
Using Additional Solr Functionalities
242
<field name="name">Solr Cookbook first edition</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Solr Cookbook second edition</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Solr by example first edition</field>
</doc>
<doc>
<field name="id">4</field>
<field name="name">My book second edition</field>
</doc>
</add>
3. Let's assume that our user is searching for the word book. To tell Solr that we
want to highlight the matches, we send the following query:
http://localhost:8983/solr/select?q=name:book&hl=true&hl.
useFastVectorHighlighter=true
The response from Solr should be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">15</int>
<lst name="params">
<str name="hl">true</str>
<str name="q">name:book</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">4</str>
<str name="name">My book second edition</str>
</doc>
</result>
<lst name="highlighting">
<lst name="4">
<arr name="name">
<str>My &lt;em&gt;book&lt;/em&gt; second edition</str>
</arr>
</lst>
</lst>
</response>
As you can see everything is working as intended. Now let's see how.
www.it-ebooks.info
Chapter 8
243
How it works...
As you can see the index structure and the data are really simple, but there is a difference
between using the standard highlighter and the new FastVectorHighlighting feature.
To be able to use the new highlighting mechanism, you need to store the information about
term vectors, position, and offsets. This is done by adding the following attributes to the
field definition or to the type definition: termVectors="true" termPositions="true"
termOffsets="true".
Please note that in order to use the highlighting mechanism, your fields should be stored and
not analysed by aggressive filters (such as stemming). Otherwise the highlighting results can
be misleading to the users. An example of such a behavior is simple – imagine that the user
types the word bought in the search box but Solr highlighted the word buy because of the
stemming algorithm.
The query is also not complicated. We can see the standard q parameter that passes the
query to Solr. But there is also one additional parameter, the hl parameter set to true.
This parameter tells Solr to include the highlighting component results to the results list.
In addition we add the parameter to tell Solr to use the FastVectorHighlighting
feature: hl.useFastVectorHighlighter=true.
As you can see in the results list, in addition to the standard results, there is a new section
called <lst name="highlighting"> that contains the highlighting results. For every
document, in our case the only one found (<lst name="4"> means that the highlighting
result is presented for the document with the unique identifier value of 4), there is a list
of fields that contain the sample data with the matched words (or words) highlighted.
By highlighted I mean surrounded by the HTML tag, in this case the <em> tag.
Sorting results by a function value
Let's imagine that you have an application that allows the user to search through the
companies that are stored in the index. You would like to add an additional feature to your
application to sort the results on the basis of the distance of a certain geographical point.
Is this possible with Solr? Yes, and this recipe will show you how to do that.
Getting ready
The following recipe uses spatial search. If you are not familiar with geographical search in
Solr please read the Storing geographical points in the index recipe in Chapter 3, Analyzing
Your Text Data.
www.it-ebooks.info
Using Additional Solr Functionalities
244
How to do it...
1. Let's start with the following index structure (just add this to your schema.xml file,
to the field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="geo" type="location" indexed="true" stored="true" />
<dynamicField name="*_coordinate" type="tdouble" indexed="true"
stored="false" />
2. Our test data that we want to index looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Company one</field>
<field name="geo">10.1,10.1</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Company two</field>
<field name="geo">11.1,11.1</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Company three</field>
<field name="geo">12.2,12.2</field>
</doc>
</add>
3. In addition to that we also need to define the following field type in the schema.xml
file in the types section:
<fieldType name="location" class="solr.LatLonType"
subFieldSuffix="_coordinate"/>
4. Let's assume that our hypothetical user searches for the word company and the user
is in the location with the geographical point of(13, 13). So, in order to show the
results of the query and sort them by the distance from the given point, we send the
following query to Solr:
http://localhost:8983/solr/select?q=name:company&sort=geodist(geo,
13,13)+asc
The results list returned by the query is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
www.it-ebooks.info
Chapter 8
245
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
<lst name="params">
<str name="q">name:company</str>
<str name="sort">geodist(geo,13,13) asc</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">3</str>
<str name="name">Company three</str>
<str name="geo">12.2,12.2</str>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Company two</str>
<str name="geo">11.1,11.1</str>
</doc>
<doc>
<str name="id">1</str>
<str name="name">Company one</str>
<str name="geo">10.1,10.1</str>
</doc>
</result>
</response>
As you can see, everything is working as it should be. So now let's see exactly how this works.
How it works...
Let's start from the index structure. We have four fields – one for holding the unique
identifier (the id field), one for holding the name of the company (the name field), and
one field responsible for the geographical location of the company (the geo field). The
last field, the dynamic one, is needed for the location type to work. The data is pretty
simple so let's just skip discussing that.
Besides the standard q parameter responsible for the user query, you can see the sort
parameter. But the sort is a bit different from the ones you are probably used to. It uses the
geodist function to calculate the distance from the given point, and the value returned by
the function is then used to sort the documents in the results list. The first argument of the
geodist function (the geo value) tells Solr which field to use to calculate the distance. The
next two arguments specify the point from which the distance should be calculated. Of course
as with every sort we specify the order in which we want the sort to take place. In our case we
want to sort from the nearest to the furthest company (the asc value).
As you can see in the results, the documents were sorted as they should be.
www.it-ebooks.info
Using Additional Solr Functionalities
246
Searching words by how they sound
One day your boss comes to your office and says "Hey, I want our search engine to be able to
find the same documents when I enter phone or fone into the search box". You tried to say
something, but your boss is already at the other side of the door to your office. So, you wonder
if this kind of functionality is available in Solr. I think you already know the answer – yes it is,
and this recipe will show you how to configure it and use with Solr.
How to do it...
1. We start with the following index structure (just add this to your schema.xml file,
to the field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="phonetic" indexed="true" stored="true" />
2. Next we define the phonetic type, which looks like the following code (paste it into
the schema.xml file):
<fieldtype name="phonetic" stored="false" indexed="true"
class="solr.TextField" >
<analyzer>
<tokenizer class="solr.StandardTokenizerFactory"/>
<filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
</analyzer>
</fieldtype>
3. Now we need to index our test data, which looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Phone</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Fone</field>
</doc>
</add>
4. Now let's assume that our user wants to find documents that have the word that
sounds like fon. So, we send the following query to Solr:
http://localhost:8983/solr/select?q=name:fon
www.it-ebooks.info
Chapter 8
247
The result list returned by the query is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">name:fon</str>
</lst>
</lst>
<result name="response" numFound="2" start="0">
<doc>
<str name="id">1</str>
<str name="name">Phone</str>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Fone</str>
</doc>
</result>
</response>
So, the filter worked! We got two documents in the results list. Now let's see how it worked.
How it works...
Let's start with the index structure. As you can see we have two fields, the id field responsible
for holding the unique identifier of the product and the name field responsible for holding the
name of the product.
The name field is the one that will be used for phonetic search. For that we defined a new
field type named phonetic. Besides the standard parts (such as class among many
others) we defined a new filter: DoubleMetaphoneFilterFactory. It is responsible
for analysis and checking how the words sound. This filter uses an algorithm named double
metaphone to analyse the phonetics of the words. The additional attribute inject="false"
tells Solr to replace the existing tokens instead of inserting additional ones, which mean that
the original tokens will be replaced by the ones that the filter produces.
As you can see from the query and the data, the fon word was matched to the word phone
and also to the word fone, which means that the algorithm (and thus the filter) works quite
well. But take into consideration that this is only an algorithm, so some words that you think
should be matched will not match.
www.it-ebooks.info
Using Additional Solr Functionalities
248
See also
If you would like to know other phonetic algorithms, please take a look at the Solr Wiki page
that can be found at the following URL address: http://wiki.apache.org/solr/
AnalyzersTokenizersTokenFilters.
Ignoring defined words
Imagine a situation where you would like to filter the words that are considered vulgar from
the data we are indexing. Of course, by accident, such words can be found in your data and
you don't want them to be searchable thus you want to ignore them. Can we do that with Solr?
Of course we can, and this recipe will show you how to do that.
How to do it...
1. Let's start with the following index structure (just add this to your schema.xml file,
to the field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text_ignored" indexed="true"
stored="true" />
2. The second step is to define the text_ignored type, which looks like the following
code:
<fieldType name="text_ignored" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.StopFilterFactory" ignoreCase="true"
words="ignored.txt" enablePositionIncrements="true" />
</analyzer>
</fieldType>
3. Now we create the ignored.txt file, whose contents looks as follows:
vulgar
vulgar2
vulgar3
4. The next step is to index our test data, which looks as follows:
<add>
<doc>
<field name="id">1</field>
<field name="name">Company name</field>
</doc>
</add>
www.it-ebooks.info
Chapter 8
249
5. Now let's assume that our user wants to find the documents that have the words
Company and vulgar. So, we send the following query to Solr:
http://localhost:8983/solr/select?q=name:(Company+AND+vulgar)
In the standard situation there shouldn't be any results because we don't have
a document that matches the two given words. But let's look at what Solr returned
to us as the preceding query's result:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">name:(Company AND vulgar)</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="name">Company name</str>
</doc>
</result>
</response>
6. Hmm… it works. To be perfectly sure, let's look at the analysis page found at the
administration interface, as shown in the following screenshot:
As you can see the word vulgar was cut and thus ignored.
www.it-ebooks.info
Using Additional Solr Functionalities
250
How it works...
Let's start with the index structure. As you can see we have two fields, the id field responsible
for holding the unique identifier of the product and the name field responsible for holding the
name of the product.
The name field is the one we will use to mention the ignoring functionalities of Solr –
StopFilterFactory. As you can see the text_ignored type definition is analysed
the same way both in the query and index time. The unusual thing is the new filter –
StopFilterFactory. The words attribute of the filter definition specifies the name of the file,
encoded in UTF-8, which consists of words (a new word at every file line) that should be ignored.
The defined file should be placed in the same directory in which we placed the schema.xml file.
The ignoreCase attribute set to true tells the filter to ignore the case of the tokens and the
words defined in the file. The last attribute, enablePositionIncrements=true, tells Solr to
increment the position of the tokens in the token stream. The enablePositionIncrements
parameter should be set to true if you want to preserve the next token after the discarded one
to increment its position in the token stream.
As you can see in the query, our hypothetical user queried Solr for two words with the logical
operator AND, which means that both words must be present in the document. But, the filter
we added cut the word vulgar and thus the results list consists of the document that has
only one of the words. The same situation occurs when you are indexing your data. The words
defined in the ignored.txt file will not be indexed.
If you look at the provided screenshot from the analysis page of the Solr administration
interface (refer to step 6 of the How to do it... section), you can see that the word vulgar
was cut during the processing of the token stream in the StopFilterFactory filter.
Computing statistics for the search results
Imagine a situation where you want to compute some basic statistics about the documents
in the results list. For example, you have an e-commerce shop where you want to show the
minimum and the maximum price of the documents that were found for a given query. Of course
you could fetch all the documents and count them by yourself, but imagine Solr doing it for you.
Yes, it can! And this recipe will show you how to use that functionality.
How to do it...
1. Let's start with the index structure (just add this to your schema.xml file, to the
field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="price" type="float" indexed="true" stored="true" />
www.it-ebooks.info
Chapter 8
251
2. The example data that we index looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Book 1</field>
<field name="price">39.99</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Book 2</field>
<field name="price">30.11</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Book 3</field>
<field name="price">27.77</field>
</doc>
</add>
3. Let's assume that we want our statistics to be computed for the price field.
To do that, we send the following query to Solr:
http://localhost:8983/solr/select?q=name:book&stats=true&stats.
field=price
The response Solr returned should be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">name:book</str>
<str name="stats">true</str>
<str name="stats.field">price</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">1</str>
<str name="name">Book 1</str>
<float name="price">39.99</float>
</doc>
<doc>
www.it-ebooks.info
Using Additional Solr Functionalities
252
<str name="id">2</str>
<str name="name">Book 2</str>
<float name="price">30.11</float>
</doc>
<doc>
<str name="id">3</str>
<str name="name">Book 3</str>
<float name="price">27.77</float>
</doc>
</result>
<lst name="stats">
<lst name="stats_fields">
<lst name="price">
<double name="min">27.770000457763672</double>
<double name="max">39.9900016784668</double>
<long name="count">3</long>
<long name="missing">0</long>
<double name="sum">97.87000274658203</double>
<double name="sumOfSquares">3276.9852964233432</double>
<double name="mean">32.62333424886068</double>
<double name="stddev">6.486119174232198</double>
<lst name="facets"/>
</lst>
</lst>
</response>
As you can see, in addition to the standard results list, there was an additional section
available. Now let's see how it worked.
How it works...
The index structure is pretty straightforward. It contains three fields – one for holding the
unique identifier (the id field), one for holding the name (the name field), and one for holding
the price (the price field).
The file that contains the example data is simple, so I'll skip discussing it.
The query is interesting. In addition to the q parameter we have two new parameters. The
first one, stats=true, tells Solr that we want to use StatsComponent – the component
which will calculate the statistics for us. The second parameter, stats.field=price tells
StatsComponent which field to use for the calculation. In our case, we told Solr to use the
price field.
www.it-ebooks.info
Chapter 8
253
Now let's look at the result returned by Solr. As you can see, StatsComponent, added an
additional section to the results. The section contains the statistics generated for the field
that we told Solr we wanted the statistics for. The following statistics are available:
ff min: This is the minimum value that was found in the field, for the documents that
matched the query
ff max: This is the maximum value that was found in the field, for the documents that
matched the query
ff sum: This is the sum of all values in the field, for the documents that matched
the query
ff count: This specifies how many non-null values were found in the field for the
documents that matched the query
ff missing: This specifies the number of documents that matched the query but
didn't have any value in the specified field
ff sumOfSquares: This specifies the sum of all values squared in the field, for the
documents that matched the query
ff mean: This specifies the average for the values in the field, for the documents that
matched the query
ff stddev: This specifies the standard deviation for the values in the field, for the
documents that matched the query
You should also remember that you can specify a number of the stats.field parameters
to calculate the statistics for the different fields in a single query.
Please be careful when using this component on the multivalued fields as it can be a
performance bottleneck.
Checking the user's spelling mistakes
Most modern search sites have some kind of user spelling mistakes correction mechanism.
Some of those sites have a sophisticated mechanism, while others just have a basic one. But
actually that doesn't matter. If all search engines have it then there is a high probability that
your client or boss will want one too. Is there a way to integrate such a functionality into Solr?
Yes there is, and this recipe will show you how to do it.
Getting ready
In this recipe we'll learn how to use the Solr spellchecker component. The detailed information
about setting up the spellchecker component can be found in the Configuring spellchecker to
not use its own index recipe in Chapter 1, Apache Solr Configuration.
www.it-ebooks.info
Using Additional Solr Functionalities
254
How to do it...
1. Let's begin with the index structure (just add this to your schema.xml file, to the
field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
2. The data that we are going to index looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr cookbook</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Mechanics cookbook</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Other book</field>
</doc>
</add>
3. Our spell checking mechanism will work on the basis of the name field. Now,
let's add the appropriate search component to the solrconfig.xml file:
<searchComponent name="spellcheck" class="solr.
SpellCheckComponent">
<str name="queryAnalyzerFieldType">name</str>
<lst name="spellchecker">
<str name="name">direct</str>
<str name="field">name</str>
<str name="classname">solr.DirectSolrSpellChecker</str>
<str name="buildOnCommit">true</str>
</lst>
</searchComponent>
4. In addition to that we would like to have it integrated into our search handler,
so we make the default search handler definition the same as in the following
code (add this to your solrconfig.xml file):
<requestHandler name="/spell" class="solr.SearchHandler"
startup="lazy">
<lst name="defaults">
<str name="df">name</str>
<str name="spellcheck.dictionary">direct</str>
<str name="spellcheck">on</str>
www.it-ebooks.info
Chapter 8
255
<str name="spellcheck.collate">true</str>
</lst>
<arr name="last-components">
<str>spellcheck</str>
</arr>
</requestHandler>
5. Now let's check how it works. To do that we will send a query that contains a spelling
mistake. We will send the words other boak instead of other book. The query
doing that should look like as follows:
http://localhost:8983/solr/spell?q=name:(othar boak)
The Solr response for that query looks like the following response:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">3</int>
</lst>
<result name="response" numFound="0" start="0">
</result>
<lst name="spellcheck">
<lst name="suggestions">
<lst name="other">
<int name="numFound">1</int>
<int name="startOffset">6</int>
<int name="endOffset">11</int>
<arr name="suggestion">
<str>other</str>
</arr>
</lst>
<lst name="boak">
<int name="numFound">1</int>
<int name="startOffset">12</int>
<int name="endOffset">16</int>
<arr name="suggestion">
<str>book</str>
</arr>
</lst>
<str name="collation">name:(other book)</str>
</lst>
</lst>
</response>
As you can see for the preceding response, Solr corrected the spelling mistake we made.
Now let's see how that happened.
www.it-ebooks.info
Using Additional Solr Functionalities
256
How it works...
The index structure is pretty straightforward. It contains two fields, one for holding the unique
identifier (the id field), one for holding the name (the name field). The file that contains the
example data is simple, so I'll skip discussing it.
The spellchecker component configuration is something we discussed already in the
Configuring spellchecker to not use its own index recipe in the first chapter. So again,
I'll look at only the most important fragments.
As you can see in the configuration, we've defined a spellchecker component that will use
Solr DirectSolrSpellChecker in order to not store its index on the hard disk drive. In
addition to that, we configured it to use the name field for spellchecking and also to use
that field analyzer to process queries. Our /spell handler is configured to automatically
include spellchecking results (<str name="spellcheck">on</str>), to create collation
(<str name="spellcheck.collate">true</str>), and to use direct dictionary (<str
name="spellcheck.dictionary">direct</str>). All those properties were already
discussed in the previously mentioned recipe.
Now let's look at the query. We send the boak and othar words in the query parameter (q).
The spellchecker component will be activated automatically because of the configuration of
our /spell handler, and that's actually all there is to it when it comes to the query.
Finally we come to the results returned by Solr. As you can see there were no documents
found for the word boak and the word other, that's what we actually were expecting.
But as you can see there is a spellchecker component section added to the results list
(the <lst name="spellcheck"> tag). For each word there is a suggestion returned
by Solr (the tag <lst name="boak"> is the suggestion for the word boak). As you can
see, the spellchecker component informed us about the number of suggestions found
(<int name="numFound">), about the start and end offset of the suggestion (<int
name="startOffset">and <int name="endOffset">), and about the actual
suggestions (the <arr name="suggestion"> array). The only suggestion that Solr
returned was the book word (<str>book</str> under the suggestion array). The
same goes for the second word.
There is an additional section in the spellchecker component results generated by the
spellcheck.collate=true parameter, <str name="collation">name:(other
book)</str>. This tells us what query Solr suggested to us. We can either show the query
to the user or send it automatically to Solr and show to the user the corrected results list
and this one is up to you.
www.it-ebooks.info
Chapter 8
257
Using field values to group results
Imagine a situation where your data set is divided into different categories, subcategories,
price ranges, and things like that. What if you would like to not only get information about
counts in such a group (with the use of faceting), but would also like to show the most
relevant documents in each of the groups? Is there a grouping mechanism of some kind
in Solr? Yes there is, and this recipe will show you how to use this functionality in order
to divide documents into groups on the basis of field values.
How to do it...
1. Let's start with the index structure. Let's assume that we have the following fields
in our index (just add this to the schema.xml file to the field section):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="category" type="string" indexed="true" stored="true"
/>
<field name="price" type="tfloat" indexed="true" stored="true" />
2. The example data, which we are going to index, looks like the following code:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr cookbook</field>
<field name="category">it</field>
<field name="price">39.99</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Mechanics cookbook</field>
<field name="category">mechanics</field>
<field name="price">19.99</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">ElasticSearch book</field>
<field name="category">it</field>
<field name="price">49.99</field>
</doc>
</add>
www.it-ebooks.info
Using Additional Solr Functionalities
258
3. Let's assume that we would like to get our data divided into groups on the basis of
their category. In order to do that we send the following query to Solr:
http://localhost:8983/solr/select?q=*:*&group=true&group.
field=category
The results returned by the preceding query are as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="group.field">category</str>
<str name="group">true</str>
<str name="q">*:*</str>
</lst>
</lst>
<lst name="grouped">
<lst name="category">
<int name="matches">3</int>
<arr name="groups">
<lst>
<str name="groupValue">it</str>
<result name="doclist" numFound="2" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr cookbook</str>
<str name="category">it</str>
<float name="price">39.99</float>
</doc>
</result>
</lst>
<lst>
<str name="groupValue">mechanics</str>
<result name="doclist" numFound="1" start="0">
<doc>
<str name="id">2</str>
<str name="name">Mechanics cookbook</str>
<str name="category">mechanics</str>
<float name="price">19.99</float>
</doc>
</result>
www.it-ebooks.info
Chapter 8
259
</lst>
</arr>
</lst>
</lst>
</response>
As you can see the grouped results are different from the ones returned during a usual
search. But as you can see we got a single document per group which means it worked.
So now let's see how.
How it works...
Our index structure is very simple. It consist four fields – one responsible for the document
identifier (the id field), one used for holding the name of the book (the name field), its
category (the category field), and the last one used to hold the price of the book (the
price field). Our example data is also very simple, but please know that the first and second
book belongs to the same it category and the second book belongs to another category.
Let's look at our query now. We said that we want to have our documents divided on the basis
of contents of the category field. In order to do that, we've added a new parameter called
group, which is set to true. This tells Solr that we want to enable the grouping functionality.
And similar to faceting, we've added a second parameter we are not familiar with. The group.
field parameter is set to the name of the field holding books category, and
that's all we need.
If we look at the results returned by Solr, they are a bit different than the usual results. You
can see the usual response header, however, the resulting groups are returned in the <lst
name="grouped"> tag. The <lst name="category"> tag is generated for each group.
field parameter passed in the query; this time it tells us that the following results will be
for the category field. The <int name="matches">3</int> tag informs us how many
documents were found for our query. This is the same as the numFound value during our
usual query.
Next we have the groups array, which holds the information about the groups that were
created by Solr in the results. Each group is described by the it value, that is, the <str
name="groupValue">it</str> section for the first group, which means that all documents
in that group have the it value in the field used for grouping. In the result tag we can see
the documents returned for the group. By default Solr will return the most relevant document
for each group. I'll skip commenting on the result tag as it is almost identical to the results
Solr returns for a non-grouped query and we are familiar with those, right?
One last thing – you can specify multiple group.field parameters with different fields in a
single query in order to get multiple grouping.
www.it-ebooks.info
Using Additional Solr Functionalities
260
There's more...
There is one more thing about grouping on the basis of field values and I would like to share a
few thoughts about that.
More than a single document in a group
Sometimes you may need to return more than a single document in a group. In order to do
that you will need to use the group.limit parameter and set it to the maximum number of
documents you want to have. For example, if we would like to have 10 documents per group
of results, we would send the following query:
http://localhost:8983/solr/select?q=*:*&group=true&group.
field=category&group.limit=10
Using queries to group results
Sometimes grouping results on the basis of field values is not enough. For example, imagine
that we would like to group documents in price brackets, that is, we would like to show the
most relevant document for documents with price range of 1.0 to 19.99, a document for
documents with price range of 20.00 to 50.0, and so on. Solr allows us to group results on
the basis of query results. This recipe will show you how to do that.
Getting ready
In this chapter we will use the same index structure and test data as we used in the Using
field values to group results recipe in this chapter. Please read it before continuing.
How to do it…
As we are reusing the data and index structure from the Using field values to group results
recipe, we can start with the query. In order to group our documents on the basis of query
results, we can send the following query:
http://localhost:8983/solr/select?q=*:*&group=true&group.query=price:
[20.0+TO+50.0]&group.query=price:[1.0+TO+19.99]
The results of the preceding query look as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
<lst name="params">
www.it-ebooks.info
Chapter 8
261
<arr name="group.query">
<str>price:[20.0 TO 50.0]</str>
<str>price:[1.0 TO 19.99]</str>
</arr>
<str name="group">true</str>
<str name="q">*:*</str>
</lst>
</lst>
<lst name="grouped">
<lst name="price:[20.0 TO 50.0]">
<int name="matches">3</int>
<result name="doclist" numFound="2" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr cookbook</str>
<str name="category">it</str>
<float name="price">39.99</float>
</doc>
</result>
</lst>
<lst name="price:[1.0 TO 19.99]">
<int name="matches">3</int>
<result name="doclist" numFound="1" start="0">
<doc>
<str name="id">2</str>
<str name="name">Mechanics cookbook</str>
<str name="category">mechanics</str>
<float name="price">19.99</float>
</doc>
</result>
</lst>
</lst>
</response>
So now let's look at how it works.
How it works...
As you can see in the query we told Solr that we want to use the grouping functionality
by using the group=true parameter. In addition to that we specify that we want to have
two groups calculated on the basis of the queries. The first group should contain the
documents that match the following range query price=[20.0+TO+50.00] (the group.
query=price:[1.0+TO+19.99] parameter), and the second group should contain
documents that match the following range query price=[1.0+TO+19.99] (the group.
query=price:[1.0+TO+19.99] parameter).
www.it-ebooks.info
Using Additional Solr Functionalities
262
If you look at the results, they are very similar to the ones for grouping on the basis of field
values. The only difference is in the name of the groups. When using the field values for
grouping, groups were named after the used field names. However, when using queries
to group documents, groups are named as our grouping queries. So in our case, we have
two groups – one named price:[1.0+TO+19.99] (the <lst name="price:[1.0
TO 19.99]"> tag) and a second one named price:[20.0 TO 50.0] (the <lst
name="price:[20.0 TO 50.0]"> tag).
Using function queries to group results
Imagine that you would like to group results not by using queries or field contents, but instead
you would like to use a value returned by a function query. Imagine you could group documents
on the basis of their distance from a point. Sounds good, Solr allows that and in the following
recipe we will see how we can use a simple function query to group results.
Getting ready
In this chapter we will use the same index structure and test data we used in the Sorting
results by a function value recipe in this chapter. We will also use some knowledge that
we gained in the Using field values to group results recipe in this chapter. Please read
them before continuing.
How to do it...
I assume that we would like to have our documents grouped on the basis of the distance
from a given point (in real life we would probably like to have some kind of bracket calculated,
but let's skip that for now).
As we are using the same index structure and test data as we used in the Sorting results by
a function value recipe in this chapter, we'll start with the query. In order to achieve what we
want we send the following query:
http://localhost:8983/solr/select?q=*:*&group=true&group.
func=geodist(geo,0.0,0.0)
The following results were returned by Solr after running the preceding query:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
<lst name="params">
<str name="group.func">geodist(geo,0.0,0.0)</str>
www.it-ebooks.info
Chapter 8
263
<str name="group">true</str>
<str name="q">*:*</str>
</lst>
</lst>
<lst name="grouped">
<lst name="geodist(geo,0.0,0.0)">
<int name="matches">3</int>
<arr name="groups">
<lst>
<double name="groupValue">1584.126028923632</double>
<result name="doclist" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="name">Company one</str>
<str name="geo">10.1,10.1</str>
</doc>
</result>
</lst>
<lst>
<double name="groupValue">1740.0195023531824</double>
<result name="doclist" numFound="1" start="0">
<doc>
<str name="id">2</str>
<str name="name">Company two</str>
<str name="geo">11.1,11.1</str>
</doc>
</result>
</lst>
<lst>
<double name="groupValue">1911.187477467305</double>
<result name="doclist" numFound="1" start="0">
<doc>
<str name="id">3</str>
<str name="name">Company three</str>
<str name="geo">12.2,12.2</str>
</doc>
</result>
</lst>
</arr>
</lst>
</lst>
</response>
Everything worked as it should have, so now let's see how it worked.
www.it-ebooks.info
Using Additional Solr Functionalities
264
How it works...
As you can see, the query is very similar to the one we used when grouping our documents on
the basis of field values. So, we again pass the group=true parameter to enable grouping,
but this time in addition to that we pass the group.func parameter with the value, that is,
our function query based on whose results Solr should group our documents.
If you look at the results, they are again very similar to the ones seen in grouping on the basis
of field values. The only difference is in the names of the groups. When using the field values
for grouping, groups were named after the used field names. However, when using function
queries to group documents, groups are named by the result of the function query. So in our
case, we have three groups because our function query returned three different results, as
illustrated in the following list:
ff The group named 1584.126028923632 (the <double name="groupVal
ue">1584.126028923632</double> tag)
ff The group named 1740.0195023531824 (the <double name="groupVal
ue">1740.0195023531824</double> tag)
ff The group named 1911.187477467305 (the <double name="groupVal
ue">1911.187477467305</double> tag)
www.it-ebooks.info
9
Dealing with Problems
In this chapter we will cover:
ff How to deal with too many opened files
ff How to deal with out-of-memory problems
ff How to sort non-English languages properly
ff How to make your index smaller
ff Diagnosing Solr problems
ff How to avoid swapping
Introduction
Every Solr deployment will, sooner or later, have some kind of problem. It doesn't matter
if the deployment is small and simple or if it's a big and complicated deployment containing
multiple servers and shards. In this chapter I'll try to help you with some of the problems you
can run into when running Solr. I hope this will help you and make your task easier.
How to deal with too many opened files
Sometimes you might encounter a strange error, something that lies on the edge between
Lucene and the operating system—the "too many files opened" exception. Is there something
we can do about it? Yes, we can, and this recipe will show you how.
www.it-ebooks.info
Dealing with Problems
266
How to do it...
The following steps show how to deal with too many opened files:
1. So, for the purpose of the recipe let's assume that the header of the exception thrown
by Solr looks like this:
java.io.FileNotFoundException: /use/share/solr/data/index/_1.fdx
(Too many open files)
2. What can you do instead of pulling your hair out? First of all, this probably occurred on
a Unix-/Linux-based operating system. So, let's start with setting the opened files' limit
higher. To do that, you need to edit the /etc/security/limits.conf file of your
operating system and set the following values (I assume Solr is running as solr user):
solr soft nofile 32000
solr hard nofile 32000
3. Now let's add the following line to the .bash_profile file in the solr user home
directory:
ulimit -n 32000
The probable cause of the "too many files opened" exception is the number of files the
index is built of. The more segments the index is built of, the more files will be used.
4. The next thing sometimes worth considering is lowering the mergeFactor
parameter. To make things simple, the lower the mergeFactor setting, the fewer
files will be used to construct the index (please read the How it works... section
that follows, about the dangers of having a very low merge factor). So, let's set
mergeFactor to 2. We modify the following line in the solrconfig.xml file and
set it with the appropriate value (2 in our case):
<mergeFactor>2</mergeFactor>
After we set that configuration value, we need to run the optimization of the index. Now let's
see what the options mean.
How it works...
We don't discuss the operating system's internal working in this book, but in this section we
will make an exception. The mentioned limits.conf file in the /etc/security directory
lets you specify the opened files limit for the users of your system. In the example shown
earlier, we set the two necessary limits to 32000 for the user solr, so if you had problems
with the number of opened files in the default setup you should see the difference after
restarting Solr. However, remember that if you are working as the user and you change
the limits then you may need to log out and log in again to see those changes.
www.it-ebooks.info
Chapter 9
267
Next, we have the mergeFactor parameter. This configuration parameter lets you determine
how often Lucene segments will be merged. The lower the value of mergeFactor, the
smaller the number of index files will be. However, you have to remember that having a small
mergeFactor value will lead to more background merges being done by Lucene, and thus
the indexing speed will be lower compared to the ones with a higher mergeFactor value
and your node's I/O system will be used more extensively. On the other hand, lower values
of mergeFactor will speed up searching.
How to deal with out-of-memory problems
As with every application written in Java, sometimes memory problems happen. When talking
about Solr, those problems are usually related to heap size. They usually happen when the
heap size is too low. This recipe will show you how to deal with those problems and what to
do to avoid them.
How to do it...
Let's consider what to do when we see an exception like this:
SEVERE: java.lang.OutOfMemoryError: Java heap space
Firstly, you can do something to make your task easier. You can add more memory that the
Java virtual machine can use if you have some free physical memory available in your system.
To do that, you need to add the Xmx and, preferably, the Xms parameter to the start-up
script of your servlet container (Apache Tomcat or Jetty). To do that, I used the default
Solr deployment and modified the parameters. This is how Solr was run with more than
the default heap size:
java –Xmx1024M –Xms512m –jar start.jar
How it works...
So what do the Xmx and Xms Java virtual machine parameters do? The Xms parameter
specifies how much heap memory should be assigned by the virtual machine at the start and
thus this is the minimal size of the heap memory that will be assigned by the virtual machine.
The Xmx parameter specifies the maximum size of the heap. The Java virtual machine will not
be able to assign more memory for the heap than the Xmx parameter.
You should remember one thing—sometimes it's good to set the Xmx and Xms parameters to
the same values. It will ensure that the virtual machine won't be resizing the heap size during
application execution and thus won't lose precious time in heap resizing.
One additional thing—be careful when setting the heap size to be too big. It is usually not
advised to give the heap size more than 60 percent of your total memory available in the
system, because your operating system's I/O cache will suffer.
www.it-ebooks.info
Dealing with Problems
268
There's more...
There are a few more things I would like to discuss when it comes to memory issues.
Monitoring heap when an out-of-memory error occurs
If the out-of-memory errors occurs even after the actions you've done, you should start
monitoring your heap. One of the easiest ways to do that is to add the appropriate Java
virtual machine parameters. Those parameters are XX:+HeapDumpOnOutOfMemory and
XX:HeapDumpPath. Those two parameters tell the virtual machine to dump the heap on the
out-of-memory error and write it to a file created in the specified directory. So the default Solr
deployment's start command would look like this:
java –jar –XX:+HeapDumpOnOutOfMemoryError –XX:HeapDumpPath=/var/log/dump/
start.jar
Reducing the amount of memory needed by Solr
However there are times (even if your system has a large amount of memory available), when
you may be forced to think about Solr memory consumption reduction. In such cases there is
no general advice, but these are a few things that you can keep in mind:
ff Look at your queries and consider how they are built
ff How you use the faceting mechanism and so on (facet.method=fc tends to use
less memory when the field has many unique terms in the index)
ff Remember that fetching too many documents at a time may cause Solr to run out of
heap memory (for example, when setting a large value for the query result window)
ff Reduce the number of calculated faceting results (facet.limit parameter)
ff Check the memory usage of your caches—this can also be one of the reasons for
the problems with memory
ff If you don't need to use the normalization factor for text fields, you can set
omitNorms="true" for such fields and save some additional memory too
ff Remember that grouping mechanisms requires memory; for big result sets and
high numbers of groups, a vast amount of memory may be needed
How to sort non-English languages properly
As you probably already know, Solr supports UTF-8 encoding and thus can handle data
in many languages. But, if you ever needed to sort some languages that have characters
specific to them you probably know that it doesn't work well on a standard Solr string
type. This recipe will show you how to deal with sorting in Solr.
www.it-ebooks.info
Chapter 9
269
How to do it...
These steps tell us how to sort non-English languages properly:
1. For the purpose of this recipe, I have assumed that we will have to sort text that
contains Polish characters. To show the good and bad sorting behaviour we need
to create the following index structure (add this to your schema.xml file):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="name_sort_bad" type="string" indexed="true"
stored="true" />
<field name="name_sort_good" type="text_sort" indexed="true"
stored="true" />
2. Now let's define some copy fields to automatically fill the name_sort_bad and
name_sort_good fields. Here is how they are defined (add this after the fields
section in the schema.xml file):
<copyField source="name" dest="name_sort_bad" />
<copyField source="name" dest="name_sort_good" />
3. The last thing about the schema.xml file is the new type. So the text_sort
definition looks like this:
<fieldType name="text_sort" class="solr.TextField">
<analyzer>
<tokenizer class="solr.KeywordTokenizerFactory" />
<filter class="solr.CollationKeyFilterFactory" language="pl"
country="PL" strength="primary" />
</analyzer>
</fieldType>
4. The test we need to index looks like this:
<add>
<doc>
<field name="id">1</field>
<field name="name">Laka</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Lalka</field>
</doc>
<doc>
<field name="id">3</field>
<field name="name">Zab</field>
</doc>
</add>
www.it-ebooks.info
Dealing with Problems
270
5. First, let's take a look at how the incorrect sorting order looks. To do this, we send the
following query to Solr:
http://localhost:8983/solr/select?q=*:*&sort=name_sort_bad+asc
And now the response that was returned for the query is as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="q">*:*</str>
<str name="sort">name_sort_bad asc</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">2</str>
<str name="name">Lalka</str>
<str name="name_sort_bad">Lalka</str>
<str name="name_sort_good">Lalka</str>
</doc>
<doc>
<str name="id">3</str>
<str name="name">Zab</str>
<str name="name_sort_bad">Zab</str>
<str name="name_sort_good">Zab</str>
</doc>
<doc>
<str name="id">1</str>
<str name="name">Laka</str>
<str name="name_sort_bad">Laka</str>
<str name="name_sort_good">Laka</str>
</doc>
</result>
</response>
6. Now let's send the query that should return the documents sorted in the correct
order. The query looks like this:
http://localhost:8983/solr/select?q=*:*&sort=name_sort_good+asc
www.it-ebooks.info
Chapter 9
271
And the results returned by Solr are as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">6</int>
<lst name="params">
<str name="q">*:*</str>
<str name="sort">name_sort_good asc</str>
</lst>
</lst>
<result name="response" numFound="3" start="0">
<doc>
<str name="id">2</str>
<str name="name">Lalka</str>
<str name="name_sort_bad">Lalka</str>
<str name="name_sort_good">Lalka</str>
</doc>
<doc>
<str name="id">1</str>
<str name="name">Laka</str>
<str name="name_sort_bad">Laka</str>
<str name="name_sort_good">Laka</str>
</doc>
<doc>
<str name="id">3</str>
<str name="name">Zab</str>
<str name="name_sort_bad">Zab</str>
<str name="name_sort_good">Zab</str>
</doc>
</result>
</response>
As you can see the order is different and believe me it's correct. Now let's see how it works.
How it works...
Every document in the index is built on four fields. The id field is responsible for holding the
unique identifier of the document. The name field is responsible for holding the name of the
document. The last two fields are used for sorting.
www.it-ebooks.info
Dealing with Problems
272
The name_sort_bad field is nothing new; it's just a field based on string, which
is used to perform sorting. The name_sort_good field is based on a new type, the
text_sort field type. The field is based on the solr.TextField type and on solr.
KeywordTokenizerFactory, which basically means that our text won't be tokenized. We
used this trick because we want to sort on that field and thus we don't want the data in it to
be tokenized, but we want to use a special filter on that field. The filter that allows Solr to sort
correctly is the solr.CollationKeyFilterFactory filter. We used three attributes of
this filter. First, the language attribute, which tells Solr about the language of the field. The
second attribute is country which tells Solr about the country variant (this can be skipped
if necessary). The strength attribute informs Solr about the collation strength used. More
information about those parameters can be found in the JDK documentation. One thing that is
crucial is that you need to create an appropriate field and set the appropriate attribute's value
for every non-English language you want to sort on.
The two queries you can see in the examples differ in only one thing, the field used for sorting.
The first query uses the string-based field, name_sort_bad. When sorting on this field, the
document order will be incorrect when there are non-English characters present. However,
when sorting on the name_sort_good field everything will be in the correct order as shown
in the example.
How to make your index smaller
There may be situations where you would like to make your index smaller. The reasons may be
different—you may want to have a smaller index so that it would fit into the operating system's
I/O cache or you want to store your index in RAMDirectory. This recipe will try to help you
with the process of index slimming.
How to do it...
The following steps tell us how to make your index smaller:
1. For the purpose of this recipe, I assumed that we will have four fields that describe the
document. I created the following index structure (add this to your schema.xml file):
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="true" />
<field name="description" type="text" indexed="true" stored="true"
/>
<field name="price" type="string" indexed="true" stored="true" />
Let's assume that our application has the following requirements:
?? We need to search on name and description fields
?? We need to show two fields in the results: id and price
?? We don't use highlighting and spellchecker
www.it-ebooks.info
Chapter 9
273
2. So the first thing we should do is set the stored="false" attribute for the name
and description fields.
3. Next, we set the indexed="false" attribute for the price field.
4. Now, the last thing to do is add the term options. We add the
termVectors="false", termPositions="false", and
termOffsets="false" attributes to the name and description fields.
The modified schema looks like this:
<field name="id" type="string" indexed="true" stored="true"
required="true" />
<field name="name" type="text" indexed="true" stored="false"
termVectors="false" termPositions="false" termOffsets="false"/>
<field name="description" type="text" indexed="true"
stored="false" termVectors="false" termPositions="false"
termOffsets="false"/>
<field name="price" type="string" indexed="false" stored="true" />
Let's check the index size now. I've indexed 1,000,000 sample documents with the use
of the original schema.xml file. The index size was 329,237,331 bytes. After changing
the schema.xml file and indexing the same data the index size was 84,301,603 bytes.
So as you can see, the index size was reduced.
Now let's see why we see this reduction in the index size.
How it works...
The first schema.xml file you see is the standard index structure provided with Solr example
deployment, at least when talking about the types. We have four fields, all of them indexed
and stored, which means all of them are searchable and are shown in the result list.
Now let's look at the requirements. First of all we only need to search on the name and
description fields, which mean that the rest of the fields can be set up as not indexed
(indexed="false" attribute). We set that for the price field, while we set the id field to be
searchable, as we need that to avoid duplicates. When the indexed attribute is set to false,
the information in that field is not indexed which basically means that it isn't written into the
Lucene-inverted index and thus it is not available; this saves index space. Of course you can't
set this attribute to false if you need this field to be searchable.
The second requirement tells us what fields we are obligated to show in the search results.
Those field are the ones that need the stored attribute set to true, and the rest can have
this attribute set to false. When we set this attribute to false, we tell Solr that we don't
want to store the original value—the one before analysis—thus we don't want this field to be
included in the search results. Setting this attribute to true on many fields will increase
the index size substantially.
www.it-ebooks.info
Dealing with Problems
274
The last requirement is actually information; we don't need to worry about highlighting
functionality so we can reduce the index size in a greater way. To do that we add the
termVectors="false", termPositions="false", and termOffsets="false"
attributes to the name and description fields. By doing that we tell Solr not to store
any information about terms in the index. This basically means that we can't use the
highlighting functionalities of Solr, but we have reduced our index size substantially
and we don't need highlighting.
If we don't need index time boosting and we do not care about length normalization, we could
also turn on the omitting of that factor (the omitNorms="true" attribute) for the fields
based on the text type (for primitive types such as string, integer, and so on it's turned
on by default in Solr 4.0). This would shrink the index a bit more and in addition to that save
us some memory during queries.
Last few words. Every time you think about reducing the index size, first do the optimization,
then look at your schema.xml file and see if you need all those fields. Then check which
fields shouldn't be stored and which you can omit when indexing. The last thing should
be removing the information about terms, because there may come a time when you will
need this information and the only thing you will be able to do is a full indexation of millions
of documents.
There's more...
There is one additional thing I would like to mention.
Estimating your index size and memory usage
Sometimes it's necessary to have a rough estimate of the index size and the memory
usage of your Solr instance. Currently there is a draft of the Microsoft Excel spreadsheet
that lets you do that kind of estimation. If you are interested in it, download the following
file: http://svn.apache.org/repos/asf/lucene/dev/trunk/dev-tools/sizeestimator-
lucene-solr.xls.
Diagnosing Solr problems
There are many tools out there that can help you diagnose problems with Solr. You can
monitor your operating system by yourself by using different operating system commands
such as vmstat, dstat, and iostat. You can use different Java tools such as jconsole
and jvisualvm to look at the JMX mbeans, you can monitor your garbage collector work,
and so on. However in order to properly diagnose what's happening with your Apache Solr
cluster you'll need to see the whole view as well as the specifics. There are different tools
out there that you can use, however this recipe will show you what you can find in one of
them—Scalable Performance Monitoring.
www.it-ebooks.info
Chapter 9
275
Getting ready
This recipe assumes that you have Scalable Performance Monitoring installed and running. If
you don't, please go to http://sematext.com/spm/index.html, create a free account,
and download the client that's suitable for you. The installation is very simple and you'll be
guided by the Scalable Performance Monitoring installer from the beginning to the end.
How to do it...
1. Let's assume that we want to check our Solr instance health by looking at the GUI of
Scalable Performance Monitoring. After logging we would get the following view:
This is an overview of the system, however we would like to see some details.
www.it-ebooks.info
Dealing with Problems
276
2. Let's start with the information about indices.
3. Now let's have a look at the cache usage:
4. By now we know what our index and Solr caches' usage looks like and we know if we
need to tune them or not, so now let's look at the query rate and its latency:
www.it-ebooks.info
Chapter 9
277
5. Here we can see the warm-up queries' time and execution:
We've got all the information that is connected to queries, so now we can go and see
the other crucial information such as memory and CPU usage, Java heap usage, and
how Java garbage collector works.
6. Let's start with the memory and CPU usage:
www.it-ebooks.info
Dealing with Problems
278
7. And now we can see the JVM heap statistics:
8. And finally we can see how the garbage collector works:
That's all we need during the usual work when we want to see how different parts of Solr work.
If we would like to go in depth and see how the I/O subsystem works or the swap usage we can
use other aggregated reports available in any of the monitoring systems, or you could just use
the appropriate system commands like the ones mentioned in the introduction to the recipe.
How it works...
Let's discuss the provided statistics in a bit more dtail. On the first screenshot provided you
can see the overview of the system. This part of Scalable Performance Monitoring will be
shown to you as soon as you log in to the system. You'll usually use it to get the whole idea
about the system, but you'll want to look at the detailed reports in order to see a higher
granularity of your data.
On the second screenshot you can see the index statistics (or indices depending on the
options you've chosen). You can see the information about the number of documents in
the index, the maximum size of the index, the number of segments, and the delta, which is
calculated as the maximum number of documents minus the current number of documents.
Not shown on the screenshot are the filesystem statistics which tell you about the size of the
index on the disk. With the use of this data you can see the complete information about your
core's or collection's disk drive usage.
www.it-ebooks.info
Chapter 9
279
The third screenshot is one of the most important ones—the information about Apache Solr
caches. Although I haven't shown all the information here, you can see a single cache on the
screenshot—the query result cache (we didn't show the document cache and the filter cache).
You can see information about the size of the cache, the maximum size of the cache, the
number of evictions, and so on. Remember, if your cache is too low, its size will be equal
to the maximum size and you'll start seeing evictions, which is not good and you'll probably
want to change the cache configuration.
The query rate and latency report shown in the fourth screenshot provides information about
the number of queries and their average latency. You can see how your queries were executed
and if you need to start thinking about the optimization of your system.
In order to check how your warm-up queries were executed you can look at the fifth of
the provided screenshots. You can see the amount of time for which your warm-up queries
were executed and how long it took to auto-warm your query result cache and your filter
cache. This information can be valuable when dealing with problems such as Solr hanging
during the opening of new or first searches.
The last three screenshots provide the information that is not directly connected to Apache
Solr, but very valuable from our point of view, when we have to see what is happening with
our Solr instance. So let's discuss them.
The sixth screenshot shows information about the CPU and memory usage. For the CPU
information you can see how it works; the percent of time spent idling, working on user-run
software, working with operating system software, handling interruptions, and so on. If you
look at the memory graph you will find the total, used, free, cached, and buffered statistics.
That's basically all you need in order to see if your CPU is 100 percent utilized and how your
system memory is utilized. This is crucial when your system is not working in the way that you
would like it to.
The seventh screenshot provides information about the Java virtual machine. You can see the
heap memory statistics and the threading information (which is not shown in the screenshot).
The heap usage graph allows us to see if the amount of memory we specified for our Solr
instance is enough to handle all the operations that need to be done.
The final screenshot provides information about how your JVM garbage collector works.
In most situations you will want it to run more frequently, but for a shorter period of time
stop the world events which may cause your Solr instances to stop handling queries or
indexing for a short period of time.
To sum up, all the information can be gathered manually by using different system and Java
tools. The crucial part of every monitoring system is the ability to show you graphs that will let
you point to a certain event in time. We looked at a single monitoring solution, but there are
many more available and if you don't like Scalable Performance Monitoring you can use any
available. One more thing; please remember that we only scraped the surface in this recipe
and the book (or e-book) you are holding in your hands doesn't describe all the information
regarding monitoring and dealing with problems. However I hope that this recipe will help you
at least start with this topic.
www.it-ebooks.info
Dealing with Problems
280
If you don't want to use Scalable Performance Monitoring, you can choose some other
technology that is available like Ganglia (http://ganglia.sourceforge.net/), Mumin
(http://munin-monitoring.org/), Zabix (http://www.zabbix.com/), Cacti (http://
www.cacti.net/), or any commercial ones like New Relic (http://newrelic.com/).
How to avoid swapping
One of the crucial things when running your Solr instance in production is performance. What
you want is to give your clients relevant results in the blink of an eye. If your clients have to
wait for results for too long, some of them may choose other vendors or sites that provide
similar services. One of the things to remember when running a Java application such as
Apache Solr is to ensure that the operating system won't write the heap to disk. This ensures
that the part of the memory used by Solr won't be swapped at all. This recipe will show you
how to achieve that on a Linux operating system.
Getting ready
Please note that the following recipe is only valid when running Apache Solr on a Linux
operating system. In addition to that, please be advised that turning off swapping should
only be done when you have enough memory to handle all the necessary application in
your system and you want to be sure that there won't be any swapping.
How to do it...
1. Before turning off swapping let's look at the amount of swap memory used by
our operating system. In order to do that let's look at the main page of the Solr
administration panel:
www.it-ebooks.info
Chapter 9
281
2. As you can see some swap memory is being used. In order to demonstrate how to
turn off swap usage I've freed some memory on the virtual machine I was using for
tests and after that I've run the following commands:
sudo sysctl -w vm.swappiness=0
sudo /sbin/swapoff -a
3. After the second command is done running, refresh the main page of the Solr admin
instance and this is what it will show:
4. It seems like it is working, but in order to be sure I've run the following command:
free -m
And the response of it was:
total used free shared buffers cached
Mem: 3001 2326 675 0 3 97
-/+ buffers/cache: 2226 775
Swap: 0 0 0
And again we can see that there is no swap usage. Now let's see how this works.
www.it-ebooks.info
Dealing with Problems
282
How it works...
On the first provided screenshot you can see that there is a bit more than 183 MB of
swap memory being used. This is not good; in a production environment you want to avoid
swapping, of course, if you have the necessary amount of memory. Swapping will make the
contents of the memory to be written onto the hard disk drive, thus making your operating
system and applications execute slower. This can also affect Solr.
So, in order to turn off swapping in a Linux operating system, we've run two commands. The
first one sets the vm.swappiness operating system property to 0, which means that we want
to avoid swapping. We needed to use sudo, because in order to set that property with the
use of the sysctl command we need administration privileges. The second command (the /
sbin/swapoff -a one) disables swapping on all known devices.
As you can see on the second screenshot, the Solr administration panel didn't even include
the swapping information so we may suspect that it was turned off. However in order to be
sure, we've used another Linux command, the free command with the -m switch, in order to
see the memory usage on our system. As you can see, the Swap section shows 0, so we can
now be sure that swapping was turned off.
www.it-ebooks.info
Real-life Situations
In this chapter we will cover:
ff How to implement a product's autocomplete functionality
ff How to implement a category's autocomplete functionality
ff How to use different query parsers in a single query
ff How to get documents right after they were sent for indexation
ff How to search your data in a near real-time manner
ff How to get documents with all the query words at the top of the results set
ff How to boost documents based on their publication date
Introduction
In the previous nine chapters, we discussed about the different Apache Solr functionalities
and how to overcome some common problems and situations. However, I decided that we
will describe a few of the most common problems that arise on the Apache Solr mailing list
and during our work with our clients. This chapter is dedicated to describing how to handle
such situations, and I hope that you'll find it useful.
www.it-ebooks.info
Real-life Situations
284
How to implement a product's autocomplete
functionality
The autocomplete functionality is very popular now. You can find it in most e-commerce sites,
on Google, Bing, and so on. It enables your users or clients to find what they want and do it fast.
In most cases, the autocomplete functionality also increases the relevance of your search by
pointing to the right author, title, and so on, right away without looking at the search results.
What's more, sites that use autocomplete report higher revenue after deploying it in comparison
to the situation before implementing it. Seems like a win-win situation, both for you and your
clients. So, let's look at how we can implement a product's autocomplete functionality in Solr.
How to do it...
Let's assume that we want to show the full product name whenever our users enter a part
of the word that the product name is made up of. In addition to this, we want to show the
number of documents with the same names.
1. Let's start with an example data that is going to be indexed:
<add>
<doc>
<field name="id">1</field>
<field name="name">First Solr 4.0 CookBook</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Second Solr 4.0 CookBook</field>
</doc>
</add>
2. We will need two main fields in the index – one for the document identifier and one
for the name. We will need two additional fields – one for autocomplete and one for
faceting that we will use. So, our index structure will look similar to the following code
snippet (we should add it to the schema.xml fields section):
<field name="id" type="string" indexed="true"
stored="true" required="true" />
<field name="name" type="text" indexed="true"
stored="true" />
<field name="name_autocomplete" type="text_autocomplete"
indexed="true" stored="false" />
<field name="name_show" type="string" indexed="true"
stored="false" />
www.it-ebooks.info
Appendix
285
3. In addition to this, we want Solr to automatically copy the data from the name field to
the name_autocomplete and name_show fields. So, we should add the following
copy fields section to the schema.xml file:
<copyField source="name" dest="name_autocomplete"/>
<copyField source="name" dest="name_show"/>
4. Now, the final thing about the schema.xml file — that is, the text_autocomplete
field type — it should look similar to the following code snippet (place it in the types
section of the schema.xml file):
<fieldType name="text_autocomplete"
class="solr.TextField" positionIncrementGap="100">
<analyzer type="index">
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
<filter class="solr.EdgeNGramFilterFactory"
minGramSize="1" maxGramSize="25" />
</analyzer>
<analyzer type="query">
<tokenizer class="solr.WhitespaceTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
</fieldType>
5. That's all. Now, if we would like to show all the products that start with the word sol
to our users, we would send the following query:
curl 'http://localhost:8983/solr/select?q=name_autocomplete:sol&q.
op=AND&rows=0&&facet=true&facet.field=name_show&facet.
mincount=1&facet.limit=5'
The response returned by Solr would be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="facet">true</str>
<str name="fl">name</str>
<str name="facet.mincount">1</str>
<str name="q">name_autocomplete:sol</str>
<str name="facet.limit">5</str>
<str name="q.op">AND</str>
<str name="facet.field">name_show</str>
www.it-ebooks.info
Real-life Situations
286
<str name="rows">0</str>
</lst>
</lst>
<result name="response" numFound="2" start="0">
</result>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields">
<lst name="name_show">
<int name="First Solr 4.0 CookBook">1</int>
<int name="Second Solr 4.0 CookBook">1</int>
</lst>
</lst>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
</response>
As you can see, the faceting results returned by Solr are exactly what we were looking
for. So now, let's see how it works.
How it works...
Our example documents are pretty simple – they are only built of an identifier and a name
that we will use to make autocomplete. The index structure is where things are getting
interesting. The first two fields are the ones that you would have expected – they are used
to hold the identifier of the document and its name. However, we have two additional fields
available; the name_autocomplete field that will be used for querying and name_show that
will be used for faceting. The name_show field is based on a string type, because we want to
have a single token per name when using faceting.
With the use of the copy field sections, we can let Solr automatically copy the values of the
fields defined by the source attribute to the field defined by the dest field. Copying is done
before any analysis.
The name_autocomplete field is based on the text_autocomplete field type, which is
defined differently for indexing and querying. During query time, we divide the entered query
on the basis of white space characters using solr.WhitespaceTokenizerFactory, and
we lowercase the tokens with the use of solr.LowerCaseFilterFactory. For query time,
this is what we want because we don't want any more processing. For index time, we not only
use the same tokenizer and filter, but also solr.NGramFilterFactory. This is because
we want to allow our users to efficiently search for prefixes, so that when someone enters the
word sol, we would like to show all the products that have a word starting with that prefix,
and solr.NGramFilterFactory allows us to do that. For the word solr, it will produce
the tokens s, so, sol, and solr.
www.it-ebooks.info
Appendix
287
We've also said that we are interested in grams starting from a single character (the
minGramsSize property) and the maximum size of grams allowed is 25 (the maxGramSize
property).
Now comes the query. As you can see, we've sent the prefix of the word that the users have
entered to the name_autocomplete field (q=name_autocomplete:sol). In addition to
this, we've also said that we want words in our query to be connected with the logical AND
operator (the q.op parameter), and that we are not interested in the search results (the
rows=0 parameter). As we said, we will use faceting for our autocomplete functionality,
because we need the information about the number of documents with the same titles, so
we've turned faceting on (the facet=true parameter). We said that we want to calculate
the faceting on our name_show field (the facet.field=name_show parameter). We are
also only interested in faceting a calculation for the values that have at least one document
in them (facet.mincount=1), and we want the top five results (facet.limit=5).
As you can see, we've got two distinct values in the faceting results; both with a single
document with the same title, which matches our sample data.
How to implement a category's
autocomplete functionality
Sometimes we are not just interested in our product's name for autocomplete. Imagine that
we want to show the category of our products in the autocomplete box along with the number
of products in each category. Let's see how we can use faceting
to do that.
How to do it...
This recipe will show how we can implement a category's autocomplete functionality.
1. Let's start with the example data, which is going to be indexed and which looks
similar to the following code snippet:
<add>
<doc>
<field name="id">1</field>
<field name="name">First Solr 4.0 CookBook</field>
<field name="category">Books</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Second Solr 4.0 CookBook</field>
<field name="category">Books And Tutorials</field>
</doc>
</add>
www.it-ebooks.info
Real-life Situations
288
2. The fields section of the schema.xml configuration file that can handle the
preceding data should look similar to the following code snippet:
<field name="id" type="string" indexed="true"
stored="true" required="true" />
<field name="name" type="text" indexed="true"
stored="true" />
<field name="category" type="text_lowercase"
indexed="true" stored="true" />
3. One final thing is the text_lowercase type definition, which should be placed in
the types section of the schema.xml file. It should look similar to the following
code snippet:
<fieldType name="text_lowercase" class="solr.TextField"
positionIncrementGap="100">
<analyzer>
<tokenizer class="solr.KeywordTokenizerFactory"/>
<filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
</fieldType>
4. So now, if we would like to get all the categories that start with boo, along with the
number of products in those categories, we would send the following query:
curl 'http://localhost:8983/solr/select?q=*:*&rows=0&facet=tr
ue&facet.field=category&facet.mincount=1&facet.limit=5&facet.
prefix=boo'
The following response will be returned by Solr:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="facet">true</str>
<str name="facet.mincount">1</str>
<str name="indent">true</str>
<str name="q">*:* </str>
<str name="facet.limit">5</str>
<str name="facet.prefix">boo</str>
<str name="facet.field">category</str>
<str name="rows">0</str>
www.it-ebooks.info
Appendix
289
</lst>
</lst>
<result name="response" numFound="2" start="0">
</result>
<lst name="facet_counts">
<lst name="facet_queries"/>
<lst name="facet_fields">
<lst name="category">
<int name="books">1</int>
<int name="books and tutorials">1</int>
</lst>
</lst>
<lst name="facet_dates"/>
<lst name="facet_ranges"/>
</lst>
</response>
As you can see, we have two categories, each containing a single product. So this is
what matches our example data. Let's now see how it works.
How it works...
Our data is very simple. We have three fields for each of our documents – one for the
identifier fields, one for holding the name of the document, and one for its category.
We will use the category field to do the autocomplete functionality, and we will use
faceting for it.
If you look at the index structure, for the category field, we use a special type – the text_
lowercase one. What it does is that it stores the category as a single token in the index
because of solr.KeywordTokenizerFactory. We also lowercase with the appropriate
filter. This is because we want to send the lowercased queries while using faceting.
The query is quite simple – we query for all the documents (q=*:* parameter), and
we don't want any results returned (the rows=0 parameter). We will use faceting for
autocomplete, so we turn it on (facet=true) and we specify the category field to calculate
the faceting (facet.field=category). We are also only interested in faceting a calculation
for the values that have at least one document in them (facet.mincount=1), and we want
the top five results (facet.limit=5). One of of the most important parameters in the query
is facet.prefix – using it we can return on those results in faceting that start with the
prefix defined by the mentioned parameter, which can be seen in the results.
www.it-ebooks.info
Real-life Situations
290
How to use different query parsers in a
single query
Sometimes, it is good to be able to choose different query parsers in the same query.
For example, imagine that you would like to use the Extended DisMax query parser for
the main query, but in addition to this, we would like to use the field query parser for
filter queries. This recipe will show you how to do it.
How to do it...
This recipe will show how we can use different query parsers in a single query.
1. Let's start with the following index structure (this should go to the field section
in the schema.xml file):
<field name="id" type="string" indexed="true"
stored="true" required="true" />
<field name="name" type="text" indexed="true"
stored="true" />
<field name="category" type="string" indexed="true"
stored="true" />
2. Now, let's index the following data:
<add>
<doc>
<field name="id">1</field>
<field name="name">First Solr 4.0 CookBook</field>
<field name="category">Books</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Second Solr 4.0 CookBook</field>
<field name="category">Books And Tutorials</field>
</doc>
</add>
3. So, if we search for all the documents using the Extended DisMax query parser and
want to narrow our results to the Books And Tutorials category, then we can send
the following query:
curl 'http://localhost:8983/solr/select?q=*:*&defType=edismax&fq={
!term f=category}Books And Tutorials'
www.it-ebooks.info
Appendix
291
The results returned by Solr would be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="fq">
{!term f=category}Books And Tutorials
</str>
<str name="q">*:*</str>
<str name="defType">edismax</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">2</str>
<str name="name">Second Solr 4.0 CookBook</str>
<str name="category">Books And Tutorials</str>
</doc>
</result>
</response>
As you can see, we got what we expected. So let's see how it works.
How it works...
Our index structure and example data are not that relevant for this recipe, so I'll skip
discussing them.
What we want to achieve is be sure that the data we filter will be properly processed, and
we want to avoid thinking about any kind of query parsing and Lucene special characters
escaping. In order to do this, we use the term query parser. To inform Solr that we want to
use this query parser in the filter query (the fq parameter), we use local parameter syntax
and send this filter query: {!term f=category}Books And Tutorials. The !term
part of the filter query says which query parser we want to use, and the f property specifies
the field to which we want to send the provided Books And Tutorials value.
That's all; as you can see in the provided results, everything works as intended.
www.it-ebooks.info
Real-life Situations
292
How to get documents right after they were
sent for indexation
Let's say that we would like to get our documents as soon as they were sent for indexing, but
without any commit (both hard and soft) operation occurring. Solr 4.0 comes with a special
functionality called real-time get, which uses the information of uncommitted documents
and can return them as documents. Let's see how we can use it.
How to do it...
This recipe will show how we can get documents right after they were sent for indexation.
1. Let's begin with defining the following index structure (add it to the field section
in your schema.xml file):
<field name="id" type="string" indexed="true"
stored="true" required="true" />
<field name="name" type="text" indexed="true"
stored="true" />
2. In addition to this, we need the _version_ field to be present, so let's also add
the following field to our schema.xml file in its field section:
<field name="_version_" type="long" indexed="true"
stored="true"/>
3. The third step is to turn on the transaction log functionality in Solr. In order to do
this, we should add the following section to the updateHandler configuration
section (in the solrconfig.xml file):
<updateLog>
<str name="dir">${solr.data.dir:}</str>
</updateLog>
4. The last thing we need to do is add a proper request handler configuration to our
solrconfig.xml file:
<requestHandler name="/get"
class="solr.RealTimeGetHandler">
<lst name="defaults">
<str name="omitHeader">true</str>
<str name="indent">true</str>
<str name="wt">xml</str>
</lst>
</requestHandler>
www.it-ebooks.info
Appendix
293
5. Now, we can test how the handler works. In order to do this, let's index the following
document (which we've stored in the data.xml file):
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr 4.0 CookBook</field>
</doc>
</add>
6. In order to index it, we use the following command:
curl 'http://localhost:8983/solr/update' --data-binary @data.xml
-H 'Content-type:application/xml'
7. Now, let's try two things. First, let's search for the document we've just added.
In order to do this, we run the following query:
curl 'http://localhost:8983/solr/select?q=id:1'
8. As you can imagine, we didn't get any documents returned, because we didn't
send any commit command – not even the soft commit one. So now, let's use
our defined handler:
curl 'http://localhost:8983/solr/get?id=1'
The following response will be returned by Solr:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<doc name="doc">
<str name="id">1</str>
<str name="name">Solr 4.0 CookBook</str>
<long name="_version_">1418467767663722496</long>
</doc>
</response>
As you can see, our document is returned by our get handler. Let's see how it
works now.
How it works...
Our index structure is simple, and there is only one relevant piece of information there
– the _version_ field. The real-time get functionality needs that field to be present in
our documents, because the transaction log relies on it. However, as you can see in the
provided example data, we don't need to worry about this field, because its filled and
updated automatically by Solr.
www.it-ebooks.info
Real-life Situations
294
But let's backtrack a bit and discuss the changes made to the solrconfig.xml file.
There are two things there. The first one is the update log (the updateLog section),
which Solr uses to store the so-called transaction log. Solr stores recent index changes
there (until hard commit), in order to provide write durability, consistency, and the ability
to provide the real-time get functionality.
The second thing is the handler we defined under the name of /get with the use of the
solr.RealTimeGetHandler class. It uses the information in the transaction log to get
the documents we want by using their identifier. It can even retrieve the documents that
weren't committed and are only stored in the transaction log. So, if we want to get the
newest version of the document, we can use it. The other configuration parameters are
the same as with the usual request handler, so I'll skip commenting them.
The next thing we do is send the update command without adding the commit command,
so that we shouldn't be able to see the document during a standard search. If you look at the
results returned by the first query, you'll notice that we didn't get that document. However, when
using the /get handler that we previously defined, we get the document we requested. This is
because Solr uses the transaction log in order to even the uncommitted document.
How to search your data in a near real-time
manner
Sometimes, we need our data to be available as soon as possible. Imagine that we have a
SolrCloud cluster up and running, and we want to have our documents available for searching
with only a slight delay. For example, our application can be a content management system
where it would be very weird if a user adds a new document, and it would take some time for
it to be searchable. In order to achieve this, Solr exposes the soft commit functionality, and
this recipe will show you how to set it up.
How to do it...
This recipe will show how we can search for data in a near real-time manner.
1. For the purpose of this recipe, let's assume that we have the following index
structure (add it to the field section in your schema.xml file):
<field name="id" type="string" indexed="true"
stored="true" required="true" />
<field name="name" type="text" indexed="true"
stored="true" />
2. In addition to this, we need to set up the hard and soft automatic commits,
for which we will need to add the following section to the updateHandler
section in the solrconfig.xml file:
www.it-ebooks.info
Appendix
295
<autoCommit>
<maxTime>60000</maxTime>
<openSearcher>false</openSearcher>
</autoCommit>
<autoSoftCommit>
<maxTime>1000</maxTime>
</autoSoftCommit>
3. Let's test if that works. In order to do this, let's index the following document
(which we've stored in the data.xml file):
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr 4.0 CookBook</field>
</doc>
</add>
4. In order to index it, we use the following command:
curl 'http://localhost:8983/solr/update' --data-binary @data.xml
-H 'Content-type:application/xml'
5. We didn't send any commit command, so we shouldn't see any documents, right?
I think there will be one available – the one we've just send for indexation. But, let's
check that out by running the following simple search command:
curl 'http://localhost:8983/solr/select?q=id:1'
The following response will be returned by Solr:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">0</int>
<lst name="params">
<str name="q">id:1</str>
</lst>
</lst>
<result name="response" numFound="1" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr 4.0 CookBook</str>
</doc>
</result>
</response>
As you can see, our document was returned. So, let's see how it works.
www.it-ebooks.info
Real-life Situations
296
How it works...
As you may know, the standard commit operation is quite resource-intensive – it flushes the
changes since the last commit to the disk to the new segment. If you would like to do that every
second, we could run into a problem of a very high amount of I/O writes and thus our searches
would suffer (of course, this depends on the situation). That's why, with Lucene and Solr 4.0,
the new commit type was introduced – the soft commit, which doesn't flush the changes to
disk, but just reopens the searcher object and allows us to search the data that is stored in
the memory.
As we are usually lazy and don't want to remember when it's time to send the commit and
when to use soft commit, we'll let Solr manage that so we properly need to configure the
update handler. First, we add the standard auto commit by adding the autoCommit section
and saying that we want to commit after every 60 seconds (the maxTime property is specified
in milliseconds), and that we don't want to reopen the searcher after the standard commit
(the openSearcher property is set to false).
The next thing is to configure the soft auto commit functionality by adding the softAutoCommit
section to the update handler configuration. We've specified that we want the soft commit to be
fired every second (the maxTime property is specified in milliseconds), and thus our searcher
will be reopened every second if there are changes.
As you can see, even though we didn't specify the commit command after our update
command, we are still able to find the document we've sent for indexation.
How to get the documents with all the query
words to the top of the results set
One of the most common problems that users struggle with when using Apache Solr is how to
improve the relevancy of their results. Of course, relevancy tuning is, in most cases, connected
to your business needs, but one of the common problems is to have documents that have all the
query words in their fields at the top of the results list. You can imagine a situation where you
search for all the documents that match at least a single query word, but you would like to show
the ones with all the query words first. This recipe will show you how to achieve that.
How to do it...
This recipe will show how we can get the documents with all the query words to the top of the
results set.
1. Let's start with the following index structure (add it to the field section in your
schema.xml file):
www.it-ebooks.info
Appendix
297
<field name="id" type="string" indexed="true"
stored="true" required="true" />
<field name="name" type="text" indexed="true"
stored="true" />
<field name="description" type="text" indexed="true"
stored="true" />
2. The second step is to index the following sample data:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr and all the others</field>
<field name="description">This is about Solr</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Lucene and all the others</field>
<field name="description">
This is a book about Solr and Lucene
</field>
</doc>
</add>
3. Let's assume that our usual queries look similar to the following code snippet:
http://localhost:8983/solr/select?q=solr book&defType=edismax&mm=1
&qf=name^10000+description
Nothing complicated; however, the results of such query don't satisfy us, because
they look similar to the following code snippet:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="qf">name^10000 description</str>
<str name="mm">1</str>
<str name="q">solr book</str>
<str name="defType">edismax</str>
</lst>
</lst>
<result name="response" numFound="2" start="0">
www.it-ebooks.info
Real-life Situations
298
<doc>
<str name="id">1</str>
<str name="name">Solr and all the others</str>
<str name="description">This is about Solr</str>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Lucene and all the others</str>
<str name="description">
This is a book about Solr and Lucene
</str>
</doc>
</result>
</response>
4. In order to change this, let's introduce a new handler in our solrconfig.xml file:
<requestHandler name="/better"
class="solr.StandardRequestHandler">
<lst name="defaults">
<str name="indent">true</str>
<str name="q">
_query_:"{!edismaxqf=$qfQuery mm=$mmQuerypf=
$pfQuerybq=$boostQuery v=$mainQuery}"
</str>
<str name="qfQuery">name^100000 description</str>
<str name="mmQuery">1</str>
<str name="pfQuery">name description</str>
<str name="boostQuery">
_query_:"{!edismaxqf=$boostQueryQf mm=100%
v=$mainQuery}"^100000
</str>
<str name="boostQueryQf">name description</str>
</lst>
</requestHandler>
5. So, let's send a query to our new handler:
http://localhost:8983/solr/better?mainQuery=solr book
We get the following results:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
www.it-ebooks.info
Appendix
299
<int name="QTime">2</int>
</lst>
<result name="response" numFound="2" start="0">
<doc>
<str name="id">2</str>
<str name="name">Lucene and all the others</str>
<str name="description">
This is a book about Solr and Lucene
</str>
</doc>
<doc>
<str name="id">1</str>
<str name="name">Solr and all the others</str>
<str name="description">This is about Solr</str>
</doc>
</result>
</response>
As you can see, it works. So let's discuss how.
How it works...
For the purpose of the recipe, we've used a simple index structure that consists of a
document identifier, its name, and description. Our data is very simple as well; it just
contains two documents.
During the first query, the document with the identifier 1 is placed at the top of the query
results. However, what we would like to achieve is be able to boost the name. In addition to
this, we would like to have the documents with words from the query close to each other at
the top of the results.
In order to do this, we've defined a new request handler named /better, which will
leverage the local params. The first thing is the defined q parameter, which is the standard
query. It uses the Extended DisMax parser (the {!edismax part of the query), and defines
several additional parameters:
ff qf: This defines the fields against which edismax should send the query. We tell
Solr that we will provide the fields by specifying the qfQuery parameter by using
the $qfQuery value.
ff mm: This is the "minimum should match" parameter, which tells edismax how
many words from the query should be found in a document for the document to
be considered a match. We tell Solr that we will provide the fields by specifying
the mmQuery parameter, by using the $mmQuery value.
www.it-ebooks.info
Real-life Situations
300
ff pf: This is the phrase fields definition which specifies the fields on which Solr should
generate phrase queries automatically. Similar to the previous parameters that we've
specified, we will provide the fields by specifying the pfQuery parameter, by using
the $pfQuery value.
ff bq: This is the boost query that will be used to boost the documents. Again, we use
the parameter dereferencing functionality and tell Solr that we will provide the
value in the bqQuery parameter, by using the $bqQuery value.
ff v: This is the final parameter which specifies the content of the query; in our case,
the user query will be specified in the mainQuery parameter.
Basically, the preceding queries say that we will use the edismax query parser, phrase,
and boost queries. Now let's discuss the values of the parameters.
The first thing is the qfQuery parameter, which is exactly the same as the qf parameter in
the first query we sent to Solr. Using it, we just specify the fields that we want to be searched
and their boosts. Next, we have the mmQuery parameter set to 1 that will be used as mm in
edismax, which means that a document will be considered a match when a single word
from the query will be found in it. As you will remember, the pfQuery parameter value will
be passed to the pf parameter, and thus the phrase query will be automatically made on
the fields defined in those fields.
Now, the last and probably the most important part of the query, the boostQuery parameter,
specifies the value that will be passed to the bq parameter. Our boost query is very similar to
our main query, however, we say that the query should only match the documents that have
all the words from the query (the mm=100% parameter). We also specify that the documents
that match that query should be boosted by adding the ^100000 part at the end of it.
To sum up all the parameters of our query, they will promote the documents with all the words
from the query present in the fields we want to search on. In addition to this, we will promote
the documents that have phrases matched. So finally, let's look at how the newly created
handler work. As you can see, when providing our query to it with the mainQuery parameter,
the previous document is now placed as the first one. So, we have achieved what we wanted.
How to boost documents based on their
publishing date
Imagine that you would like to place documents that are newer above the ones that are older.
For example, you have a book store and want to promote the books that have been published
recently, and place them above the books that have been present in our store for a long time.
Solr lets us do this, and this recipe will show you how.
www.it-ebooks.info
Appendix
301
How to do it...
This recipe will show how we can boost documents based on their publishing date.
1. Let's begin with the following index structure (add it to the field section in your
schema.xml file):
<field name="id" type="string" indexed="true"
stored="true" required="true" />
<field name="name" type="text" indexed="true"
stored="true" />
<field name="published" type="date" indexed="true"
stored="true" default="NOW" />
2. Now, let's index the following sample data:
<add>
<doc>
<field name="id">1</field>
<field name="name">Solr 3.1 CookBook</field>
<field name="published">2011-02-02T12:00:00Z</field>
</doc>
<doc>
<field name="id">2</field>
<field name="name">Solr 4.0 CookBook</field>
<field name="published">2012-10-01T12:00:00Z</field>
</doc>
</add>
3. Now, let's run a simple query:
curl 'http://localhost:8983/solr/select?q=solr+cookbook&qf=name&de
fType=edismax'
For the preceding query, Solr will return the following results:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">1</int>
<lst name="params">
<str name="qf">name</str>
<str name="q">solr cookbook</str>
<str name="defType">edismax</str>
</lst>
</lst>
www.it-ebooks.info
Real-life Situations
302
<result name="response" numFound="2" start="0">
<doc>
<str name="id">1</str>
<str name="name">Solr 3.1 CookBook</str>
<date name="published">2011-02-02T12:00:00Z</date>
</doc>
<doc>
<str name="id">2</str>
<str name="name">Solr 4.0 CookBook</str>
<date name="published">2012-10-01T12:00:00Z</date>
</doc>
</result>
</response>
4. As you can see, the newest document is the second one, which we want to avoid. So,
we need to change our query to the following one:
curl 'http://localhost:8983/solr/select?q=solr+cookbook&qf=name&bf
=recip(ms(NOW/HOUR,published),3.16e-11,1,1)defType=edismax'
Now, the response will be as follows:
<?xml version="1.0" encoding="UTF-8"?>
<response>
<lst name="responseHeader">
<int name="status">0</int>
<int name="QTime">2</int>
<lst name="params">
<str name="qf">name</str>
<str name="bf">
recip(ms(NOW/HOUR,published),3.16e-11,1,1)
</str>
<str name="q">solr cookbook</str>
<str name="defType">edismax</str>
</lst>
</lst>
<result name="response" numFound="2" start="0">
<doc>
<str name="id">2</str>
<str name="name">Solr 4.0 CookBook</str>
<date name="published">2012-10-01T12:00:00Z</date>
</doc>
<doc>
<str name="id">1</str>
<str name="name">Solr 3.1 CookBook</str>
www.it-ebooks.info
Appendix
303
<date name="published">2011-02-02T12:00:00Z</date>
</doc>
</result>
</response>
So, we have achieved what we wanted. Now, let's see how it works.
How it works...
Our index structure consists of three fields; one responsible for holding the identifier of the
document, one for the name of the document, and the last one; the one which we will be
most interested in, in which we hold the publishing date.
The published field has one nice feature – if we don't define it in the document and send
it for indexation, then it will get the value of the date and time when it is processed (the
default="NOW" attribute).
As you can see, the first query that we sent to Solr returned results not in a way we would
like them to be sorted. The most recent document is the second one. Of course, we could
have sorted them by date, but we don't want to do that, because we would like to have the
most recent and the most relevant documents at the top, not only the newest ones.
In order to achieve this, we use the bf (boost function) parameter. We specify the boosting
function. At first, it can look very complicated, but it's not. In order to boost our documents,
we use the recip(ms(NOW/HOUR,published),3.16e-11,1,1) function query. 3.16e10
specifies the number of milliseconds that are in a single year, so we use 3.16e-11 to invert
that, and we use the reciprocal function (recip) to calculate the scaling value, which will
return values near 1 for recent documents, 1/2 for documents from about a year, 1/3 for
documents that are about two years old, 1/4 for documents that are about three years old,
and so on.
We've also used NOW/HOUR to reduce the precision of the published field, in order for
our function query to consume less memory and because we don't need that granularity;
our results will be just fine.
As you can see, our query with the bf parameter and the time-based function query work
as intended.
There's more...
If you want to read more about function queries, please refer to the http://wiki.apache.
org/solr/FunctionQuery Solr wiki page.
www.it-ebooks.info
www.it-ebooks.info
Index
Symbols
-DnumShards parameter 213
-DzkHost parameter 213
-DzkRun parameter 213
<script> tag 55
A
add command 58
administration GUI, SolrCloud
cluster 220-223
adminPath property 17
adminPath variable 9
alphabetical order
faceting results, sorting in 168-170
analyzer 70
Apache Nutch
URL, for downloading 27
URL, for info 30
Apache Solr
URL, for tutorial 5
Apache Tika 36
Apache Tika library
used, for detecting language 66
Apache Tomcat
Solr, running on 10-13
URL 11
apt-get command 6, 8
automatic document distribution
stopping, among shards 230-234
autosuggest feature
implementing, faceting used 171-173
autowarmCount parameter 190, 193
B
binary files
metadata, extracting from 40-42
bqQuery parameter 300
buffer overflow 10
C
cache 22
caches, Solr
document 22, 26
filter 22, 25
query result 22, 26
CamelCase
used, for splitting text 80, 82
Catalina context file 12
category’s autocomplete functionality
implementing 287-289
working 289
CDATA tags 75
character filters 70
clientPort property 15
cluster
collections, setting up 214-216
replica count, increasing 227-230
collections
setting up, in cluster 214-216
commit command 295
commit operation
about 200
Solr performance, improving after 194-196
conf directory 13
config-file 120
configuration, document cache 189, 190
www.it-ebooks.info
306
configuration, filter cache 192, 193
configuration, query result cache 191, 192
configuration, Solr cache
about 23, 24
document cache 26
filter cache 25
filter cache, using with faceting 25
no cache hits 25
query result cache 26
query result window 26
configuration, spellchecker 19, 21
content
copying, of dynamic fields 77
copying, of fields 75-77
context directory 6
contrib modules 62
crawl command 29
crawl-urlfilter.txt file 29
CSV 30
curl command 37
currencyConfig attribute 61
currencyExchange.xml file 61
currency provider
setting up 62
D
data
clustering 15, 17
importing, Data Import Handler used 48-50
indexing, Data Import Handler used 45-48
modifying, in Data Import Handler 53-55
searching, in near real-time manner 294-296
stemming 91-93
data analysis 70
data behavior 70
data-config.xml file 52
dataDir property 15
Data Import Handler
about 42
configuring, with JDBC 42-44
data, modifying 53-55
used, for importing data 48-50
used, for indexing data from database 45-48
using, with URL data source 50, 51
data indexing 70
db-data-config.xml file 43
debug attribute 12
decision tree faceting
using 180-183
defaultCoreName attribute 9, 13
defaultCurrency attribute 61
default HTML tags
modifying 241
default similarity implementation
modifying 32-34
defined words
ignoring 248-250
defType parameter 116
delete operation 216
different query parsers
using, in single query 290, 291
directoryFactory tag 18
directory implementation
selecting 17-19
DirectSolrSpellChecker 256
DisMax query parser
about 116, 122
used, for querying particular value 109
distance
defining, between words in phrase 114
distributed indexing 223-226
docBase attribute 12
document
language, detecting 62-66
single field, updating 56-58
document cache
about 22, 26, 189
configuring 189, 190
document count
getting, by query match 161-164
getting, by subquery match 161-164
getting, without value in field 174-176
getting, with same field value 156-158
getting, with same value range 158-161
document language
detecting 62-66
detecting, Apache Tika library used 66
documents
boosting, based on publishing date 301-303
default HTML tags, modifying 241
excluding, with
QueryElevationComponent 121
faceting, calculating for 183-186
www.it-ebooks.info
307
getting right, after indexation 292, 293
getting, with all query words at top
results set 296-300
modifying 136-138
positioning, over others on query 117-121
positioning, with closer words 122-125
retrieving, with partial match 128-130
DoubleMetaphoneFilterFactory 247
duplicate documents
detecting 145-148
omitting 145-148
dynamic fields
content, copying of 77
E
elevate.xml file 139
embedded ZooKeeper server
starting 213
enablePositionIncrements parameter 250
entities 44
Extended DisMax query parser
parameters 299
using 290, 299
extracting request handler
setting up 30, 31
F
faceting
about 155
calculating, for relevant documents
in groups 183-186
filter cache, using with 25
used, for implementing
autosuggest feature 171-173
faceting method per field
specifying 200
faceting performance
improving, for low cardinality fields 198, 199
faceting results
filters, removing from 164-167
lexicographical sorting 158
sorting, in alphabetical order 168-170
facet limits
for different fields, in same query 177-180
FastVectorHighlighting feature 243
field
updating, of document 56-58
field aliases
using 148-150
fields
content, copying of 75-77
specifying, for highlighting 241
field value
used, for grouping results 257-259
used, for sorting results 109-111
file data source 50
filter cache
about 22, 25, 192
configuring 192, 193
using, with faceting 25
filter caching
avoiding 206
filter queries
order of execution, controlling for 207, 208
filters
removing, from faceting results 164-167
flexible indexing 68
function queries
used, for grouping results 262, 263
functions
scoring, affecting with 130-34
function value
used, for sorting results 243-245
G
Gangila
URL 188
generateNumberParts parameter 98
generateWordParts parameter 98
geodist function 245
geographical points
storing, in index 88-91
global similarity
configuring 34
H
hash value 227
highlighting
fields, specifying for 241
HTML tags
eliminating, from text 73-75
www.it-ebooks.info
308
HttpDataSource 52
Hunspell
about 99
using, as stemmer 99, 100
I
ignoreCase attribute 79
ignored.txt file 248
index
geographical points, storing in 88-91
making, smaller 272, 273
indexing 35
index size
estimating 274
information
storing, payloads used 70-73
initialSize parameter 190
initLimit property 15
installation, ZooKeeper 14, 15
instanceDir attribute 9
issues, Apache Tomcat
Apache Tomcat, running on different port 13
issues, Jetty servlet container
buffer overflow 10
Jetty, running on different port 9
J
Java 6 55
java command 8, 9
JDBC
Data Import Handler, configuring with 42-44
Jetty
Solr, running on 6-9
Jetty servlet container
URL, for downloading 6
jetty.xml file 7, 10
JSON 30
L
language attribute 55
lexicographical sorting, faceting results 158
light stemming 86
logging.properties file 7
low cardinality fields
faceting performance, improving for 198, 199
Lucene directory implementation 17
LuceneQParser query parser 240
Lucene’s internal cache 23
M
matched words
highlighing 238-240
maxChars attribute 77
mergeFactor parameter 267
metadata
extracting, from binary files 40-42
mmQuery parameter
about 299
multiple currencies
configuring 59-61
handling 59
using 59-61
multiple values
querying for 109
N
n-grams
about 95
used, for handling user typos.. 142-145
non-English languages
sorting, properly 268-271
non-whitespace characters
used, for splitting text 96-98
numbers
used, for splitting text 96-98
numerical range queries
performance, improving 208, 209
O
opened files
dealing with 265-267
order of execution
controlling, of filter queries 207, 208
OR operator 122
out-of-memory issues
dealing with 267, 268
www.it-ebooks.info
309
P
parameter dereferencing 136
parameters, Extended DisMax query parser
bq 300
mm 299
pf 300
qf 299
v 300
parent-child relationships
about 139
using 140, 141
partial match
documents, retrieving with 128-130
particular field value
asking for 108
particular value
querying, DisMax query parser used 109
path attribute 12
payload
about 70
used, for storing information 70-73
PDFCreator 36
PDF files
indexing 36-38
performance
about 187
improving, of numerical range
queries 208, 209
pfQuery parameter 300
phrase
searching for 111-113
phrases
boosting, over words 114-116
boosting, with standard query parser 117
phrase slop 114
pivot faceting 180
plural words
singular, making 84-86
PostgreSQL 50
primary key 67
primary key field indexing
optimizing 67, 68
product’s autocomplete functionality
implementing 284, 285
working 286, 287
Q
qfQuery parameter 299
queries
nesting 134-136
used, for grouping results 260-262
queryAnalyzerFieldType property 21
QueryElevationComponent
document, excluding with 121
queryFieldType attribute 120
query parser 291
query performance
analyzing 202-205
query result cache
about 22, 26, 190
configuring 191, 192
queryResultMaxDocsCached property 189
query results
paging 188, 189
query result window 26
queryResultWindowSize property 188
R
real-time get 292
reload operation 216
replicas
increasing, on live cluster 227-230
replication 227
result pages
caching 197, 198
results
grouping, field values used 257-259
grouping, function queries used 262-263
grouping, queries used 260-262
sorting, by distance from point 125-128
sorting, by field value 109-111
sorting, by function value 243-245
value of function, returning in 151-153
S
Scalable Performance Monitoring 25, 188
schema.xml file 7, 29, 38, 52, 84, 133
scoring
affecting, with functions 130-134
searching 223-226
www.it-ebooks.info
310
search results
used, for computing statistics 250-253
Sematext
about 25
URL 188
server.xml file 11
similar documents
returning 236-238
softCommit command 17
Solr
about 36, 99
indexing, issues 200-202
performance, improving after commit
operation 194-196
performance, improving after startup
operation 194-196
result pages, caching 197, 198
running, on Apache Tomcat 10-12
running, on Jetty 6-9
Solr 4.0 211
Solr cache
configuring 23, 24
SolrCloud
about 211
automatic document distribution, stopping
among shards 230-234
collections, setting up in cluster 214-216
distributed indexing 223-226
replicas, increasing on live cluster 227-230
searching 223-226
SolrCloud cluster
about 211
administration GUI 220-223
creating 212
managing 216, 217-219
working 213
solrconfig.xml file 7, 16, 19, 52, 188
solr.DFRSimilarityFactory 34
solr.DirectSolrSpellchecker 19
solr.DirectSolrSpellChecker 21
Solr issues
diagnosing 274-279
solr.MMapDirectoryFactory 18
solr.NIOFSDirectoryFactory 18
solr.NRTCachingDirectoryFactory 19
solr.QueryElevationComponent 117
solr.RAMDirectoryFactory 19
solr.RealTimeGetHandler class 294
solr.SchemaSimilarityFactory 34
solr.SimpleFSDirectoryFactory 18
solr.StandardDirectoryFactory 18
solr.UUIDField 39
solr.war file 6, 8
Solr wiki page 303
solr.xml file 6-13
sounds
used, for searching words 246, 247
spellchecker
about 19
configuring 19, 21
spellchecker component
about 253
using 254-256
spelling mistakes
checking, of user 253-256
splitOnNumerics parameter 98
standard query parser
phrases, boosting with 117
startup operation
Solr performance, improving after 194-196
statistics
computing, for search results 250-253
StatsComponent 252
stemmer
Hunspell, using as 99, 100
stemming
about 91
words, protecting from 103-106
stemming algorithms 84
stemming dictionary
using 101-103
StopFilterFactory 250
string
lowercasing 87, 88
swapping
avoiding 280-282
syncLimit property 15
synonyms attribute 79
synonyms.txt file 78
T
temp directory 6
termVectors attribute 238
www.it-ebooks.info
311
text
HTML tags, eliminating from 73-75
preparing, for wildcard search 93-95
splitting, by CamelCase 80-82
splitting, by non-whitespace characters 96-98
splitting, by numbers 96-98
splitting, by whitespace 82-84
XML tags, eliminating from 73-75
text fields
highlighting 241-243
tickTime property 15
Tika 31
tokenizer 70
tokens 70
transformer 52
types 70
typos
handling, ngrams used 142-145
ignoring, in performance wise way 142-145
U
unique fields
generating, automatically 38, 39
URL data source
Data Import Handler, using with 50-53
UTF-8 file encoding 12
V
value of function
returning, in results 151-153
vQuery parameter 300
W
webapps directory 6
webdefault.xml file 7
web pages
fetching 27-29
indexing 27-29
whitespace
used, for splitting text 82-84
wildcard search
text, preparing for 93-95
words
modifying 77-79
phrases, boosting over 114-116
protecting, from stemming 103-106
searching, by sound 246, 247
X
XML 30
XML tags
eliminating, from text 73-75
XPath expression 52
Z
ZooKeeper
about 14
installing 14, 15
URL, for downloading 14
ZooKeeper cluster 212
www.it-ebooks.info
www.it-ebooks.info
Thank you for buying
Apache Solr 4 Cookbook
About Packt Publishing
Packt, pronounced 'packed', published its first book "Mastering phpMyAdmin for Effective MySQL
Management" in April 2004 and subsequently continued to specialize in publishing highly focused
books on specific technologies and solutions.
Our books and publications share the experiences of your fellow IT professionals in adapting and
customizing today's systems, applications, and frameworks. Our solution based books give you the
knowledge and power to customize the software and technologies you're using to get the job done.
Packt books are more specific and less general than the IT books you have seen in the past. Our
unique business model allows us to bring you more focused information, giving you more of what
you need to know, and less of what you don't.
Packt is a modern, yet unique publishing company, which focuses on producing quality, cuttingedge
books for communities of developers, administrators, and newbies alike. For more
information, please visit our website: www.packtpub.com.
About Packt Open Source
In 2010, Packt launched two new brands, Packt Open Source and Packt Enterprise, in order to
continue its focus on specialization. This book is part of the Packt Open Source brand, home
to books published on software built around Open Source licences, and offering information to
anybody from advanced developers to budding web designers. The Open Source brand also runs
Packt's Open Source Royalty Scheme, by which Packt gives a royalty to each Open Source project
about whose software a book is sold.
Writing for Packt
We welcome all inquiries from people who are interested in authoring. Book proposals should
be sent to author@packtpub.com. If your book idea is still at an early stage and you would like to
discuss it first before writing a formal book proposal, contact us; one of our commissioning editors
will get in touch with you.
We're not just looking for published authors; if you have strong technical skills but no writing
experience, our experienced editors can help you develop a writing career, or simply get some
additional reward for your expertise.
www.it-ebooks.info
Apache Solr 3 Enterprise
Search Server
ISBN: 978-1-84951-606-8 Paperback: 418 pages
Enhance your search with faceted navigation, result
highlighting relevancy ranked sorting, and more
1. Comprehensive information on Apache Solr
3 with examples and tips so you can focus
on the important parts
2. Integration examples with databases,
web-crawlers, XSLT, Java & embedded-Solr,
PHP & Drupal, JavaScript, Ruby frameworks
3. Advice on data modeling, deployment
considerations to include security, logging,
and monitoring, and advice on scaling Solr
and measuring performance
HBase Administration
Cookbook
ISBN: 978-1-84951-714-0 Paperback: 332 pages
Master HBase configuration and administration for
optimum database performance
1. Move large amounts of data into HBase
and learn how to manage it efficiently
2. Set up HBase on the cloud, get it ready
for production, and run it smoothly with
high performance
3. Maximize the ability of HBase with the
Hadoop eco-system including HDFS,
MapReduce, Zookeeper, and Hive
Please check www.PacktPub.com for information on our titles
www.it-ebooks.info
Hadoop Real World Solutions
Cookbook
ISBN: 978-1-84951-912-0 Paperback: 325 pages
Realistic, simple code examples to solve problems at
scale with Hadoop and related technologies
1. Solutions to common problems when working
in the Hadoop environment
2. Recipes for (un)loading data, analytics, and
troubleshooting
3. In depth code examples demonstrating various
analytic models, analytic solutions, and common
best practices
Cassandra High Performance
Cookbook
ISBN: 978-1-84951-512-2 Paperback: 310 pages
Over 150 recipes to design and optimize large-scale
Apache Cassandra deployments
1. Get the best out of Cassandra using this efficient
recipe bank
2. Configure and tune Cassandra components to
enhance performance
3. Deploy Cassandra in various environments and
monitor its performance
4. Well illustrated, step-by-step recipes to make all
tasks look easy!
Please check www.PacktPub.com for information on our titles
www.it-ebooks.info
Hellerstein, chancellor’s professor of computer science at UC Berkeley.
“If you have people in the loop, it’s not real time. Most people take a
second or two to react, and that’s plenty of time for a traditional transactional
system to handle input and output.”
That doesn’t mean that developers have abandoned the quest for speed.
Supported by a Google grant, Matei Zaharia is working on his Ph.D.
at UC Berkeley. He is an author of Spark, an open source cluster computing
system that can be programmed quickly and runs fast. Spark
relies on “resilient distributed datasets” (RDDs) and “can be used to
interactively query 1 to 2 terabytes of data in less than a second.”
In scenarios involving machine learning algorithms and other multipass
analytics algorithms, “Spark can run 10x to 100x faster than Hadoop
MapReduce,” says Zaharia. Spark is also the engine behind
Shark, a data warehousing system.
According to Zaharia, companies such as Conviva and Quantifind
have written UIs that launch Spark on the back end of analytics dashboards.
“You see the statistics on a dashboard and if you’re wondering
about some data that hasn’t been computed, you can ask a question
that goes out to a parallel computation on Spark and you get back an
answer in about half a second.”
Storm is an open source low latency processing stream processing
system designed to integrate with existing queuing and bandwidth
systems. It is used by companies such as Twitter, the Weather Channel,
Groupon and Ooyala. Nathan Marz, lead engineer at BackType (acquired
by Twitter in 2011), is the author of Storm and other opensource
projects such as Cascalog and ElephantDB.
“There are really only two paradigms for data processing: batch and
stream,” says Marz. “Batch processing is fundamentally high-latency.
So if you’re trying to look at a terabyte of data all at once, you’ll never
be able to do that computation in less than a second with batch processing.”
Stream processing looks at smaller amounts of data as they arrive. “You
can do intense computations, like parallel search, and merge queries
on the fly,” says Marz. “Normally if you want to do a search query, you
need to create search indexes, which can be a slow process on one
machine. With Storm, you can stream the process across many machines,
and get much quicker results.”
10 | Chapter 3: How Real Is Real Time?

